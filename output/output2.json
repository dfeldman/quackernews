[
  {
    "title": "Why am I writing a Rust compiler in C? (notgull.net)",
    "points": 192,
    "submitter": "todsacerdoti",
    "submit_time": "2024-08-25T21:08:06",
    "num_comments": 96,
    "comments_url": "https://news.ycombinator.com/item?id=41351446",
    "comments": [
      "If I were to try bootstrapping rust, I think I would write a proto-rust in C that has fewer features than full rust, and then write a full rust compiler in proto-rust.\u2018proto-rust\u2019 might, for example, not have a borrow checker, may have limited or no macro support, may never free memory (freeing memory isn\u2019t strictly needed in a compiler whose only goal in life is to compile a better compiler), and definitely need not create good code.That proto-rust would basically be C with rust syntax, but for rust aficionados, I think that\u2019s better than writing a rust compiler in \u201cC with C syntax\u201d that this project aims for.Anybody know why this path wasn\u2019t taken?\n \nreply",
      "FWIW mrustc, the existing state of the art non-rust rust compiler, already doesn\u2019t have a borrow checker.Removing the borrow checker doesn\u2019t break any correct programs \u2014 it just makes it so a huge amount of incorrect programs can be compiled. This is fine, since we mainly want to use mrustc to compile rustc, and we already know rustc can compile itself with no borrow checker errors.\n \nreply",
      "And once you have yourself bootstrapped, you can presumably turn around and compile the compiler again, now with borrow-checking and optimizations.In the very special case of proto-rust bootstrapping, the cost of not having borrow-checking can be paid back basically right away.\n \nreply",
      "This is what we did for Mozart/Oz [1]. We have a compiler for \"proto-Oz\" written in Scala. We use it to compile the real compiler, which is written in Oz. Since the Scala compiler produces inefficient code, we then recompile the real compiler with itself. This way we finally have an efficient real compiler producing good code. This is all part of the standard build of the language.[1] https://github.com/mozart/mozart2\n \nreply",
      "So now you're writing two compilers.What did you actually gain from this, outside of more work?\n \nreply",
      "Writing a small compiler in C and a big compiler in Rust is simpler than writing a big compiler in C.\n \nreply",
      "But writing a Rust compiler in Rust is already done.\n \nreply",
      "How do you compile that on a new platform?\n \nreply",
      "One way would be to have an intermediate target that is easily recompiled or run on any hardware.https://ziglang.org/news/goodbye-cpp/\n \nreply",
      "Cross compilation.\n \nreply"
    ],
    "link": "https://notgull.net/announcing-dozer/",
    "first_paragraph": "",
    "summary": "Welcome to yet another episode on \"Why am I not just writing everything in C?\" Today's amusement comes from a brave soul attempting to bootstrap a Rust compiler using the beloved ancient language of C, a task akin to crafting a WhatsApp group chat that exclusively discusses the weather. Commenters, in a stunning display of missing the point, argue the merits of half-baked Rust and whether removing a borrow checker is akin to skipping leg day at the gym. Watch in real-time as software developers reinvent the wheel, only to realize that square wheels do not, in fact, roll well. \ud83c\udfa1\ud83d\udcbb"
  },
  {
    "title": "Database \"sharding\" came from Ultima Online? (raphkoster.com)",
    "points": 114,
    "submitter": "fanf2",
    "submit_time": "2024-08-25T20:42:02",
    "num_comments": 37,
    "comments_url": "https://news.ycombinator.com/item?id=41351219",
    "comments": [
      "For context, Raph Koster is not only the person who designed Ultima Online, but generally considered one of the top theoricians in game design. This isnt some guy who has a small blog and came up with a neat explanation for how some word came about in the early days of the web. Its the guy who did it.\n \nreply",
      "I have never played modern Ultima. I played a very early version on the Mac SE when I was about 6 and I didn\u2019t understand anything that was going on. I just rode around aimlessly. The one thing I remember is that the menu had a \u201cnegate time\u201d option and when I selected it a message came up that said \u201cyou don\u2019t have two coins to rub together\u201d.So I just rode around not knowing what was going on but hoping to find two coins so I could rub them together and negate time.\n \nreply",
      "Previously on HN:https://news.ycombinator.com/item?id=35479553 (90 comments)https://news.ycombinator.com/item?id=23438399 (172 comments)https://news.ycombinator.com/item?id=425765 (3 comments)https://news.ycombinator.com/item?id=17926566 (1 comment)https://news.ycombinator.com/item?id=16343939 (1 comment)And related:https://news.ycombinator.com/item?id=36848605\n \nreply",
      "semi-related, but also helps me to believe that this is the case (and not only because the different regional servers were called \"shards\" in Ultima Online):in the \"Game Coding Complete, Fourth Edition\" book by two programmers who worked on Ultima and Sims (and other Origin/EA games of the time) back in the day, they share some war stories of programming, and if memory serves there is a portion where they talk about the original design, and the realization that lead to the sharding and how the login and shard system worked in the game.Also, unrelated, a really neat war story about a guy who put in debug code to generate certain audio cues while a game was running to catch a bug.The book all in all was a fun read if only for all these stories, and generally remember good coding guidelines as well but it is using older C++ that may not stand up to modern critique.[0]: https://www.amazon.com/dp/1133776574\n \nreply",
      "Ha re: audio cues for debugging\u2026 your pc speaker is truly an underused tool when debugging something infrequent\u2026 for example our system processes a lot of xml data and usually it\u2019s fine but for our test suite hearing beeps and knowing there are server side issues immediately is a great thing\n \nreply",
      "Absolutely!I ended up digging the book out and finding the passage; hopefully it's ok to share because it's an amazing story and helps illustrate what makes that book so great to me:\"The best caveman debugging solution I ever saw was one that used the PC speaker. Herman was a programmer who worked on Ultima V through Ultima IX, and one of his talents was perfect pitch. He could tell you the difference between a B and a B flat and get it right every time. He used this to his advantage when he was searching for the nastiest crasher bugs of them all - they didn't even allow the debugger window to pop up. He wrote a special checker program that output specific tones through the PC speaker and peppered the code with these checks. If you walked into his office while his spiced-up version of the game was running, it sounded a little like raw modem noise, until the game crashed. Because the PC speaker wasn't dependent on the CPU, it would remain emitting the tone of his last check. \"Hmm...that's a D,\" he would say, and zero in on the line of code that caused the crash.\"- Game Coding Complete, Fourth Edition\n \nreply",
      "Cubicles aren't enough. Developers need their own sound-proof offices.\n \nreply",
      "heh, like the Malloc Geiger Counter - https://news.ycombinator.com/item?id=24303832Gamedev people came up with creative devices, like using pedal to debug-break into the game.\n \nreply",
      "Real programmers just hold an AM radio next to the motherboard.At guru level, of course, you no longer need the radio.\n \nreply",
      "Hmmm... I vaguely recall the term \"shards\" when referring to DB/2 running on S36, S38, and later newfangled AS/400 across the world.  When presenting the data in a single pane, some \"shards\" would come in late, or be broken, and require reconnecting.\n \nreply"
    ],
    "link": "https://www.raphkoster.com/2009/01/08/database-sharding-came-from-uo/",
    "first_paragraph": "",
    "summary": "**Title: Database \"sharding\" came from Ultima Online? (raphkoster.com)**\n\nIn an *astonishing* display of etymological acrobatics, Raph Koster\u2014gaming guru and historical linguist by accident\u2014claims the mantle of coining \"sharding\" in Ultima Online. The blog-goers and commentariat at raphkoster.com engage in a spirited symphony of nostalgia and quasi-tech punditry that rivals only the most fervent of bar trivia nights. Commenters, demonstrating an impressive commitment to missing the point, reminisce about unrelated debugging adventures and the sound of PC speakers as if debugging methodologies were about to become the new Bitcoin. Meanwhile, someone inevitably confuses Ultima with a retirement plan for database servers. \ud83c\udfae\ud83d\udcbe\ud83e\udd37\u200d\u2642\ufe0f"
  },
  {
    "title": "TIL: Versions of UUID and when to use them (ntietz.com)",
    "points": 159,
    "submitter": "fagnerbrack",
    "submit_time": "2024-08-25T19:05:20",
    "num_comments": 72,
    "comments_url": "https://news.ycombinator.com/item?id=41350225",
    "comments": [
      "> UUID Version 2 (v2) is reserved for security IDs with no known details.Only no known details if the only document you're reading is the notoriously poorly-specified RFC. Here you go: https://pubs.opengroup.org/onlinepubs/9696989899/chap5.htm#t...There are also \u201cversion 0\u201d UUIDs that you are very unlikely to ever come across but should be noted because they are the source of the reserved bits (via wastefully setting aside an entire octet for Address Family) that later allowed the other \u201cversions\u201d to be specified in a compatible way. Read my research about them here in my UUID library: https://github.com/okeeblow/DistorteD/blob/NEW%E2%80%85SENSA...I decided to support them Because It's Cool\u2122 but still need to figure out how to handle the date rollover of them and the even-older Apollo UIDs:  irb> ::GlobeGlitter::from_ncs_time\n  => \"#<GlobeGlitter 40639cd25341.02.00.00.e0.4c.18.00.69>\"\n  irb> ::GlobeGlitter::from_ncs_time.to_time\n  => 1988-12-21 14:52:02 UTC\n  irb> ::GlobeGlitter::from_aegis_time\n  => \"#<GlobeGlitter 00000000-0000-0000-4814-17c8b0080069>\"\n\n\n(Proper AEGIS `#to_str` not implemented yet lol)\n \nreply",
      "> UUID Version 2 (v2) is reserved for security IDs with no known details.I found the details in about 2 minutes: Click the link in the article to take me to the section of RFC 9562 that says it's defined as part of DCE, click the first link in that paragraph to go to the spec, ctrl-f \"UUID\", then jump to appendix A (deceptively named \"Universal Unique Identifier\") which has all the details.Is it really too much to ask to CLICK YOUR OWN LINKS?\n \nreply",
      "Probably written by a language model\n \nreply",
      "haha I had the precise same thought process and immediately didn't finish the article since they didn't have much attention to detail.i enjoyed reading the appendix though as a snapshot of time.\n \nreply",
      "I wish there's a standard for short UUID, like `73WakrfVbNJBaAmhQtEeDv` or `bK7nP9xM`. I mean, it's not UUID cause it can be duplicated somewhere, I just want an ID standart combination of random and short enough to remember.\n \nreply",
      "The closest that comes to minds is ULID[0]. It is short (26 character base32), 128 bit and lexicographically sortable.I think the reason there's no other popular standard is you give up something. 128 bit gives a pretty low risk of collisions in almost all uses, but as you go smaller you start having to consider the specific scenario and impact, etc, which doesn't work well for a standard.You could use another encoding (eg base64 or base85) to get it shorter, but you start sacrificing other things (case sensitivity, url-safeness) - again, not great for a standard.[0] https://github.com/ulid/spec\n \nreply",
      "Nanoid? https://github.com/ai/nanoid\n \nreply",
      "> combination of random and shortIMO we need to be clear on the distinction between (A) the UUID bit-generation scheme versus (B) the way it is encoded for human use/reading/transcription.They are mostly-separate problems.For example, you could have a very secure mathematical scheme, but it gets ruined by a horrible representation where each bit is written as either a capital-I, a lowercase-l, or the number 1.Conversely, could have a deeply insecure scheme that uses a nice compact serialization where everything is grouped into chunks and \"1Il\" confusion is not possible and there's a check-digit, etc.\n \nreply",
      "Sqids[1] might fit the bill for you - the IDs it produces are much shorter than UUIDs, however they're not universally unique - they're generated from an integer sequence.1. https://sqids.org/\n \nreply",
      "A feature of a Sqid library I've used is that it can pad the value out to a minimum set of characters, so even an internal id of 1 can look substantial.https://github.com/sqids/sqids-php\n \nreply"
    ],
    "link": "https://ntietz.com/blog/til-uses-for-the-different-uuid-versions/",
    "first_paragraph": "Saturday, June 29, 2024About a month ago1, I was onboarding a friend into one of my side project codebases and she asked me why I was using a particular type of UUID.\nI'd heard about this type while working on that project, and it's really neat.\nSo instead of hogging that knowledge for just us, here it is: some good uses for different versions of UUID.Usually when we have multiple numbered versions, the higher numbers are newer and presumed to be better.\nIn contrast, there are 8 UUID versions (v1 through v8) which are different and all defined in the standard.Here, I'll provide some explanation of what they are at a high level, linking to the specific section of the RFC in case you want more details.With eight different versions, which should you use?\nThere are a few common use cases that dictate which you should use, and some have been replaced by others.You'll usually be picking between two of them: v4 or v7.\nThere are also some occasions to pick v5 or v8.What about the other ones?De",
    "summary": "**Hobbyist UUID Aficionados Hold Court: The Endless Versions Debate**\n\nIn a blog post that equates UUID intricacies with high art, the author regales us with a tale of onboarding a friend on the mystical world of \"different types of UUIDs.\" Behold, the monumental discovery that **not all versions are created equal**, a fact that stirs the collective minds of commenters into a frenzied analysis of RFCs and personal GitHub repos. One heroic commenter even recounts their odyssey to find the esoteric details of Version 2 UUIDs, weaving through RFC links like a hacker in a cyber thriller. \ud83d\udd04\ud83d\udd0d Meanwhile, a spectator mournfully wishes for shorter UUIDs, perhaps dreaming of the day when alphanumeric sequences can be both unique and tweetable.\ud83d\udc94"
  },
  {
    "title": "Strandbeest (strandbeest.com)",
    "points": 301,
    "submitter": "nicopappl",
    "submit_time": "2024-08-25T13:06:08",
    "num_comments": 82,
    "comments_url": "https://news.ycombinator.com/item?id=41347016",
    "comments": [
      "For anyone who wants to know more:This is an application of Jansen's linkage:\nhttps://en.wikipedia.org/wiki/Jansen%27s_linkageThere are other similar linkages but Jansen's is quite good.For anyone who doesn't have an idea why something like this matters or is inspiring beyond art, legged vehicles have many downsides but one big upside is that you can theoretically avoid the rubber/microplastic particulate emission associated with tires and wheeled vehicles if you can make legged vehicles as good as wheeled ones.Even an electric battery vehicle with an electric motor charged by a solar/wind/nuclear power plant still emits pure poison into the air and waterways through friction between tires and the road.Good alternatives would be biocompatible tires (Nitinol mesh tires like SMART Tire company's initial prototype that lacked the rubber coating) or legged vehicles.\n \nreply",
      "> legged vehicles have many downsides but one big upside is that you can theoretically avoid the rubber/microplastic particulate emission associated with tires and wheeled vehicles if you can make legged vehicles as good as wheeled ones.How do you square this idea with the fact that my running shoes wear out?  I'm a legged vehicle, and it's clear that the soles of my shoes wear down over time and the lost mass of the rubber went somewhere.Whether legs or wheels, there are going to be contact patches that have to endure some quantity of sheering force when the vehicle is doing anything other than remaining stationary.  It's this sheering force that grates the particulates away from tires, and I presume a legged vehicle would need a tire-like compound on the surfaces it uses to contact the road.  So why would legs be different in this regard?\n \nreply",
      "You could wear wooden clogs or something. It would be uncomfortable but if you were a robot you wouldn't care. They would still wear out, but sawdust is less permanent than microplastics.\n \nreply",
      "Wouldn't a legged vehicle still have that problem if it can achieve the same speeds and weights that regular cars go at?Scale up a human for example to the weight and speed of a car. Crazy powerful and big legs, big feet, big shoes. The rubber must hit the road either way and push down with a force to propel the weight of this car-heavy legged human at speeds of 100km/h. It would still wear rubber away just like tires do.Legged vehicles aren't a replacement for regular vehicles if tire particulates are your concern.\n \nreply",
      "> It would still wear rubber away just like tires do.It\u2019s been a hot minute since I learnt rolling friction in high school physics but (iirc) a very interesting and unintuitive aspect of it is that there\u2019s always an opposing/slowing force on a (rubber) wheel. Only a slippping wheel will not experience a slowdown. Static friction is different from rolling friction, and (I think) can offer zero wear in ideal conditions - but rolling wear is always non-zero.\n \nreply",
      "Couldn't you do away with rubber and shoes since for legs you don't need flat, smooth roads either (so metal legs of a multi-ton vehicle won't have anything to damage too bad).For comfort, you could have springs and air and hydraulic dampeners.\n \nreply",
      "The metal itself would damage the ground that is walked on though no?\n \nreply",
      "Yes, but walking on rough terrain would still keep it a rough terrain.\n \nreply",
      "> one big upside is that you can theoretically avoid the rubber/microplastic particulate emission associated with tires and wheeled vehicles if you can make legged vehicles as good as wheeled ones.How does keeping rough terrain rough help with that?\n \nreply",
      "My implication is that you want rubber for nice asphalt/road surface to avoid damaging it \u2014 for comfort, other suspension components can help out instead.If you don't care about preserving the terrain (which you can when it's rough to begin with), you can just go with large surface metal feet and you should not get any rubber/microplastics, though you will get metallic dust.\n \nreply"
    ],
    "link": "https://www.strandbeest.com/",
    "first_paragraph": "",
    "summary": "Welcome to the future of transportation debates, where the environmentally conscious and the confused mingle to unleash a beast of technical jargon and theoretical scenarios. In today's episode on Strandbeest.com, hobby-engineers clash with amateur environmentalists to _dramatically_ dissect if a terrorizing swarm of mechanical legs could replace our rubber-tire fiends. Commenters bravely battle the laws of physics and common sense, suggesting solutions like wooden clogs for robots and metal feet for behemoth bots that wouldn't care if your grandmother's backyard looks like a WWI battlefield. Will legged leviathans triumph over traditional transport, or will they just scuff up the landscape even more? Stay tuned, but don't hold your breath unless you enjoy the smell of metallic dust and crushed dreams. \ud83e\udd16\ud83c\udf0d\ud83d\udca5"
  },
  {
    "title": "Australian employees now have the right to ignore work emails, calls after hours (reuters.com)",
    "points": 29,
    "submitter": "testrun",
    "submit_time": "2024-08-26T00:08:07",
    "num_comments": 12,
    "comments_url": "https://news.ycombinator.com/item?id=41352681",
    "comments": [
      "> To cater for emergencies and jobs with irregular hours, the rule still allows employers to contact their workers, who can only refuse to respond where it is reasonable to do so.This clause pretty much invalidates the rest of the rule. Why should an employee need to justify their inability (or unwillingness) to respond? I can understand the \"jobs with irregular hours\", but otherwise shouldn't it be a best effort thing, without any obligation?\n \nreply",
      "With getting no overtime, no time off in lieu, and managers perpetually confusing a 'problem' with an 'emergency', I'm glad to see this happen. If it will actually make a difference though, I'm yet to be convinced.\n \nreply",
      "I mean the FWC can straight up fine the company, and in general our commissions & ombudsmans are pretty decently run. It'll have an effect, I'm sure.\n \nreply",
      "Yes, but 'Employers should be able to justify contacting professionals after hours based on common contract clauses that say a worker\u2019s high salary includes reasonable overtime'.See: https://www.afr.com/work-and-careers/workplace/the-right-to-...\n \nreply",
      "I don't live or work in any of those places, but I've been ignoring work emails and calls after hours for a long time. Helps that 1) I don't have a work phone, 2) apps that my company uses on my personal phone, and 3) never log into the company network or services on my own laptop.In the few instances when I was called out about it, I asked Could the message/call have waited until the following morning/Monday? The answer was almost always Yes.\n \nreply",
      "This does not stop an employer from potentially disciplining or firing you. Laws do, because they bind. Implicit contracts and hope are not a strategy, with regards to worker rights and protections.\n \nreply",
      "That's unrealistic. Managers who are unhappy with workers ignoring emails will find a reason to fire them, not promote them, or give them a smaller bonus.\n \nreply",
      "With that logic you could throw out any labor protection law. Let's keep it constructive.\n \nreply",
      "UK is up next:https://www.euronews.com/next/2024/08/20/the-right-to-discon...By jurisdiction:https://en.wikipedia.org/wiki/Right_to_disconnect\n \nreply",
      "Generally I'll only answer for actual production emergencies and I'll expect that I'll get time in lieu or overtime payments. I'll probably still keep doing that.\n \nreply"
    ],
    "link": "https://www.reuters.com/world/asia-pacific/australian-employees-now-have-right-ignore-work-emails-calls-after-hours-2024-08-25/",
    "first_paragraph": "",
    "summary": "Title: Australian Workers Can Now Safely Ignore Boss's Weekend Memos...Sort Of\n\nSummary: In a world-changing event, Australian employees are now legally allowed to ignore after-hours work emails and calls, except when it's not reasonable to do so, thus effectively changing absolutely nothing. Commenters bicker like old church ladies over whether this will usher in a new era of workplace respect or just empower managers to redefine \"reasonable\" at a whim. Meanwhile, that one guy who's been blissfully ignoring his boss since 2003 remains our unbothered hero. Laws might dictate behavior, but commentators confirm that fear of subtle retaliation still governs the day. \ud83c\udf89\ud83d\udcbc\ud83d\udeab"
  },
  {
    "title": "Pi Pico 2 Extreme Teardown (electronupdate.blogspot.com)",
    "points": 44,
    "submitter": "coder543",
    "submit_time": "2024-08-25T21:01:04",
    "num_comments": 17,
    "comments_url": "https://news.ycombinator.com/item?id=41351380",
    "comments": [
      "> interesting: the power supply on a USB interface is fixed at 5V... why not just a 'buck' supply?> [...]> The power supply is a buck-boost  from Richtek.  Interesting choice as it allows the assembly to be powered from a voltage as low as 1.8V (battery use, perhaps??)That'd be consistent with how I've used the original Pi Pico in projects, yep.  The Pico (and Pico 2) has VBUS and VSYS pins - VBUS being the USB port's 5V, and VSYS being intended for non-USB power sources, including batteries.  The Pico 2 datasheet (https://datasheets.raspberrypi.com/pico/pico-2-datasheet.pdf) has some sample schematics for three use cases:1. A simple case where you connect the external power source to VSYS through a Shottky diode - in which case the Pico will pull from whichever of USB or VSYS has the higher voltage2. Based on #1, except with a MOSFET instead of a Shottky diode, and with the gate connected to VBUS - in which case the Pico will not pull from VSYS when receiving USB power3. Based on #2, except there's a battery charger between the external power source and the MOSFET, and VBUS is also connected to the charger's input - in which case the Pico will charge the battery when receiving USB power, in addition to the behavior of #2(The datasheet also mentions an additional use case: if you're using the Pico as a USB host, you'd want to supply 5V to VBUS in order to power both the Pico and the attached device)\n \nreply",
      "Are there any methods to automatically reverse-engineer transistors and their connections from these kinds of photographs?\n \nreply",
      "Ken Shirriff regularly pops up on here with a ton of microcontroller reverse engineering [1], and IIRC he does everything by hand.[1] https://hn.algolia.com/?dateRange=all&page=0&prefix=false&qu...\n \nreply",
      "Any idea if there is a way to take pcb pictures and automatically convert them into a schematic? Obviously you would have to fill in the equipment in.\n \nreply",
      "there are services that sand down PCBs layer by layer to allow electrically exact copiesnot viable for ICs, though\n \nreply",
      "So the \"power distribution network\" bit is a big pile of standard components? Is this what you get if you show up with a big pile of verilog and say \"print this\"? Why do the other bits looks different?\n \nreply",
      "Because that portion is digital. Digital is fairly immune to noise, but it can produce a lot of noise. The power distribution network can carry that noise to other components that it passes over, but because that second is all digital, it's ok, it's reasonably tolerant if it.The other portions that are uncovered have more sensitive analog circuits. You need to be more careful of how you route power, to avoid noise, so you don't cover it all in a big network on the top metal layer, but instead it's routed more selectively.\n \nreply",
      "PDN includes the PCB itself.You need to think about the return currents closely matching. In many cases on 4 layer boards, you are required to have two Vias per... Via. (One for the forward current and a second for the reverse current).The PCB also serves as the fastest capacitor. The PCB layers itself form a capacitor measured in hundreds of Picofarads in most cases but more importantly, almost no parasitic inductance or resistance.In many cases, boards are simulated at the Maxwell equation level to understand crosstalk issues. It seems like RP2350 is just fast enough where these effects could be noticed (at the highest clock rate)\n \nreply",
      "electronupdate also published a more detailed video for the teardown: https://www.youtube.com/watch?v=vb8AB8bsQSk\n \nreply",
      "The Pi5 southbridge was codenamed RP1, the RP2040 was RP2, and the RP2350 is apparently RP4. What might RP3 be I wonder? The boring prediction is that it's just a new southbridge for the Pi6, but one can hope they eventually split with Broadcom and do their own in-house Linux SoC which they would be able to document properly.\n \nreply"
    ],
    "link": "http://electronupdate.blogspot.com/2024/08/pi-pico-2-extreme-teardown.html",
    "first_paragraph": "",
    "summary": "In the latest riveting edition of silicon strip-downs, \"Pi Pico 2 Extreme Teardown,\" the blogging elite deliver a mind-numbing revelation: the power-supply design isn't medieval! \ud83c\udf89 Commenters, in a display of breathtaking insight, chew over voltages like squirrels with a new kind of nut. Meanwhile, queries about transforming PCB photography into schematics jostle for space among techno-babble about noise tolerance and capacitor speeds. Brace yourself\u2014semiconductor gossip is *absolutely* the thrill you need in your life."
  },
  {
    "title": "Olivetti Programma 101: At the Origins of the Personal Computer (inexhibit.com)",
    "points": 28,
    "submitter": "rbanffy",
    "submit_time": "2024-08-25T20:20:56",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.inexhibit.com/case-studies/olivetti-programma-101-at-the-origins-of-the-personal-computer/",
    "first_paragraph": "By RICCARDO BIANCHINIAn Olivetti Programma 101, photo courtesy of Museo Nazionale della Scienza e della Tecnologia \u201cLeonardo da Vinci\u201d, Milan (CC BY-SA 4.0).At the origins of the Personal Computer: the\u00a0Olivetti Programma 101 (1965)These days, Italy is not particularly renowned for its consumer electronics products; yet, there was a time, in the \u201960s, when an Italian company was reputed to be the \u201cEuropean response\u201d to American computer manufacturers; that company was Olivetti.The company was founded in Ivrea, Northern Italy, in the early 20th century as a typewriter maker; but, in the late \u201950s, under the direction of Adriano Olivetti and his son Roberto, it became one of the first European companies to regularly produce electronic calculators and computers, often characterized by innovative design and engineering solutions.The\u00a0first human-centered\u00a0computer\nIt was in the early Sixties that Olivetti decided to develop a \u201cdesktop\u201d computer; namely, a computer much smaller than those used",
    "summary": "In a thrilling expos\u00e9 that *nobody asked for*, InExhibit reveals how the Olivetti Programma 101 was once everything in computers before Silicon Valley became *cool*. Brace yourselves for nostalgia-blasted tech hipsters reminiscing about how \"the first human-centered computer\" could barely handle basic arithmetic without a meltdown. As the comment section turns into the usual battleground, witness the epic clash between vintage tech enthusiasts defending the sanctity of Olivetti's ancient circuits and modern-day trolls questioning whether it could even run Doom. Oh, the humanity! \ud83d\ude44\ud83e\udd16"
  },
  {
    "title": "Y Combinator backs its first defense startup, Ares Industries (techcrunch.com)",
    "points": 42,
    "submitter": "ks2048",
    "submit_time": "2024-08-25T23:40:01",
    "num_comments": 15,
    "comments_url": "https://news.ycombinator.com/item?id=41352537",
    "comments": [
      "None of these comments here are reassuring. As if people\u2019s concerns about developing weapon technology are economic concerns lol.- Partner countries like Israel (however you feel about that) will eventually use whatever we make. America will not be sole user.- America\u2019s police is not afraid to use technology on its own citizens. Obviously they don\u2019t have access to missile defense, but there are plenty examples of them getting military hardware.I am not actually 100% never-make-weapons, but I have strong doubts anyone profit-motivated is strongly thinking about the second order effects.\n \nreply",
      "The tech industry in general and YC specifically used to be softly, subtly technofascist. The last 18 months it has been shifting more towards overtly so. This is another notch on that ratchet, rather than a totally new thing.\n \nreply",
      "We actually desperately need more startup activity in defense... the more consolidated the industry is the worse it is for taxpayers and citizens.\n \nreply",
      "Totally agree, not to mention the need for democracies to have all the best tools at their disposal to deter (and if necessary defeat) totalitarian nations. I think the war in Ukraine has shown us that the days of dictatorships and invasions are not yet over and that weaponry is still needed to defend democracy.\n \nreply",
      "And don\u2019t forget the occasional uncomfortable democracy that needs to be crushed (think Allende\u2019s Chile)\n \nreply",
      "> weaponry is still needed to defend democracyWhen it isn't doing that, militant criminals should be held accountable; but are they? https://www.thebureauinvestigates.com/projects/drone-war/\n \nreply",
      "There is a fair amount of startup activity in defense around software/tooling. There isn't a ton in hardware for same reason you don't see as many consumer startups doing hardware, it's very expensive and risky business.\n \nreply",
      "The people we drop bombs on are citizens of somewhere too.\n \nreply",
      "So we have nuclear weapons but we can't use them because then our enemies will use theirs and everyone loses.But if cruise missiles (or drones, or anything else that put explosives on a target) become cheap enough to basically allow you to loiter thousands of weapons over any conflict area, overwhelm any defense, and annihilate all the enemy's material it becomes a similar game of mutual destruction.\n \nreply",
      "To the people who complain about the ethics of defence tech: I hear you, but we live in an increasingly hostile world.Si vis pacem, para bellum.If you want peace you must prepare for war.\n \nreply"
    ],
    "link": "https://techcrunch.com/2024/08/25/y-combinator-backs-its-first-defense-startup-ares-industries/",
    "first_paragraph": "CommentThe first defense startup to receive backing from Y Combinator, Ares Industries, launched earlier this week.In a post on the YC website, the startup outlined a vision to build low-cost cruise missiles that will be compatible with existing launch platforms, saying it will \u201cdeliver the capabilities that the [Department of Defense] wants in a form factor that\u2019s 10x smaller and 10x cheaper.\u201dAres Industries\u2019s founders say they\u2019ve tested prototypes in the Mojave Desert and plan to deliver working missile systems to their first customers in mid-2025.YC partner Jared Friedman told the FT that the incubator started encouraging defense tech startups to apply earlier this year.YC\u2019s CEO Garry Tan was an early employee at data analytics company Palantir, which has become hugely successful through its sometimes controversial work for U.S. military, as well as other governments and agencies. CEO Alex Karp defended the company\u2019s \u201cconsistently pro-Western view\u201d in a recent New York Times intervi",
    "summary": "In an inspiring leap towards making global annihilation more accessible and budget-friendly, Y Combinator has thrown its weight behind Ares Industries, a plucky startup promising to create cute, cost-effective cruise missiles that can make war as common as ordering a pizza. The enthusiastic YC alumni in Silicon Valley cheer on, dreaming of a world where blowing up stuff can finally scale like software. Commenters engage in lively debates about moral obligations and defense economics, blissfully unaware that their thought-provoking insights are as impactful as a pebble in a missile silo. Meanwhile, some are just here to make sure it's clear that democracy sometimes needs to bomb its way out of or into existence, depending on the day and who\u2019s counting the votes. \ud83d\ude80\ud83d\udca3\ud83e\udd11"
  },
  {
    "title": "Lidl's Cloud Gambit: Europe's Shift to Sovereign Computing (horovits.medium.com)",
    "points": 253,
    "submitter": "taubek",
    "submit_time": "2024-08-25T16:35:52",
    "num_comments": 230,
    "comments_url": "https://news.ycombinator.com/item?id=41348659",
    "comments": [
      "Gaia-X is a disaster. The article misrepresents it. Gaia-X is not a framework for what a European cloud should look like. This would be useful.In beautiful EU bureaucratic style It's a framework for how to talk about how a European Cloud could look like.It's not about technical standards. It's about how we can talk about how we can think of maybe eventually deciding on how we can come up with standards that might one day lead to talk about implementations.It represents to me everything that is wrong with the EU today. A bureaucratic monster that can't decide how to talk about things or come to any form of alignment.\n \nreply",
      "Can be shown by how everyone who actually produces cloud services of value quit Gaia-X very quicklyScaleway published an entire blog post on why they quit: https://www.scaleway.com/en/blog/full-steam-ahead-towards-a-...\n \nreply",
      "Wow, 5 years later and what have they actually accomplished? Look at the milestones section: https://gaia-x.eu/what-is-gaia-x/about-gaia-x/\n \nreply",
      "They produced a few fluffy documents in 2022 and then nothing happened.They repurposed the word milestone to mean agenda. It's just a list of events they're organizing. Because they have no actual milestones or goals.\n \nreply",
      "I've joined some large EU efforts in the past, and it's always like this. Lots of different parties involved focused on producing tons of absurd documents, and nothing else. Some have good intentions, but it doesn't matter. There's a great thread on X now discussing the same topic:\"25 years ago each major US company had a German and/or French equivalent. Today equivalents of US tech giants are in China and Europe is on its way to become an open-air museum. What happened?\" https://x.com/MichaelAArouet/status/1827588190342979934Some of the top replies:\"Bureaucracy, Regulation, Aversion to Innovation, Green myth of degrowth etc happened\"[...] Europe\u2019s challenges are significant, but not insurmountable. To regain its edge, Europe will need to foster a more dynamic business environment, streamline regulations, and encourage risk-taking in its startup culture. Without these changes, Europe may continue to fall behind, watching as the U.S. and China shape the future of technology.The EU has a lot of talent, but it lacks good leadership and good priorities.\n \nreply",
      "Doesn\u2019t feel like that looking at Airbus and Boeing .\n \nreply",
      "It takes time to shape and convince people and form frameworks to move forward.\n \nreply",
      "When there is actual value in forming frameworks then the key stakeholders don't need to be convinced. They just get to work on writing and building.\n \nreply",
      "\"Right now it's only a goal, but I think I can get the money to make it into an intention, and later turn it into an outcome.\" -- European Woody Allen\n \nreply",
      "As I get older and a little lazier, sometimes I think I might want to find a way to get a completely pointless job that gives me a paycheck where all I have to do is write documents that nobody ever reads.Then I look at something like this Gaia-X \"milestones\" list and think \"Meh, this is probably not the job for me...\"\n \nreply"
    ],
    "link": "https://horovits.medium.com/lidl-is-taking-on-aws-the-age-of-eurocloud-b237258e3311",
    "first_paragraph": "",
    "summary": "In the latest **European bureaucratic circus**, Lidl decides to juggle with sovereignty and cloud computing, while bystanders wonder if they're watching a magic show or a slow-motion disaster. Commentators dive into the abyss of Gaia-X, discovering it's less about cloud framework and more about how many layers of talk can fit into one document. \ud83e\udd21 One brave soul tries drawing comparisons to actual tech progress elsewhere, but is quickly reminded by others that Gaia-X is just a very expensive and intricate way to draft documents that could rival War and Peace in length but not in content. Meanwhile, a hopeful commenter considers a career in bureaucratic document-drafting, only to realize that even Kafka couldn't make up this level of absurdity."
  },
  {
    "title": "Rnote \u2013 Sketch and take handwritten notes (github.com/flxzt)",
    "points": 120,
    "submitter": "Brajeshwar",
    "submit_time": "2024-08-25T15:51:11",
    "num_comments": 16,
    "comments_url": "https://news.ycombinator.com/item?id=41348204",
    "comments": [
      "I used this for taking notes last semester, and I think it's the best free software option right now. The UI is intuitive and, more importantly, the drawing feels good.The absolute best might still be Styluslabs Write, which has very nice editing capabilities and I prefer its \"pencil case\" tool model (you have multiple tools with colour, shape, hardness, etc.). But it's closed source, doesn't run natively under Wayland, and I like Rnote's smoothing more.\n \nreply",
      "I tried a whole bunch of the these apps, and I decided that Xournal++ [1] is better than Rnote for note taking. However, I have used Openboard [2] for teaching online since 2020.I agree that Rnote's smoothing is better, but its tool selection UX is terrible. There are three different bars (top, bottom, and side), and you often need to move your mouse/hand to all of them across the screen in order to select the right tool. In Xournal++ I can put everything on the top bar.Xournal++ has it's own problems. Pasting an image always makes it so big, that resizing to the correct size is difficult. It also doesn't have a laser pointer, which is why I can't use it for teaching. Creating a new document with the correct template is also painful.Honestly, in another life, I would write a decent note-taking app.[1] https://github.com/xournalpp/xournalpp/[2] https://github.com/OpenBoard-org/OpenBoard/\n \nreply",
      "~~Unfortunately doesn't implement expand/contract vertical space (insert or remove vertical space).~~ Ages ago when I used a Toshiba tablet laptop to do math this was a real killer feature in xournal (https://xournal.sourceforge.net/  | https://xournalpp.github.io/)Demonstration: https://youtu.be/uxFRWpY5o8k?t=299\n \nreply",
      "Yes it does. Click the wrench at the bottom of the window (\"Tools\"), and the first option is \"Insert Vertical Space\".\n \nreply",
      "Ah, thanks. That was about the only place I didn't look apparently\n \nreply",
      "This looks cool. I'd love an iOS variant too.I used to do a LOT of handwritten notetaking on top of existing PDFs so if you're shopping around for apps I'd call outhttps://pdfexpert.com/ which to date has the best handwriting recognition I've seen. Plus I they're Ukrainian so bonus points for helping support that economyhttps://www.drawboard.com/ which is what I used for Windows\n \nreply",
      "An earlier post from about 5 months ago\nhttps://news.ycombinator.com/item?id=39671212\n \nreply",
      "I found out about this software way too late, but converting from Xournal to Rnote was not hard luckily. Since then this is among the first apps I install on my 2in1 and I urge anyone using Xournal to give this one a try.\nI wonder which one of them has the better performance (battery life), this might be an interesting marketing point\n \nreply",
      "This piece of software is so good and fast even I'm using it for presenting my work at dayjob\n \nreply",
      "Having onenote erase a days worth of work because it couldn't sync my tablet (and there was no way of exporting it as pdf or anything else) this looks really interesting. Hope there is an android version eventually.\n \nreply"
    ],
    "link": "https://github.com/flxzt/rnote",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Sketch and take handwritten notes.\n      Sketch and take handwritten notes.Rnote is an open-source vector-based drawing app for sketching, handwritten notes and to annotate documents and pictures.\nIt is targeted at students, teachers and those who own a drawing tablet and provides features like Pdf and picture import and export,\nan infinite canvas and an adaptive UI for big and small screens.Written in Rust and GTK4.FeaturesDisclaimerThe file format is still unstable. It might change and break compatibility between versions.Rnote has a project website: rnote.flxzt.netDownload the official flatpak on Flathub here.Thanks to @dehesselle the app is available on MacOS as an app bundle.\nCheck out the repository, the latest release can be downloaded here.Download the Windows installer from the latest release which can be found here.Install",
    "summary": "The programming necromancers at GitHub strike again, evidently deciding that what the world truly <em>needs</em> right now is yet another note-taking app. Enter Rnote, leveraging the be-all-end-all Rust and GTK4 combo to revolutionize the way three people sketch stick figures in their spare time. The excited chatter in the comments where someone heralds it as the second coming for drawing on PDFs is only outdone by the inevitable comparisons to older, equally obscure software that also failed to break into mainstream use. Meanwhile, other commenters bumble around trying to figure out how to use basic features\u2014surely signs of a superior user interface. \ud83e\udd26\u200d\u2642\ufe0f\ud83c\udfa8"
  },
  {
    "title": "Police Chief Says Cops Have a 5th Amendment Right to Leave Body Cameras Off (reason.com)",
    "points": 77,
    "submitter": "heavyset_go",
    "submit_time": "2024-08-25T22:18:02",
    "num_comments": 43,
    "comments_url": "https://news.ycombinator.com/item?id=41351993",
    "comments": [
      "In general, courts have held that Fifth Amendment protections against self-incrimination pertain to testimonial evidence, not broadly to any possible evidence that might be incriminating.The Fifth Amendment does not extend to physical evidence or other non-testimonial evidence, even if such evidence is potentially incriminating. For example, courts have held that things like blood samples, fingerprints, handwriting samples, and even video or audio recordings do not fall under the protection of the Fifth Amendment because they are not considered testimonial in nature.The report notes that it is the police chief, not a lawyer representing him, who is making the preposterous argument that the Fifth Amendment justifies his conduct.  Any lawyer who tried to make that argument would be made a laughing stock.Indeed, I would think that this internal affairs report, where the chief is essentially admitting that he knew he'd done something wrong and was trying to prevent incriminating evidence from being recorded, would be pretty damning in front of a jury, because it establishes that he was well aware of the recklessness of his conduct.\n \nreply",
      "The fact that the 5th protects from self-incriminating, WTF is a police chief saying officers are doing that would be incriminating? Like what an absolute asshat of a position to take.\n \nreply",
      "Right?! Any police officer that pleads the 5th for turning off a body cam should be fired on the spot for, I hope it's policy, violating policy.\n \nreply",
      "The question I always ask is, why is there even an off button? It defeats the entire point of the camera as it\u2019s meant to keep cops honest and not abusing the inherent power of their position.\n \nreply",
      "An annoying reminder to people: Reason is making this a national news story, but it's more meaningfully a local news story. For residents in much of the country, if you simply engage in local politics --- in most places, very few people seriously do this! --- you can get policing officials fired for saying ridiculous stuff like this. Residents probably have more say in how policing functions than they do in almost any other public policy matter (maybe, depending on your state, excepting public schooling).Our PD wanted to roll out Flock cameras villagewide, and citizen involvement commissions ratcheted down the deployment to a handful of cameras, which are not authorized for use for stopping even stolen vehicles, just violent crime suspects and stolen license plates. The PD wanted it to be otherwise, but it does not take a lot of public pressure to rein them in: the ABQ city council is the boss, not the police chief.I'm not saying Reason is wrong; they're clearly right, and this person is a moron. But I'm strongly urging people to engage locally on stuff like this, rather than bloodying their foreheads on national politics. Or, worse, convincing themselves that there's nothing at all to be done about it; that's what people like this ABQ Chief are counting on.\n \nreply",
      "Every place is different and has different pressure points.  The police in other places that have stronger political positions will have more leeway.\n \nreply",
      "If cops wanted to win the trust of the public and work alongside their fellow citizens to keep their communities safe, they would welcome to use of body cams and hold themselves accountable to a high standard of integrity.Stuff like this certainly makes it seem like cops are more interested protecting their own power and their cushy pension packages and their corrupt fringe benefits.\n \nreply",
      ">If cops wanted to win the trust of the public and work alongside their fellow citizens to keep their communities safeThere's no reason to think this is what they want.\n \nreply",
      "Two things:1. I agree.\n2. Once quit a job when they tried to install ai powered driver facing dash cams in company vehicle and I wasn't comfortable with both the micromanaging that would invite, nor becoming training data.Police should be held to a higher standard than the rest of us working stiffs. If they actually did though (and/or didn't have the authority to use violence up to killing people) none of this would even matter. Everyone would be against body cams. Imagine your server in a restaurant wearing a body cam. (I keep giving bad people good ideas.)In the world we live in I am for police body cams, I think. Best worst option.\n \nreply",
      "> If they actually did though (and/or didn't have the authority to use violence up to killing people) none of this would even matter.That's the thing though, if the cop's use of violence up to killing a suspect was justified, then the body cam would not matter. So if you want that authority, then you have to expect proper oversight. The longer that oversight is avoided, the more intense that effort gets. If you don't like, do shield those that are causing the problems.In summary, at this point with their history, fuck'em if they don't like the oversight.\n \nreply"
    ],
    "link": "https://reason.com/2024/08/23/albuquerques-police-chief-thinks-cops-have-a-5th-amendment-right-to-leave-their-body-cameras-off/",
    "first_paragraph": "\nPolice\n\n\nJacob Sullum\n\n|\n8.23.2024 2:10 PM\nAlbuquerque, New Mexico, Police Chief Harold Medina operated his department-issued pickup truck \"in an unsafe manner\" on February 17, when he ran a red light and broadsided a car, severely injuring the driver. So concludes a recent report from internal investigators who looked into that shocking incident.Duh, you might say if you have seen surveillance camera footage of the crash, which shows Medina crossing Central Avenue, a busy, four-lane street, against the light. He crosses the westbound lanes through a gap between two cars, forcing one of the drivers to brake abruptly, before barreling across the eastbound lanes, where he rams into the side of a gold 1966 Mustang driven by 55-year-old Todd Perchert.Although Medina's recklessness seems obvious, the Albuquerque Police Department's Fleet Crash Review Board (CRB) earlier this year concluded that the crash was \"non-preventable.\" How so? Medina, who was on his way to a Saturday press conferen",
    "summary": "<h1>Police Chief Embodies \"Above the Law\" Stereotype, Amazes Public with Audacity</h1>\n<p>In a dazzling exhibition of audacity, Albuquerque\u2019s finest Police Chief Harold Medina champions the use of the Fifth Amendment as a cloak for disabling body cameras, sending shockwaves of *eye-rolls* across the nation. Commentators on Reason, a bastion of armchair legal expertise, are <em>aghast</em> that a police officer could twist constitutional rights with the finesse of a circus contortionist. As the virtual ink flows, outraged citizens churn out comments that shine for their unique blend of <em>scathing sarcasm</em> and a charming faith in local politics as the panacea for police overreach. Can we hit pause on constitutional rights or should body cams just keep rolling to capture these golden moments of bureaucratic gymnastics? \ud83d\udcf9\ud83d\ude02</p>"
  },
  {
    "title": "Is Telegram really an encrypted messaging app? (cryptographyengineering.com)",
    "points": 348,
    "submitter": "md224",
    "submit_time": "2024-08-25T19:34:53",
    "num_comments": 345,
    "comments_url": "https://news.ycombinator.com/item?id=41350530",
    "comments": [
      "Try the mud puddle test: log into your account on a new device using the password recovery flow.   Can you see your old messages?If the answer is yes then law enforcement can too.https://www.forbes.com/sites/anthonykosner/2012/08/05/how-se...\n \nreply",
      "Note that the mud puddle test was originally described on Matt's very blog: https://blog.cryptographyengineering.com/2012/04/05/icloud-w... :)\n \nreply",
      "And it only works because a corporation likely would want to offer this to its users as a convenient feature. If they were actively trying to hide this, they can rig the test and keep access to themselves.\n \nreply",
      "> If the answer is yes then law enforcement can too.Is it technically possible for them to see it: yesDoes Telegram let them see it: I don't think so. That seems to be the core issue around Durov being arrested.They probably should implement E2EE for everything. Then they will have a good excuse not to cooperate, because they simply don't have the data.\n \nreply",
      "Telegram is the only messaging app that I know of which brought attention to the fact that your messages go through Google/Apple notification APIs, which seems like it would utterly defeat any privacy advantage offered by E2EE\n \nreply",
      "Why? I think Google suggests that you send the payload encrypted through the notification. Google then only knows which app to send the message to, they don't know from whom the message originates (only \"a Telegram server\") nor what the content is.Also, you could just send a notification instructing the app to fetch a new message from your server.From the docs:Encryption for data messagesThe Android Transport Layer (see FCM architecture) uses point-to-point encryption. Depending on your needs, you may decide to add end-to-end encryption to data messages. FCM does not provide an end-to-end solution. However, there are external solutions available such as Capillary or DTLS.https://firebase.google.com/docs/cloud-messaging/concept-opt...\n \nreply",
      "Assuming an adversarial relationship, what sort of metadata could Google capture simply knowing which app was sending the notifications and who was receiving them?\n \nreply",
      "Schneier mentioned this late in 2023:https://www.schneier.com/blog/archives/2023/12/spying-throug...> Wyden\u2019s letter cited a \u201ctip\u201d as the source of the information about the surveillance. His staff did not elaborate on the tip, but a source familiar with the matter confirmed that both foreign and U.S. government agencies have been asking Apple and Google for metadata related to push notifications to, for example, help tie anonymous users of messaging apps to specific Apple or Google accounts.",
      "Aren\u2019t notifications enqueued on the server side, implying sender info is inscrutable? I\u2019m curious what mechanism you\u2019d propose to gather any valuable metadata given a sufficient volume of encrypted notifications.\n \nreply",
      "If the text appears on your screen I'm pretty sure there are ways for Google to capture it. I don't need to know how android's API works, knowing it probably just makes one blind to the big picture. You have to trust your OS/phone maker not to do a MITM.\n \nreply"
    ],
    "link": "https://blog.cryptographyengineering.com/2024/08/25/telegram-is-not-really-an-encrypted-messaging-app/",
    "first_paragraph": "\nMy academic website\nMastodon\nTwitter\nTop Posts\nUseful crypto resources\n\nBitcoin tipjar\nCryptopals challenges\nApplied Cryptography Research: A Board\nJournal of Cryptographic Engineering\n(not related to this blog)\nJournal of Cryptographic Engineering\n(not related to this blog)This blog is reserved for more serious things, and ordinarily I wouldn\u2019t spend time on questions like the above. But much as I\u2019d like to spend my time writing about exciting topics, sometimes the world requires a bit of what Brad Delong calls \u201cIntellectual Garbage Pickup,\u201d namely: correcting wrong, or mostly-wrong ideas that spread unchecked across the Internet. This post is inspired by the recent and concerning news that Telegram\u2019s CEO Pavel Durov has been arrested by French authorities for its failure to sufficiently moderate content. While I don\u2019t know the details, the use of criminal charges to coerce social media companies is a pretty worrying escalation, and I hope there\u2019s more to the story.But this arrest is",
    "summary": "**Title: Is Telegram really an encrypted messaging app? (cryptographyengineering.com)**\n\nAt cryptographyengineering.com, a hotspot for the academic elite to desperately clarify the basics, the author, compelled by some primal masochistic urge, opts for some \"Intellectual Garbage Pickup.\" \ud83d\uddd1\ufe0f They dive into clarifying if Telegram is actually an encrypted fortress as it claims, inspired by the juicy tale of CEO Pavel Durov\u2019s run-in with French cops for not policing his digital playground. Meanwhile, the comment section turns into a hilariously naive tech-support forum where engineering hopefuls ponder if Google can see their kitten GIFs through Telegram messages. According to these cyber-sleuths, if it loads on your screen, Google already knows about it \u2014 Privacy is apparently just a setting we all forgot to turn off."
  },
  {
    "title": "Rollstack (YC W23) Is Hiring TypeScript Engineers \u2013 US/Canada (East Coast Only) (ycombinator.com)",
    "points": 0,
    "submitter": "",
    "submit_time": "2024-08-25T21:34:44",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.ycombinator.com/companies/rollstack-2/jobs/QPqpb1n-middle-senior-software-engineer-typescript-us-canada-east-coast-only",
    "first_paragraph": "Automatically create and update data-driven slide decks and documentsAt Rollstack, we're revolutionizing how businesses share and communicate their data. Data-driven slide decks and documents are pivotal in sharing data and insights within organizations and outside. Our platform integrates leading BI tools with popular presentation and document platforms, automating and streamlining the reporting process for efficiency and impact. We're a dynamic, talented, and innovative team committed to making a real difference in how companies present and utilize their data.Rollstack counts as clients some of the best companies worldwide and is backed by Y Combinator, the most successful startup incubator in the world that produced the likes of Airbnb, Twitch, Instacart, Dropbox, Reddit, Doordash, Stripe, Coinbase, etc.At Rollstack, we\u2019re looking for engineers who enjoy iterating, shipping quickly, and solving customers' problems. We want individuals exhibiting a strong sense of ownership and have ",
    "summary": "\ud83c\udf10 Oh boy, here comes Rollstack (YC W23), boldly promising to <em>revolutionize</em> the <i>scintillating</i> world of data-driven slide decks \ud83d\udcca. Because what humanity truly <em>lacks</em> right now isn't peace or equity, but slicker PowerPoint presentations to jazz up those endless virtual meetings. In their quest to save corporate folks from 'data presentation hell', they seek the top 0.01% of TypeScript engineers, strictly from the US/Canada East Coast\u2014because talent beyond time zones might disrupt the slides' cosmic balance. Comments are bustling with bewildered souls trying to ascertain if they're worthy of enhancing bulleted lists, while half wonder if \"Rollstack\" is yet another AI ghostwriter penning their existential dread into pie charts. \ud83d\udcc9\ud83d\ude31"
  },
  {
    "title": "Getting up close and personal with Concorde, Concordski, and Buran (theregister.com)",
    "points": 20,
    "submitter": "LorenDB",
    "submit_time": "2024-08-24T13:23:11",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.theregister.com/2024/08/13/geeks_guide_speyer_and_sinsheim/",
    "first_paragraph": "",
    "summary": "Today on The Register, another groundbreaking investigation into ancient aircraft has armchair aerospace engineers hurling Cheetos in excitement. Get ready for a torrid love affair with the long-grounded Concorde, its Russian copycat Concordski, and the Soviet space shuttle Buran, because nothing says \"cutting-edge tech news\" like machinery that's been collecting dust for decades. Comment sections are ablaze with middle-aged men one-upping each other's nonexistent pilot experiences, fervently arguing over which relic could do a barrel roll in space. If nostalgia were fuel, these commenters could single-handedly power all three crafts back to their heydays."
  },
  {
    "title": "Pavel Durov and the Blackberry Ratchet (oblomovka.com)",
    "points": 13,
    "submitter": "dannyobrien",
    "submit_time": "2024-08-25T22:23:54",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=41352027",
    "comments": [
      "Most people really, really do not understand the large amount of military traffic on Telegram, and the consequence of that during wartime...  and how valuable that is to multiple nation-states around the world.Strategic comms, soldier command and control, battlefield drone command and control, intel asset management.Armchair analysts need to put on their big-boy military pants.\n \nreply",
      "Are people actually running drones via Telegram channels?Not that I\u2019d be surprised. Very postmodern! But it just seems like HTTP(S) with extra steps.\n \nreply",
      "russians do https://youchu.be/watch?v=mwtbTuLZXWw\n \nreply"
    ],
    "link": "https://www.oblomovka.com/wp/2024/08/25/pavel-durov-and-the-blackberry-ratchet/",
    "first_paragraph": "need to knowhaddockboingboingLizNick SumanahDanSlate Star Codexe-mailhomepagepgp etc\nthe\r\n      book\n\nWhy do governments go after companies and executives of services of more weakly encrypted tools?It\u2019s very hard, this early, to pierce through what\u2019s going on with of the French authorities\u2019 arrest of Paul Durov, the CEO of Telegram \u2014 but that doesn\u2019t stop people from having pet theories. Was it retaliation from the US and the FBI for not backdooring Telegram? Was it a favor to Durov so he could hide from Putin? Was it just the grinding wheels of French justice?I\u2019m sure we\u2019ll understand more details of Durov\u2019s case in the next few days, but motivations \u2014 especially those anthropomorphically projected onto entire states \u2014 are never really resolved satisfactorily.  If you think LLMs lack explainability, try guessing the weights of a million human-shaped neurons in the multi-Leviathan model that is international politics. It\u2019s not that we\u2019ll never have explanations: it\u2019s just that we\u2019ll ne",
    "summary": "\ud83d\udcdc **The Saga of Paul Durov and His Unbreakable Telegram Charm**\n\nIn an article seemingly stitched together with leftover Ph.D. thesis terms and the obfuscated jargon that even Cambridge rejects, <em>oblomovka.com</em> delves into why French authorities have pinched Pavel Durov. The theories? Oh, they sprint from FBI vendettas to covert ops for cuddles from Putin, with a casual sidebar into the philosophical indulgences about state anthropomorphism. Meanwhile, the comment section turns into a makeshift war room with armchair generals debating whether Telegram has replaced the Pentagon as the new HQ for drone operations. Because of course, managing an international crisis via emojis and stickers is <i>very postmodern</i> and not at all worrying."
  },
  {
    "title": "Linux Pipes Are Slow (qsantos.fr)",
    "points": 50,
    "submitter": "qsantos",
    "submit_time": "2024-08-25T16:52:14",
    "num_comments": 21,
    "comments_url": "https://news.ycombinator.com/item?id=41348844",
    "comments": [
      "One of my sideprojects is intended to address this: https://lwn.net/Articles/976836/The idea is a syscall for getting a ringbuffer for any supported file descriptor, including pipes - and for pipes, if both ends support using the ringbuffer they'll map the same ringbuffer: zero copy IO, potentially without calling into the kernel at all.Would love to find collaborators for this one :)\n \nreply",
      "Buffering is there for a reason and this approach will lead to weird failure modes and fragility in scripts. The core issue is that any stream producer might go slower than any given consumer. Even a momentary hiccup will totally mess up the pipe unless there is adequate buffering, and the amount needed is system-dependent.\n \nreply",
      "I think the OP's proposal has buffering.It is different from a pipe - instead of using read/write to copy data from/to a kernel buffer, it gives user space a mapped buffer object and they need to take care to use it properly (using atomic operations on the head/tail and such).If you own the code for the reader and writer, it's like using shared memory for a buffer. The proposal is about standardizing an interface.\n \nreply",
      "Maybe I misunderstand, but if the ring buffer is full isn't it ok for the sender to just block?\n \nreply",
      "What makes this any different than other buffer implementations that have a max size? Buffer fills, writes block. What failure mode are you worried about that can't occur with pipes which are also\nbounded?\n \nreply",
      "Calling Linux pipes \"slow\" is like calling a Toyota Corolla \"slow\". It's fast enough for all but the most extreme use cases. Are you racing cars? In a sport where speed is more important than technique? Then get a faster car. Otherwise stick to the Corolla.\n \nreply",
      "This is a side note to the main point being made, but on modern CPUs, \"rep movsb\" is just as fast as the fastest vectorized version, because the CPU knows to accelerate it. The name of the kernel function \"copy_user_enhanced_fast_string\" hints at this: the CPU features are ERMS (\"Enhanced Repeat Move String\", which makes \"rep movsb\" faster for anything above a certain length threshold) and FSRM (\"Fast Short Repeat Move String\", which makes \"rep movsb\" faster for shorter moves too).\n \nreply",
      "This is not the full truth, \"rep movsb\" is fast until another threshold, after which either normal or non-temporal store is faster.All thresholds are described in https://codebrowser.dev/glibc/glibc/sysdeps/x86_64/multiarch...And they are not final, i. e. Noah Goldstein still updates them every year.\n \nreply",
      "I'm still waiting for rep movsb and rep stosb to be fast enough to delete my simple C loop versions, for short memcpys.\n \nreply",
      "Also worth noting that Linux has changed the way it uses ERMS and FSRM in x86 copy multiple times since kernel 6.1 used in the article. As a data-dote, my machine that has FSRM and ERMS \u2014 surprisingly, the latter is not implied by the former \u2014 hits 17GB/s using plain old pipes and a 32KiB buffer on Linux 6.8\n \nreply"
    ],
    "link": "https://qsantos.fr/2024/08/25/linux-pipes-are-slow/",
    "first_paragraph": "Some programs use a particular system call \u201cvmsplice\u201d to move data faster through a pipe. Francesco already did a deep dive on using vmsplice to make things fast. However, while experimenting with it, I noticed that, when not using vmsplice, Linux pipes are slower than what I would have expected. Since you cannot always use it, I wanted to understand exactly why that was, and whether it could be improved.The reason I want to move data through pipes is that I am writing a program encode/decode Morse code blazingly fast.To get a point of reference, the obvious candidate is the Fizz Buzz throughput competition at the Code Golf StackExchange. There are two kinds of solutions:The difference between the first and the second group is that the second is using vmsplice, while the first is not1. But how can using vmsplice enable such a large gain in performance? My intuition about vmsplice is that it allows you to avoid copying data to and from kernel space. Surely, copying data cannot be slower",
    "summary": "**\"Linux Pipes Are Slow\" - A Tragic Tale of Turtle-Speed Tech**\n\nIn today's episode of _why faster isn't always better_, an enthusiastic tech blogger discovers the shocking truth that Linux pipes move data with all the urgency of a snail on sedatives, unless you conjure the magic of \"vmsplice\". Our hero embarks on a quixotic quest to encode Morse code at blinding speeds, invoking the Fizz Buzz challenge as the pinnacle of modern computational benchmarks \ud83d\udc22\ud83d\udca8. Commenters, in a spirited display of missing the point, either propose solutions akin to putting a Formula 1 engine in a Corolla or engage in thrilling debates about the nuances of system call optimizations that would befuddle even the most caffeinated kernel developer. Will our brave blogger ever achieve Morse code nirvana, or are we doomed to endure endless discussions about buffer sizes and kernel patches? Stay tuned, or don\u2019t\u2014it\u2019s buffers all the way down. \ud83d\udd04\ud83d\udd01"
  },
  {
    "title": "Programming terrain from scratch using C++ and OpenGL by Shamus Young (2006) (shamusyoung.com)",
    "points": 65,
    "submitter": "pathless",
    "submit_time": "2024-08-25T15:32:00",
    "num_comments": 13,
    "comments_url": "https://news.ycombinator.com/item?id=41348000",
    "comments": [
      "I just finished watching a live-coding session (from 2 years ago) by Inigo Quilez (ex Pixar), where he constructs an entire ray-marched landscape using only maths (mostly SDFs) in pure GPU shader code.The stream: https://www.youtube.com/watch?v=BFld4EBO2REThe demo: https://www.shadertoy.com/view/4ttSWf\n \nreply",
      "This reminds me of NeHe\u2019s OpenGL tuts. That, and a little earlier Denthor\u2019s mode13h tut, changed my life. Good times.\n \nreply",
      "I remember being blown away by something similar on the venerable Commodore Amiga in the early 90s. Can't remember the name of the app, but you'd adjust a few parameters and line by line a terrain may would appear.\n \nreply",
      "Perhaps it was https://en.m.wikipedia.org/wiki/VistaPro ?\n \nreply",
      "I really miss reading new blog posts and series from Shamus :(\n \nreply",
      "I also enjoyed his similar series on generating a procedural city: https://www.shamusyoung.com/twentysidedtale/?p=2940\n \nreply",
      "That was an amazing read as well. I really wish the internet had more game-programming-for-beginners or whatever you might call them style microblogs.Shamus will be missed! RIP.\n \nreply",
      "I ported his code to a macOS screen saver back in the day, but I see I haven't updated it since macOS 10.6\u2026 I guess the chance of it working on a Apple Silicon Mac isn't anywhere near 100% :Phttps://emage-software.com/\n \nreply",
      "Oh wow, that came out when I was in university. I often think about that series of articles and the little tricks and techniques he used to simulate the feeling of a city at night - almost entirely via artifice and very little intentional design. I always found these dirty little tricks in graphics super interesting.\n \nreply",
      "Man that\u2019s a blast from the past\n \nreply"
    ],
    "link": "https://www.shamusyoung.com/twentysidedtale/?p=141",
    "first_paragraph": "",
    "summary": "**In the hallowed annals of C++ necromancy, Shamus Young's 2006 trek through programming terrain using OpenGL reemerges, much to the nostalgic delight of middle-aged software developers clinging to the era of graphics when lens flares were still cool and pixelation was just \"retro.\"** Caped in the glory of vintage tech like VistaPro on a Commodore Amiga, our intrepid internet commenters trip down memory lane, misty-eyed over past glories of coding minutiae now largely irrelevant in a sea of user-friendly, high-level programming abstractions. Yet, amidst this archaeological dig into ancient computer lore, we find not just old code but <em>vintage delusions</em>\u2014like porting forgotten screen savers to modern macOS and dreaming that hand-crafted SDFs in GPU shaders merit more than a 2-minute courtesy view in 2023. Shamus would be proud, or at least amused, that his musings on procedural cities and nighttime simulations still stir something in the hearts of commenters who think <i>\u201cHey, that was cool in my university days!\u201d</i> should probably qualify as an existential crisis trigger warning. \ud83d\ude02"
  },
  {
    "title": "An AWS IAM Security Tooling Reference (ramimac.me)",
    "points": 30,
    "submitter": "mariuz",
    "submit_time": "2024-08-25T18:58:19",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://ramimac.me/aws-iam-tools-2024",
    "first_paragraph": "\ud83d\udd70\ufe0f Four years ago, I published An AWS IAM Security Tooling Reference. It\u2019s time to revisit it and take a look at the current landscape.1Identity and Access Management (IAM) is a cornerstone of security. However, AWS IAM is not only crucially important, but also immensely complex.This complexity and the resultant challenges it can pose for security have not gone unnoticed. In addition to efforts at education, AWS has developed Zelkova, an automated reasoning tool for AWS permissions. AWS IAM Access Analyzer uses Zelkova to \u201cidentify the resources in your organization and accounts, such as Amazon S3 buckets or IAM roles, that are shared with an external entity.\u201d AWS IAM Access Advisor offers \u201clast used\u201d information on permissions, to help cull unnecessary access.Outside of Amazon, numerous individuals and organizations have also released tools to help you reason about the usage of IAM in your AWS environment.developed at nccgroup, with a more recently maintained fork availablePrincipal M",
    "summary": "Title: *AWS IAM Mazes For Toddlers (Now With More Tools!)*\n\nIn the riveting sequel to the 0-times bestseller, our intrepid hero revisits the labyrinthine world of AWS IAM, where even the most seasoned pro feels like a lost toddler. \ud83c\udf7c The blogger dusts off their four-year-old post and discovers, shockingly, that AWS IAM remains as convoluted as interstellar quantum physics. The audience, droves of beleaguered IT pros, descends into the comments with their torches and pitchforks, jabbing wildly at AWS's Byzantine security model while quietly updating their resumes. Meanwhile, tools with names like Zelkova and Access Analyzer try valiantly (and vainly) to cut through the thicket, providing fleeting glimpses of hope before users get ensnared again by the next mysterious permission error. \ud83c\udf3f\ud83d\udd26"
  },
  {
    "title": "Emulating the Early Macintosh Floppy Drive (thomasw.dev)",
    "points": 50,
    "submitter": "GloriousCow",
    "submit_time": "2024-08-25T16:04:21",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=41348338",
    "comments": [
      "> The disadvantage of this technique was that there was no interoperability with PC diskettes possible, at all, even with software changes. For the Macintosh, this changed with the introduction of the Macintosh SE in 1987. The Macintosh SE had a new floppy drive controller, the \u2018SWIM\u2019 (Super Woz Integrated Machine) and a new disk drive which could read and write both Macintosh CLV and PC CAV formatted diskettes.Pardon my nitpick, but there were two versions of the SE and the author has the dates mixed up here. The original 1987 model had the same disk capabilities as the Mac Plus except it could have two of them installed internally instead of just one on the Plus. Or one 800K drive and an internal SCSI HDD in the other bay \u2014 your choice! (Mine actually has all three thanks to a third party internal HDD bracket!)The FDHD (floppy disk high density) version was released in 1989 as a standalone computer and also as an upgrade kit for the original model containing one (1) SuperDrive, SWIM, updated ROM, and little \u201cFDHD\u201d and \u201c800K\u201d badges to put next to the upgraded and remaining original drives respectively.See https://bylenga.ddns.net/FDHD/MacSEservice.pdf#page=87\n \nreply",
      "SE and SE HD, and if you took the 400 or 800k version of the second floppy from your Mac plus, you could use it as a third floppy. I tried this on an SE and it worked, but never tried it on a SE HD. I thought that some early MacIIs had iwm chips in them, and with A FD HD upgrade you got a SWIM chip and a pair of ROMs to put in.\n \nreply",
      "Yes! You got the icon with the oval windows! Now try this in your emulatiom: if you named a disk '.Sony' you can kiss the data good bye. The drivers name is '.sony' too. Someone named their hard disk '.' and that was the beginning of multiple software problems.\n \nreply",
      "Feels slightly surprising, at least from the comfort of my 21st century armchair, that they went to all that effort for 800 KB per disk. The Atari ST (with an off the shelf 1772 FDC) had no problem with 800 KB - 2 sides, 80 tracks, 10 sectors per track, 512 bytes per sector - and that seemed perfectly reliable.The Amiga did its own thing, same as the Mac, but at least it got some extra storage. 880 KB per disk!(880 KB was also an option on the ST, but only for disks written a track at a time, which was impossible to guarantee if using the OS. With 11 sectors per track, writing individual sectors wasn't reliable as the gaps between them are so small. The OS didn't support irregular disk geometry so you couldn't have more sectors on the outer tracks.)\n \nreply",
      "It's all just an evolution of their existing disk drive technology that started well before the last-minute decision to go with the Sony 3.5\" drive.The variable drive speed comes of the development of the \"Twiggy\" drive, which was an 850 kB 5.25 disk format originally intended for the Apple III in 1980 but never worked reliably.BTW, the Atari ST uses the same floppy disk format as the IBM PC, 360 kB per side.The Amiga uses a variable drive speed like the Mac, but they eke out extra capacity by eliminating sectors.  This allows an extra 512 bytes per track, but the trade off is that the disk controller can only read or write an entire track at a time, rather than individual sectors.An infamous Apple II copy protection scheme used the same trick to expand 5.25 disk capacity from 16 sectors to 18 sectors (512 bytes per track).\n \nreply",
      "You only read the data sheets. The twiggy drives had 4 heads to cut latency and had two access windows one in the back like all 5.25 and one in the front for the extra heads. The Lisa used this too.\n \nreply",
      "360 KB/side was indeed the default for the Atari ST, but there were numerous tools (I think Fastcopy III was the one I usually used) to format with more sectors per track, and 10 sectors/track (so 400 KB/side) was the standard recommendation if you just wanted more data per disk and no hassle. More than 80 tracks was also an option, and 81 or 82 tracks was apparently also reliable. That never sat right with me though, so I didn't do it.(18 sectors per track with 256 byte sectors is also possible with the 1770 series. This was one of the disk format options on the BBC Micro. Definitely not written a track at a time! There just wasn't the memory for that.)\n \nreply",
      "The Amiga is fixed RPM or CAV, not CLV like the og Mac.  With one exception- later models could halve the RPM to read/write HD floppies (1.44MB PC or 1.76MB Amiga).\n \nreply",
      ">Amiga uses a variable drive speedAmiga uses standard PC drives with slight tweaked pinout https://linuxjedi.co.uk/2020/12/05/converting-a-pc-floppy-dr...\n \nreply",
      "Per Wikipedia, early ST's floppies were 360K even though it came out a year after the Macintosh. https://en.wikipedia.org/wiki/Atari_ST#Floppy_driveHardware got better really quickly in the 1980's and 90's, including floppy disks. By the end of the 20th century, there were 120MB floppies. Basically Moore's Law seemed to apply to spinning rust for awhile.\n \nreply"
    ],
    "link": "https://thomasw.dev/post/mac-floppy-emu/",
    "first_paragraph": "",
    "summary": "Title: Emulating the Early Macintosh Floppy Drive: A Comedy of Errors\n\nIn a stunning display of niche obscurity, thomasw.dev decides that what the world really needs is a deep dive into the bone-chilling world of vintage Macintosh floppy drives, because, surely, everyone's 2023 started with \"understand 1980s floppy tech\" at the top of their to-do list. Commenters, in a desperate bid to out-pedant each other, engage in the floppy equivalent of measuring pi to the last digit, dredging up relics like the SWIM chip and \u2018Twiggy\u2019 drives as if they're discussing the fate of the free world. One bright spark tries to rename a disk \u2018.Sony\u2019 to watch the world burn, while another waxes nostalgic about the Atari ST's floppy prowess, under the comforting glow of their CRT shrine. Between misremembered specs and dates, and some truly atrocious attempts at tech support, it's a whirlwind tour back to a time when 800KB felt like infinity."
  },
  {
    "title": "MacOS X Malware Development (0xf00sec.github.io)",
    "points": 64,
    "submitter": "CharlesW",
    "submit_time": "2024-08-25T20:08:20",
    "num_comments": 5,
    "comments_url": "https://news.ycombinator.com/item?id=41350869",
    "comments": [
      "I enjoyed the content, but parts have a certain ChatGPT je ne sais quoi to them that I find very distracting. The bias toward wordy phrases (\u201cto mitigate performance concerns\u201d), the five-paragraph-essay stock transitions (\u201cIn conclusion\u201d), the variable use of \u201cMac OS X\u201d and \u201cmacOS\u201d\u2026 it\u2019s distinctive. The post was clearly at least outlined by a human - was it too hard to write the prose by hand?(Also, some things were just wrong. Like, \u201cthe transmission of system information immediately after connection establishment\u201d is a clear sign of malware? No, every single telemetry / error reporting tool does that.)\n \nreply",
      "As someone with a good understanding of the technologies involved I came away rather confused by the article. There are a few things that are obviously incorrect, and others that don't make much sense. Some of them could be perhaps be explained if the author is doing their work on an outdated version of macOS, but I'd expect that to have been mentioned explicitly in the introduction to the article.Entitlements aren't stored in Info.plist. They're embedded in a binary's code signature.It demonstrates code injection via Mach APIs starting with `task_for_pid` when `task_for_pid` is only usable by root or by a process signed with specific entitlements.VeraCrypt does use the hardened runtime and so the `DYLD_INSERT_LIBRARIES` example cannot work with it.It gives an example of using `emond` for persistence, but that was removed from macOS several releases ago.\n \nreply",
      "Some people have a difficult time writing. Simply examine any developer documentation or code samples ;-)\n \nreply",
      "i wonder if there are uncensored \"unaligned\" open source local LLMs that can discover zero days\n \nreply",
      "I know that XBOW is working on offensive security using LLMs [1]. Backed by Sequoia Capital.[1] https://xbow.com/\n \nreply"
    ],
    "link": "https://0xf00sec.github.io/0x1A",
    "first_paragraph": "In today\u2019s post, We\u2019ll explore the process of designing and developing malware for macOS, which is a Unix-based operating system. We\u2019ll use a classic approach to understanding Apple\u2019s internals. To follow along, you should have a basic understanding of exploitation, as well as knowledge of C and Python programming, and some familiarity with low-level assembly language. While the topics may be advanced, I\u2019ll do my best to present them smoothly.Let\u2019s start by understanding the macOS architecture and its security features. Next, we\u2019ll dive into the internals, covering key elements like the Mach API and the kernel, and we\u2019ll walk through some basic system calls and easy to understand. After that, we\u2019ll introduce a dummy malware sample. Later, we\u2019ll explore code injection techniques and how they\u2019re used in malware, and we\u2019ll also discuss persistence methods. To wrap up, we\u2019ll demonstrate a basic implementation of shellcode injection and persistence. Throughout, we\u2019ll provide a detailed, ste",
    "summary": "**Hacker Wannabes Dive Headfirst into macOS Misery**\n\nIn today's breathtaking expose on how to make your very own macOS malware, a blogger bravely attempts to mix outdated techniques with a soup of programming languages. \ud83c\udf93\ud83d\udcbb Step right up and marvel at how our intrepid guide confuses C veterans and Python newbies alike, all while sprinkling in just enough assembly language to sound *impressive*. The comment section, ever the bastion of tech wizardry, doubles down on the chaos: one reader can't tell if machine-generated text or a human's fever dream filled the paragraphs, while another mourns the misuse of macOS lore. Stick around for the thrilling conclusion where everyone debates if any of this would even run on a real Mac! \ud83c\udf4e\ud83d\udca3"
  }
]