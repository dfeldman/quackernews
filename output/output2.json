[
  {
    "title": "I've built my first successful side project, and I hate it (switowski.com)",
    "points": 961,
    "submitter": "switowski",
    "submit_time": "2024-08-21T09:59:41",
    "num_comments": 280,
    "comments_url": "https://news.ycombinator.com/item?id=41308599",
    "comments": [
      "Can relate, I've been in a similar boat running a small B2B Saas over the last 2 years. It does get easier over time.I've learnt a few tricks for managing early stage pain points.- You need to develop a polite but curt tone of voice for customer support.- Once your core product is built, its worthwhile spending some time automating the heck out of everything. This will save a TON of time in the near future.- Invest in good docs, even if you're not running a api saas. Good docs + consistent ux + rock solid support will solve most of your support issues.I think a lot of literature around running a online biz has been boiled down to rather basic advice and its hard to find anything solid in this area. I've been running a small blog where I document these issues(operational.co) if anyone wants to check it out.\n \nreply",
      ">You need to develop a polite but curt tone of voice for customer support.And very focused responses in terms of action items.You might think of 3 things to say, check, but sadly 90% of the people you respond to with a list will behave like they read just one of them.  Sadly this also leads to dragging things out for everyone who can handle more than one thing at a time :(\n \nreply",
      "Yep. All the time when I worked in IT:Me: Please try these 3 things and let me know how it goes: (list of 3 things with instructions)Them: I tried (thing #1) and it didn\u2019t work.Me: Thank you, please try these 2 things and let me know how it goesThem: I tried (thing #2) and it didn\u2019t work.Me: Thank you, please try this thing and let me know how it goesThem: (no response)Me: Just checking in to see if this is resolved?Them: (no response)Me: I\u2019m closing this ticket as I haven\u2019t heard back, let me know if this is still a problem and I can reopen itThem: Don\u2019t close the ticket, I\u2019m still having this issueMe: No problem, can you try this thing and let me know how it goes?Them: (no response)\n \nreply",
      "Me: This very specific thing is broken in general for your product when I do a and b. Just like users x,y and z report on <random forum>.(Siemens) Support: Before I can help you, please find the serial number via <tedious procedure>, and the exact version of subsystems <x, y and z>.Me: Here you go, though I fail to see how my specific setup is relevant as the problem has been reported on forums for years, and it is easily reproducibleSupport: Please update to latest version x.Me: Version x has known regression which will break the machine for the customer. I did the 1 hour procedure anyway but the issue is still present.Support: Please execute this <obtuse command that runs a trace> and download the log from <airgapped machine> with SCPMe: O well, did that here is the file. Don't understand why you can't run it on your machineSupport: Please try <irrelevant thing>, reboot (wait 5 minutes) and run the trace againMe: (Gives up)\n \nreply",
      "This is me almost every time I interact with ISP support.Except\u2026 recently I completely misdiagnosed something. So while I was getting politely frustrated with the support clerk, he was stepping me through a set of irrelevant seeming procedures which, indeed, resulted in identifying that a piece of hardware was broken.In this case it was the fiber to Ethernet adapter my ISP uses. He needed me to verify that, at every step of the way, pieces of my infrastructure were not the cause of my flaky connection (they weren\u2019t). However, as a final step he had me reboot the adapter and it didn\u2019t start back up. Turns out this is a rare failure mode and the flaky network I\u2019d been seeing was an early, year long, symptom of this issue.\n \nreply",
      "I wonder how flows like that happen.Is Support just completely disconnected from Engineering?  Do they not have a way to report issues and indicate that many customers are having a specific issue?Does the company believe that giving a customer a runaround will make them less upset than saying \"Sorry, this is a known issue.  We're working on it but do not have a timeline\"?Certainly at some point, some support person is going to be like \"Huh, we have a lot of customers complaining about an issue, and our usual flowchart script doesn't seem to resolve it\" and try to work it up the chain, right?  Or does it get to their manager who says \"Meh, that's an engineering problem, not a support problem.  Get back to your tickets!\" and never pass it up?\n \nreply",
      "If you're working with a large company, Support is outsourced to a bunch of people reading scripts in Manila/Bangalore, and the external company employing them is actively incentivized to never resolve the root cause of any issue, because doing so would mean less tickets and less billable hours.\n \nreply",
      "> I wonder how flows like that happen.This is the usual response when a companies customer numbers start to scale up so far that the volume of users like the ones in Vegenoid's parent comment start to overwhelm the support staff. Keeping up the good/decent customer support that you could give to your first few hundred or perhaps even few thousand users eventually becomes ludicrously expensive or even impossible.Then the original article's \"Keeping this running and supported is shit. People are idiots and time wasters! Automate all the things!\" stage kicks in.So \"first level support\" is created, who's main objective is to get rid of support requests with the minimal effort by the least skilled staff possible. So everything is written into a script that call centre employees are required to follow. Low skill minimal wage staff are required to ask stupid things like \"Have you tried reinstalling Windows?\" and getting a confirmation that they have - before any support request is passed on to even a junior or intern developer. At this stage nobody gives a damn about users who need help, and they outsource that work to other users on the \"community forums\" and the entire support team is fired.(Google, of course, being a world leader in both webtech and customer acquisition, completely skipped the \"provide decent customer service\" stage and went directly to the \"don't give a damn about users\" end game.)\n \nreply",
      "Yes. Engineering time is expensive. Support exists to resolve problems without needing engineer time except when the company thinks that the problem is worthy of being addressed.The tendency to wall off engineers is often taken to a counterproductive level.\n \nreply",
      "> Is Support just completely disconnected from Engineering?Support is almost always tiered because $$$. In an ideal situation (hello GitLab!) tier 1 they are friendly and competent triage artists that can redirect lost customers and handle the common basic cases. Tier two is essentially an experienced and skilled tier 1. It's not until you get to tier 3 that you reach an engineer, usually one dedicated to support. That engineer is the one who reaches out to the operational engineering team if needed.\n \nreply"
    ],
    "link": "https://switowski.com/blog/i-have-built-my-first-successful-side-project-and-i-hate-it/",
    "first_paragraph": "",
    "summary": "**The unbearable ennui of success**\n\nAnother brave soul has ventured into the treacherous waters of side hustles, only to discover that building a successful B2B SaaS is as enjoyable as a root canal without anesthesia \ud83e\uddb7. Commenters flock like seagulls at a landfill, eager to share their \"profound\" insights on customer support alchemy and the magic of automation. Watch as they recount tales of incompetence so dire, one might mistake them for scripts of a sitcom. Reminder to self: the real MVPs here are the automated processes that save these lost souls from their self-inflicted customer support nightmares. \ud83d\ude34"
  },
  {
    "title": "Py5, a Python version of Processing for your creative coding projects (py5coding.org)",
    "points": 66,
    "submitter": "hx2a",
    "submit_time": "2024-08-16T15:47:03",
    "num_comments": 21,
    "comments_url": "https://news.ycombinator.com/item?id=41267412",
    "comments": [
      "I don't get it, I thought this was a port of Processing to Python, but then the installation instruction says:> If you have Java 17 installed on your computer, you can install py5 using pip:So it still depends on Java? Is this like a Python wrapper for Processing?UPDATE: Got the explanation. From another page on the website:> Py5 is a creative coding framework for Python 3.9+. Its use and functionality is analogous to the widely used Processing framework. It is a Python version of Processing.> Internally py5 uses Processing\u2019s core libraries, which are written in Java, while providing the end user with a (mostly) seamless Python programming experience.Emphasis is mine. The wording in the first paragraph (which is the same as on the project's home page) seems ambiguous to me. Reading it I would really not expect a Java dependency.\n \nreply",
      "Yep. In case you don\u2019t want to write Java you can do it in Python. But it uses the same engine\n \nreply",
      "I suppose jython would be particularly useful in such cases\n \nreply",
      "People have got Processing working Jython (I played with it myself a very long time ago).Jython itself is making it's way to a python 3.x implementation but it doesn't seem to be quite there for general consumption, though maybe for some creative coding things this isn't a problem, for myself I'd need to wait until it's ready.If you are able, I'd recommend contributing to the Jython 3 work.\n \nreply",
      "It seems like an axiom that no Python package can be written that does not depend on C/C++/Java doing the real work.\n \nreply",
      "Python is successful because everyone is aware that it has relatively terrible performance. As a result, anything remotely heavy is put into performant libraries that use not-python, leaving a nice glue language with fast libraries.If you have something CPU bound, and it's python code hitting that ceiling, you're probably throwing away 10x performance [1]. That's ok, because anyone that cares about performance doesn't do that (or quickly learns).[1] https://programming-language-benchmarks.vercel.app/cpp-vs-py...\n \nreply",
      "Why would you rewrite something that already exists? It'd be a different story if the library evolved naturally starting with python, which it very much might if it was created today.\n \nreply",
      "Why must every educational python library insist on teaching kids with global variables? I know parameters aren't easy for novices, but it feels like it's missing a lot of the value when we don't attempt to teach them...\n \nreply",
      "Because the concept of variables must be learned before the concept of scope.\n \nreply",
      "True, but having a single scope is more intuitive at first for people who don't have a good grasp of what a function is and are still trying to understand programming. Also processing/p5 kind of focuses on the speed and accessibility of getting an idea going, for which a game-loop and a single func scope are quite powerful!\n \nreply"
    ],
    "link": "http://py5coding.org/index.html",
    "first_paragraph": "About py5Getting StartedTutorialsHow To...ReferenceDeveloper Informationpy5 is a new version of Processing for Python 3.9+. The goal of py5\nis to create a version of Processing that is\nintegrated into the Python ecosystem.\nBuilt into the library are thoughtful choices about how to best get py5 to work\nwith other popular Python libraries and tools such as\nJupyter, numpy,\nshapely, trimesh,\nmatplotlib, and Pillow.py5 is an excellent choice for educators looking to teach Python in the\ncontext of creative coding and is currently used in classrooms all around the world.\nThis website\u2019s documentation includes\nintroductory tutorials as well as extensive\nreference documentation, complete with example code.Here is a basic example of a py5 Sketch:Here is an animated GIF to give you an idea of what that Sketch looks like:If you have Java 17 installed on your computer, you can install py5 using pip:Detailed installation instructions are available on this website. There are some Special Notes for Mac",
    "summary": "Welcome to the dazzling world of <em>py5</em>, where Python whispers sweet nothings to Java, and libraries like Jupyter and matplotlib get caught up in this techno-romantic escapade. Here, where the past meets the Python present, users scratch their heads over Java dependencies\u2014because apparently, Python can't be trusted to handle a creative coding framework on its own. Dive into tutorials and watch GIFs dance with educational glee, all while hoping the smattering of confused comments can untangle the Java-Python love affair. Because what could be more exhilarating than installing one language to use another? \ud83d\udc0d\u2615\ud83d\udc94"
  },
  {
    "title": "Breaking down a record-setting day on the Texas grid (gridstatus.io)",
    "points": 94,
    "submitter": "kmax12",
    "submit_time": "2024-08-21T19:18:48",
    "num_comments": 22,
    "comments_url": "https://news.ycombinator.com/item?id=41313290",
    "comments": [
      "If I'm reading this right, my thermostat's \"rush hours\" seem to be scheduled for gross load peak. They then seem to usually end (and kick my AC back to a desired temp causing a ton of usage) right around net load peak...which this is now reporting is when energy prices go through the roof.So basically the \"rush hour\" program has likely been costing me more money than if I just ignored them to begin with up to this point. I do realize these programs are primarily about limiting peak gross load and not saving individuals money but maybe I won't go out of my way to abide by them now...\n \nreply",
      "Maybe this is obvious, but make sure to check your rate structure with your energy company. Just because market prices are high later in the day doesn\u2019t mean that\u2019s when your prices are highest.\n \nreply",
      "While this is true for much of Texas. I happen to live in a city that still has a public operator. So we just get more generalized flatter rates. I haven't looked into the details of my plan closely in a while as a result though, so you might be right.En masse though, it seems not ideal from a cost perspective the way things have been scheduled up until now. I'll give them the benefit of the doubt that it might be adjusted better in the future.\n \nreply",
      "My rush hour went off yesterday afternoon and the temp rise made me doze off and i woke up sweating with it set to 80 degrees. I'm in the process of canceling, it's not easy. I used the chat and someone is going to send me an email (which says it's canceled?) within 24-48 hours.Harder to turn off than anything else in recent memory. If anyone has a pro tip on an easy way to cancel let me know.\n \nreply",
      "Austin Energy? There aren't many providers that I am aware of in Texas that have variable rates.\n \nreply",
      "So the day peaked at 85 GW of load, and they got down to only 130 MW of spare capacity. Just 0.15% from running out.And they never asked for conservation?Is it normal to go that close to the edge without trying to cut load?\n \nreply",
      "I was just chatting with a friend on how we haven't received the conservation emails like we have in previous years. This year has not been as extreme either as the DFW metroplex has not had the extended 100\u00b0+ days. We've just had a run of 3 or 4, but we've had 30+ consecutive days in the past.\n \nreply",
      "Austin here, we\u2019re enrolled in a conservation plan through Austin Energy whereby they control our smart thermostats (Nest in our case). These \u201cRush Hour\u201d notices have been firing a lot over the past two weeks; perhaps only two days where we haven\u2019t been asked to conserve somewhere between 3-6 hours a day.\n \nreply",
      "Last year was brutal, this year is great.\n \nreply",
      "Sounds like Stockholm Syndrome to me my friend. I would not define this heat as great; more like just this side of deadly.\n \nreply"
    ],
    "link": "https://blog.gridstatus.io/a-record-setting-day-in-ercot/",
    "first_paragraph": "Market highlights and explanations from a day of records in ERCOT.On August 20th, 2024, The Electric Reliability Council of Texas (ERCOT) saw records for demand, solar generation, net load, and battery discharge alongside prices near the cap; a prime example of how operations in the market are evolving.Solar generation was high all day, keeping prices under control even through the record-setting peak load. However, as solar ramped down and the proportion low marginal cost resources on the grid was reduced and prices began to take off.As the resource mix has evolved, high prices correlate more to high net load rather than gross load. Net load is demand that must be met by resources with a higher marginal cost. Because load remained high as the sun set ERCOT began to call on more resources with fuel costs and higher O&M components, eventually reaching the upper echelon of energy prices from peaking units. Shattering the previous record, battery discharge peaked 20% higher than the previ",
    "summary": "Welcome to another electrifying day in the life of the Texas power grid, where solar panels do all the heavy lifting until they clock off at sunset, leaving the antiquated fossil-fueled geriatrics to send power bills through the stratosphere. Commenters on the frontlines are just now realizing that their \"smart\" thermostats might be more deviously clever than initially thought, with programmed peak load shenanigans costing them more than a simple manual override would. Meanwhile, in a thrilling display of energy brinksmanship, ERCOT flirts with absolute grid failure, operating within a hair\u2019s breadth of total blackout, yet strangely, no one's being told to power down. Maybe this year\u2019s relaxation of conservation emails is an innovative ERCOT strategy to keep everyone guessing, or maybe they just forgot to hit \"send.\""
  },
  {
    "title": "Do low-level optimizations matter? Faster quicksort with cmov (2020) (cantrip.org)",
    "points": 44,
    "submitter": "fanf2",
    "submit_time": "2024-08-21T20:42:03",
    "num_comments": 18,
    "comments_url": "https://news.ycombinator.com/item?id=41314039",
    "comments": [
      "Note that random data is not a common case for sorting algorithms. It'd be interesting to see how the numbers change on partially-, mostly-, and fully-sorted data.\n \nreply",
      "The most important bit of this is in the conclusion:  Before we conclude anything, we should remind ourselves of its limitations. The tests run were on completely random data. Truly random data seldom occurs in real life.\n\nLinus famously ranted about CMOV in https://yarchive.net/comp/linux/cmov.html (2007, so potentially more modern architectures are better at some of this) and he says:  if you KNOW the branch is totally unpredictable, cmov is often good for\n  performance. But a compiler almost never knows that.\n\nAs usual with optimizations like this you have to benchmark and even then if your sample isn't representative it might not mean much.\n \nreply",
      "> Back in 2000, AMD included cmov in its 64-bit x86 ISA extensions. Then, Intel had to adopt them when Itanium flopped.Wasn't \"cmov\" one of the things added for the pentium pro? So it wasn't instruction compatible - hence the \"i686\" prefix to a lot of compiler triples?\n \nreply",
      "Intel was so embarrassed by the failure of itanium they invented a Time Machine and went back and added the instruction to a 1995 CPU. Deceptive and anti-competitive!\n \nreply",
      "Yes, that is correct.\n \nreply",
      "I would expect eliminating branches in a busy inner loop to matter.The interesting part is how that was done:> A New Primitive, swap_if> How can we use this method in our sort? First, let us make a swap_if:  inline bool swap_if(bool c, int& a, int& b) {\n    int ta = a, mask = -c;  // false -> 0, true -> 111..111\n    a = (b & mask) | (ta & ~mask);\n    b = (ta & mask) | (b & ~mask);\n    return c;\n  }\n\n> In our partition function, then, we can transform    if (*right <= pivot) {\n      int tmp = *left; *left = *right, *right = tmp;\n      ++left;\n    }\n\n> into just    left += swap_if(*right <= pivot, *left, *right);\n \nreply",
      "There\u2019s a well-known in-place implementation of swap of the form:  a ^= b\n  b ^= a\n  a ^= b\n\n(Here ^ denotes bitwise XOR)Allowing for the mask, one could do an in-place version of swap_if via  a ^= (b & mask)\n  b ^= (a & mask)\n  a ^= (b & mask)\n\nThe in-place version of swap is generally discouraged because compilers are smart (https://stackoverflow.com/questions/36906/what-is-the-fastes...) but I do wonder whether the masking in swap_if obscures intent to the compiler enough to close the gap.Assuming the mask is passed in, Godbolt puts OP\u2019s swap_if at 26 instructions, versus the above swap_if at 17 instructions: https://godbolt.org/z/Wedco5hPv\n \nreply",
      "This sort of use of turning conditionals into bitmasks and then shuffling masked values around was fairly common back in the day when writing code for SSE intrinsics.You wouldn't want to have to check each lane individually since that would spoil the point of using SSE.  So you'd write masking ops like this and keep things parallel, tThen judiciously use any() and all() type intrinsics to check whether the lanes could agree to skip certain blocks conditionally.(This was before ISPC and before autovectorization to handle it for you.)\n \nreply",
      "Will we see x86 or similar CPUs replace hot instruction blocks with current-processor-specific optimized code during runtime, similar to how certain JIT VMs do?What I mean is, say you have a similar simple \"x = (cond) ? a : b;\" which the compiler has not translated to a CMOV.If this is in a hot loop then the CPU could, in theory, notice that \"it's just doing a conditional move, I can do the CMOV faster\" and then translate those code bytes at that memory location to a CMOV instead (ie during decoding or something like that).Not worth the complexity? I imagine it would slow down the decoder or wherever they insert this replacement logic. Or am I hopelessly out of date and they're already doing this?\n \nreply",
      "I think it could only do that in spans of code where interrupts are disabled and purely between values already in registers.  CPU state feels like it's in your control,  but it's not at all in your control,  and even if it was,  multiple processes might exist and memory is never in your control.\n \nreply"
    ],
    "link": "http://cantrip.org/sortfast.html",
    "first_paragraph": "by Nathan Myers, ncm at cantrip dot org, 2020-01-09Collectively, we have been thinking about sorting for longer than we have had computers. There is still an active literature 1,2,3. We are taught that how the counts of comparisons and swaps vary with problem size is what matters: as problems get bigger, order dominates, and anything else is buried in the noise. We learn that the best in-place sorts run in time around kN lg2(N), and a better sort algorithm has a smaller k, or is better-behaved for chosen input.We ought to be able to sort pretty fast, by now, using a Standard Library sort. Sorting is real work: if you need it to go faster, you probably need to spend more on hardware. You can\u2019t cheat on that.Or can you? The classic sorting research was conducted on machines from many generations ago. While today\u2019s are made to seem similar from the outside, inside they are very, very different. Do we still understand what affects sorting speed today? Maybe the rules have changed.Trying ou",
    "summary": "**\"Quicksort Rises Again: This Time with Fancy Pants\"**\n\nIn what absolutely qualifies as a groundbreaking reevaluation of priorities, a brave soul delves into the abyss of \"optimizing quicksort\" - because evidently, our current sorting speed was holding back human evolution. \ud83d\udc22\ud83d\udca8 Enter the arcane world of *conditional moves* which will surely shave nanoseconds off your luxurious computation times - feel the glee of underpaid IT workers everywhere. Commenters debate fervently over the trajectory of `cmov`, showcasing a flagrant disregard for its 1995 Pentium debut - historical accuracy is so pass\u00e9 in 2020, right? Meanwhile, would-be wizards suggest swapping XOR ops like it's a macOS system update. Forget the flying cars; we\u2019ve got conditional moves now! \ud83d\ude80"
  },
  {
    "title": "How to build a 50k ton forging press (construction-physics.com)",
    "points": 240,
    "submitter": "chmaynard",
    "submit_time": "2024-08-21T14:00:47",
    "num_comments": 108,
    "comments_url": "https://news.ycombinator.com/item?id=41310384",
    "comments": [
      "> Forgings have the added advantage of variable grain direction which generally can be tailored to the stress patterns of a specific design.This is a super underappreciated fact!  It's often repeated that forging is just stronger, but just squishing steel does NOT make it stronger.  Forging a part is so much more than just smashing it into a shape.Steel cable is made of pretty ordinary steel which is stretched 100s of times its original length.  That process alone makes it 2-4x stronger in that direction. You stretch steel and it gets stronger in that direction.Do you see how complicated that optimization process becomes?  The process steps are not just trying to take it to the final shape. Your piston rod needs to be strong lengthwise, so you actually want to start with a short fat ingot and stretch it out instead of one that is near-final size.Think of making an I-beam.  You could hammer out the middle, making it thinner.  That would give you a bit of strength there but very little on the edges. If you instead pull the edges out, you create a long continuous stretch that will be very strong against bending.  Where, how, and in what order you stretch makes all the difference. You may want to leave extra material and cut it off later, so that your grains are all oriented together instead of tapering to a point.For any moderately complex part, this process is as complicated as modern engineering problems.  With poor steel you genuinely need to understand how to foster and bring out those continuous lines or your corkscrew will unwind like playdough.  Blacksmiths had a legitimately intellectual job back in the day!\n \nreply",
      "This effect also applies to polymers! Perhaps even more so. Take a polyethylene bag (LDPE) and stretch the material in one direction. You might notice the material becomes thinner but also stronger. This is due to the polymer chains becoming aligned. Eventually you get \"drawn fibers\" where the molecular strands are aligned with the fibers for optimum tensile strength.\n \nreply",
      "it varies a lot with polymers, and it's a different effect.  steel is entirely crystalline; ldpe is mostly amorphous.  a big part of what's happening in the strain hardening of ldpe, aside from making it uniaxially oriented, is that it's crystallizing; the crystalline domains become larger, greatly reducing the amorphous volume fraction.  (there are also other ways of achieving this effect, such as annealing, which you will notice softens steel rather than hardening it.)  ldpe's strength isn't determined by crystal dislocation density in the same way as steel's, and of course steel doesn't have polymer chains to align\n \nreply",
      "That makes sense, if I don't rip open a bag on the first try it'll just stretch and never open\n \nreply",
      "Stretch it in one direction, then grab in the middle of the stretched area and pull sideways, and it pops open like nothing.\n \nreply",
      "This is exactly what dyneema is only with hdpe.\n \nreply",
      "> just squishing steel does NOT make it strongerjust squishing steel does actually make it stronger, because it increases the number of dislocations in its crystal structure.  smaller grains mean higher strength even without the variable grain direction.  also, peening, which is not exactly the same as forging but is also just squishing steel, can give you higher strength for a third reason: areas with residual compressive stress can't initiate cracks until you overcome that stress, which increases strength.  even more, though, it increases fatigue resistance\n \nreply",
      "I wonder if it's possible to do additive manufacturing with pre-elongated snippets of wire.\n \nreply",
      "I'd really like to see some backing of these claims.  I've seen \"grain flow\" claiming big gains for years in various enthusiast magazines (bike, motorcycles, cars, etc) as to why components are forged.Then I started working in engineering, and I can't find any support for these claims.  For sure when a steel bar is worked down to become wire for a steel rope, it cannot be pulled to an elongation of 100x increasing strength.  A36 steel which is a basic structural steel has an elongation at break of 23% in a 2\" gauge length [1].  In every rolling mill I've been in, there is a limited amount of reduction per pass through the mill, after which the metal needs to go for thermal treatment to be annealed to remove all the cold work.  Every time you anneal the material, you completely resets the elongation (internal plastic strain) and strengthening due to work hardening.  If they do too much reduction in one pass or at too low of a temperature, it cracks the material and makes it weaker.For sheet metal, there is lore about the material being stronger in the rolling direction as that is the direction of grain flow.  I have yet to find a source that can point to any large difference.  In papers like this [2] there are claims of certain orientations of samples relative to rolling direction have different tensile properties, but when you look at the tensile charts, there is minimal difference.  The yield strength in these charts isn't reported, but all three orientations look to yield at the same point.  In this test the across the grain (90 degree to rolling direction) orientation had the highest tensile strength which is the opposite of the expectation of the forging \"grain flow\" promoters.  But the magnitude of the difference isn't large, and is small relative to normal factors of safety in a reasonable design.When designing automotive components, I've only ever seen forging methods selected for efficiency of production.  If a part mostly fills the envelope of a bar or plate, it is cut from bar or plate in all cases.  If there is a lot of void volume in the part, the calculation will be made to determine if the cost of developing forging tooling and development will get paid back in reduced material and machining cost.  I have yet to see the dimensions of the part change with manufacturing method, which would be needed if the non-forged part was significantly weaker.And finally, a lot of forged parts are subsequently heat treated.  When heat treating steel all of the grains in the steel have to be destroyed and recrystallized. That is the mechanism by which heat treatment works.  Depending on the exact process and part geometry, this process removes or reduces the grain flow in the finished parts.Having said that, the claim of superiority of forging persists, and I'd love to see a technical reference that shows the magnitude of the change from someone who has plausibly actually tested the effect.[1] https://matweb.com/search/DataSheet.aspx?MatGUID=d1844977c5c...\n[2] https://www.researchgate.net/publication/283447700_The_effec...\n \nreply",
      "> Blacksmiths had a legitimately intellectual job back in the day!ACOUP noted that blacksmiths might be assisted by unskilled laborers, strikers, who had the actual job of lifting the hammer and hitting the object with it.\n \nreply"
    ],
    "link": "https://www.construction-physics.com/p/how-to-build-a-50000-ton-forging",
    "first_paragraph": "",
    "summary": "**How To Mash Metal Real Good**\n\nHobby engineers and armchair physicists unite on construction-physics.com to teach us *all* how <em>not</em> to build a 50k ton forging press. The first commenter, with a vague memory of high school physics, enlightens us on the magical properties of stretched steel, turning the comments into a poor man's materials science seminar. A delightful debate ensues about whether squishing or stretching makes steel stronger, culminating in wild claims about grain flow that would make any seasoned engineer weep. Last but not least, someone suggests that blacksmiths were the unsung intellectuals of yore, proving that nostalgia isn\u2019t just about vinyl and vintage tees."
  },
  {
    "title": "Better Living Through Algorithms (2023) (clarkesworldmagazine.com)",
    "points": 138,
    "submitter": "RafelMri",
    "submit_time": "2024-08-16T07:06:41",
    "num_comments": 25,
    "comments_url": "https://news.ycombinator.com/item?id=41263876",
    "comments": [
      "[1] https://www.thehugoawards.org/hugo-history/2024-hugo-awards/",
      "I'm pretty AI pessimistic, but I still found the more optimistic AI story refreshing and nice.  A reminder that new technology is actually supposed to make our lives better, not just funnel a lot of money from a lot of people to a small number of share holders (ie. \"create value\").It's extremely believable that the downfall of some public good like Abelique would be primarily sales and marketing getting in and trying to steer it and advertise for profit, and it being otherwise gamed.  It's so hard for something to just be good for everybody; somebody always wants to maximize their own benefit, even at the expense of everybody else (relevant example: https://news.ycombinator.com/item?id=40862865).\n \nreply",
      "Well that\u2019s exactly what happened to Facebook, and YouTube.People don\u2019t really tend to believe it but when I worked at Facebook inventing features for users, 100% of the time our discussions were based in \u201chow do we improve community and happiness and squash divisiveness and hate?\u201d and never about revenue. Until influencers took over the internet. Then more and more we started being told not to ship things that were fun or socially good because it would break viral loops or undermine the market dominance of Universal Music or some such shit. So I quit.\n \nreply",
      "That's a great story. Suddenly I feel the need to share that I like to take photographs[1][1] https://www.flickr.com/photos/---mike---/albums/721777202964...\n \nreply",
      "I like the backgrounds of the lion pics!\n \nreply",
      "The idea is to take a bunch of photos from the same area, to get a virtual focus when you align and average them (I used hugin to do the alignment and a simple python script to average them).The very first one, is a series of photos take as I walked towards the lion, which tends to very weird things to the background, compressing it.One day, I'd like to take a Raspberry Pi (or a few of them) and build a 16x16 camera array, so I can get a smoother look.\n \nreply",
      "Thanks for sharing the art and techniques! PS I should buy some watercolor brushes.\n \nreply",
      "It's really cool! Feels like a timelapse video capture somehow.\n \nreply",
      "Kind of reminds me of Debord's concept of spectacle. The sheer mediation of life through images being its own sort of Abelique that steers our thoughts and patterns in everyday life every bit as much as an app. Not just the things people usually think of when they read a chapter or two of Society of the Spectacle and put it down, but also things like how our neighborhoods look, how signs and streets suggest to us how to go about our day, etc.One of his (or, more accurately, the Situationist movement he was a leading figure of) more interesting ideas was that of the d\u00e9rive. You would do it as a small group or alone, and the idea was to just wander through the city, making choices arbitrarily rather than taking the path of least resistance. The goal is to expose yourself to new things you might not have encountered and meet new people that your respective roles in the spectacle wouldn't have encouraged meeting.One of my favorite observations to make is that Pokemon Go (funny enough, was mentioned in this story) was an accidental d\u00e9rive app for a brief moment there in 2016. People walked around the city following pokemon leads rather than the normal visual and psychological cues of the environment, and I know some people who met that way. The end of this story, as well as the way in which the app was a totalitarizing force without being a repressive one, kind of reminded me of that.\n \nreply",
      "Great short story. Several times while reading it, I wished that I could download Abelique on the app store and try it out - I guess I'll have to settle for picking up my sketchbook instead.\n \nreply"
    ],
    "link": "https://clarkesworldmagazine.com/kritzer_05_23/",
    "first_paragraph": "\u00a0\u00a0Issue 200 \u2013 May 20235610 words, short storyby Naomi KritzerAUDIO VERSION2023 Nebula Award Finalist for Best Short Story2024 Hugo Award Winner for Best Short Story2024 Finalist: WSFA Small Press AwardJune was the first of my friends to get into it. This isn\u2019t surprising\u2014she was playing Wordle for weeks before Margo or I discovered it. When we met up for our weekly lunch, she kept checking her phone and I assumed it was some new game. Then she put it down with a smile and said, \u201cAbelique told me not to pick up my phone again until after lunch was over.\u201d\u201cWho?\u201d Margo said.\u201cIt\u2019s this new app for better living.\u201d\u201cI love the idea of an app that tells you to put your phone down more. For your own good,\u201d Margo said, her eyes glinting.\u201cYou should try it!\u201d June said. \u201cYou get the first thirty days free!\u201d\u201cAnd after that, you have to pay someone to nag you to use your phone less?\u201d\u201cIt\u2019s more than that.\u201d June took a bite out of her tuna melt. \u201cFor one thing, you also agree to occasionally nag other ",
    "summary": "**Better Living Through Oblivion: A satirical take on our tech-dependent dystopia**\n\nIn what can only be described as a profoundly groundbreaking work of fiction, Naomi Kritzer illuminates the human condition by shoving another AI app, this time named Abelique, into our busy digital lives. Rejoice, as we discover a novel concept: paying an app to tell us to ignore our phones \u2013 a truly revolutionary anti-tech advancement straight out of Silicon Valley's least realistic daydreams. But wait, *there's more!* The comments section offers a smorgasbord of wishful thinkers and disillusioned techies, reminiscing on the idyllic days of social media before reality punched us in the collective consciousness. Meanwhile, another user, presumably distracted by the virtual spectacle of lion photography, compares AI integration into our lives with Debord's spectacle, probably after skimming the Wikipedia summary. \ud83d\udcf1\ud83d\udc40\ud83d\udcb8"
  },
  {
    "title": "Euclid's Proof that \u221a2 is Irrational (mathsisfun.com)",
    "points": 57,
    "submitter": "thunderbong",
    "submit_time": "2024-08-21T20:39:50",
    "num_comments": 36,
    "comments_url": "https://news.ycombinator.com/item?id=41314031",
    "comments": [
      "xxx"
    ],
    "link": "https://www.mathsisfun.com/numbers/euclid-square-root-2-irrational.html",
    "first_paragraph": "Euclid proved that \u221a2 (the square root of 2) is an irrational number.He used a proof by contradiction.First Euclid assumed \u221a2 was a rational number.A rational number\u00a0 is a number that can be in the form p/q where p and q are integers and q is not zero.He then went on to show that in the form p/q it can always be simplified.But we can't go on simplifying an integer ratio forever, so there is a contradiction.So \u221a2 must be an irrational number.We will go into the details of his proof, but first let's take a look at some useful facts:First, let's look at some interesting facts about even numbers and rational numbers:Any integer multiplied by 2 gives an even number.The square of an even number is always an even number (multiplying two even numbers gives an even number).\n\nLikewise if a number is even and is a square of an integer, then its square root must be even.Rational numbers or fractions must have a simplest form.Euclid's proof starts with the assumption that  \u221a2 is equal to a rational",
    "summary": "Title: *Math Nerds Rejoice: Euclid Kicks \u221a2's Rational Ass*\n\nEuclid strikes back from the grave, wielding his ancient Greek chalk to pulverize the minds of wannabe mathematicians at MathIsFun.com. Armed with the inflammatory weapon of \"proof by contradiction,\" he dares to suggest that \u221a2 can't be pitted into a tidy fraction, <em>p/q</em>, without end. Comment sections immediately ignite with the fire of a thousand suns as armchair mathematicians and high school mathletes alike quibble over who can misinterpret Euclid\u2019s elegant smackdown more profoundly. Grab your popcorn as the irrational circus unfolds, featuring excruciatingly comical displays of numerical illiteracy and cries for \"more examples because this proof doesn\u2019t fit my calculator's display.\" \ud83e\udd13\ud83d\udd22"
  },
  {
    "title": "Bioaccumulation of Microplastics in Decedent Human Brains (nih.gov)",
    "points": 29,
    "submitter": "apsec112",
    "submit_time": "2024-08-21T22:07:09",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC11100893/",
    "first_paragraph": "",
    "summary": "In a stunning turn of events that has shocked absolutely no one, researchers have discovered that our brains are now part Tupperware. The study, which might as well have been subtitled \"How I Learned to Stop Worrying and Love Microplastics,\" reveals that human brains are filling up with tiny bits of plastic, probably thanks to all those three-dollar lattes from Starbucks. Over in the comments, armchair scientists and part-time Instagram nutritionists are tripping over themselves to declare that they've known about this since before it was cool, and are halfway through drafting legislation to ban everything but breathing, which is also under suspicion. Could this be the solution to artificial intelligence we never knew we needed? Stay non-biodegradable, folks. \ud83e\udde0\ud83c\udf0d\ud83d\udc80"
  },
  {
    "title": "Launch HN: Outerport (YC S24) \u2013 Instant hot-swapping for AI model weights",
    "points": 61,
    "submitter": "tovacinni",
    "submit_time": "2024-08-21T16:55:36",
    "num_comments": 10,
    "comments_url": "https://news.ycombinator.com/item?id=41312079",
    "comments": [
      "> Outerport is a caching system for model weights, allowing read-only models to be cached in pinned RAM for fast loading into GPU. Outerport is also hierarchical, maintaining a cache across S3 to local SSD to RAM to GPU memory, optimizing for reduced data transfer costs and load balancing.This is really cool. Are the costs to run this mainly storage or how much compute is actually tied up in it?The time/cost to download models on a gpu cloud instance really add up when you are paying per second.\n \nreply",
      "Thanks! If you mean the costs for users of Outerport, it'll be a subscription model for our hosted registry (with a limit on storage / S3 egress) and a license model for self-hosting the registry. So mainly storage, since the idea is to also minimize egress costs which are associated with the compute tied up in it!\n \nreply",
      "Do all variations of the model need to have the same architecture?Or can they be different types of models with different number of layers, etc?\n \nreply",
      "Variants do not have to be the same architecture- the demo (https://hotswap.outerport.com/) runs on a couple of different open source architectures.That being said, there is some smart caching / hashing on layers such that if you do have models that are similar (i.e. a fine-tuned model where only some layers are fine-tuned), it'll minimize storage and transfer by reusing those weights.\n \nreply",
      "This is very cool! Most of the work I've seen on reducing inference costs has been via things like LoRAX that lets multiple fine-tunes share the same underlying base model.Do you imagine Outerport being a better fit for OSS model hosts like Replicate, Anyscale, etc. or for companies that are trying to host multiple models themselves?Your use case mentioned speaks more to the latter, but it seems like the value at scale is with model hosting as a service companies.\n \nreply",
      "Thanks!I think both are fits- we've gotten interest from both types of companies and our first customer is a \"OSS model host\".Our 40% savings result is also specifically for the 5 model services case, so there could be non-trivial cost reduction even with a reasonably small number of models.\n \nreply",
      "Could you craft a model-weight as a preamble to a prompt? So you can submit prompts through a layer which will pre-warm the model weights for you based on the prompt - Taking the output into some next step in your workflow, apply a new weight preamble depending on what the next phase is?Like, for a particular portion of the workflow - assume some crawler of weird Insurance Claims data of scale - and you want particular weights for the aspects of certain logic that youre running to search for fraud.\n \nreply",
      "That's a super neat idea- we should in fact be able to use this same system to support the orchestration of a 'system prompt caching' sort of thing (across deployments). I'll put this on my 'things to hack on' list :)\n \nreply",
      "This seems useful but honestly I think you guys are better off getting IP protection and licensing out the technology.  This is a classic \"feature not a product\" and I don't see you competing against google/microsoft/huggingface in the model management space.\n \nreply",
      "Maybe! Many people don't want to be vendor locked-in though and there are new GPU cloud providers gaining traction. Some still prefer on-prem.We hope to make it easier to bridge the multi-cloud landscape by being independent and 'outer'.\n \nreply"
    ],
    "link": "item?id=41312079",
    "first_paragraph": "",
    "summary": "<b>Launch HN: Outerport - Revolutionizing the Excruciating Task of Not Waiting Five Seconds</b>\n\nYet another startup is promising to shave picoseconds off your machine learning model loading times\u2014because, as every procrastinating developer agrees, those extra milliseconds are what truly cripple productivity, not the hours spent on Reddit. Outerport emerges from the tech abyss to offer <i>'instant hot-swapping for AI model weights'</i>, which is essentially a fancy way of saying \"we cache stuff really fast.\" Users on Hacker News are tripping over themselves in delight, as they imagine a future where their models load so quickly, they barely have time to sip their ethically sourced, overpriced coffee. Inquiries about cost reveal a subscription model, prompting a frenzy of calculations about whether this is more economical than just buying more RAM, while others debate porting this feature to model their neurotic cat's behavior, because surely, this tech can fix everything! \ud83d\ude31\ud83d\ude80"
  },
  {
    "title": "Distributed Locks with Redis (redis.io)",
    "points": 11,
    "submitter": "thenewwazoo",
    "submit_time": "2024-08-19T16:34:21",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=41292477",
    "comments": [
      "Martin Kleppmann has some interesting thoughts on Redlock:> I think the Redlock algorithm is a poor choice because it is \u201cneither fish nor fowl\u201d: it is unnecessarily heavyweight and expensive for efficiency-optimization locks, but it is not sufficiently safe for situations in which correctness depends on the lock.https://martin.kleppmann.com/2016/02/08/how-to-do-distribute...\n \nreply",
      "Where's the Jepsen suite tests?Without it this is alphaware at best\n \nreply"
    ],
    "link": "https://redis.io/docs/latest/develop/use/patterns/distributed-locks/",
    "first_paragraph": "Optimizing Pok\u00e9mon GO with a Redis Enterprise clusterLearn what you need to go from beginner to GenAI expertOptimizing Pok\u00e9mon GO with a Redis Enterprise clusterLearn what you need to go from beginner to GenAI expertA distributed lock pattern with RedisDistributed locks are a very useful primitive in many environments where\ndifferent processes must operate with shared resources in a mutually\nexclusive way.There are a number of libraries and blog posts describing how to implement\na DLM (Distributed Lock Manager) with Redis, but every library uses a different\napproach, and many use a simple approach with lower guarantees compared to\nwhat can be achieved with slightly more complex designs.This page describes a more canonical algorithm to implement\ndistributed locks with Redis. We propose an algorithm, called Redlock,\nwhich implements a DLM which we believe to be safer than the vanilla single\ninstance approach. We hope that the community will analyze it, provide\nfeedback, and use it as a s",
    "summary": "The overly-caffeinated minds at Redis give us yet another \"groundbreaking\" solution to a problem no one knew they had, introducing \ud83c\udf89 *Redlock!* \ud83c\udf89 Because, when you can\u2019t decide if you want safety or efficiency, why not choose _neither_? Meanwhile, tech guru Martin Kleppmann punches holes in Redlock like it\u2019s Swiss cheese, deeming it a tech equivalent of Frankenstein's monster. In the comments section, keyboard warriors demand Jepsen tests or declare it \"alphaware,\" showcasing Reddit's flair for hyperbole as always. Let no complexity go unengineered!"
  },
  {
    "title": "Maps Mania: How the World Powers Itself (googlemapsmania.blogspot.com)",
    "points": 13,
    "submitter": "speckx",
    "submit_time": "2024-08-19T16:17:12",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://googlemapsmania.blogspot.com/2024/08/how-world-powers-itself.html",
    "first_paragraph": "You can learn a lot about how the world powers itself from the Global Energy Monitor's Power Tracker. This interactive map shows the locations of nearly 18,000 power stations in 200 countries around the world, categorized by power sector.Using the map's filter controls it is possible to explore where different types of power stations are distributed around the world. This allows you, for example, to investigate which countries are still most reliant on\u00a0thermal power (coal, oil, gas, nuclear, geothermal, bioenergy) and which have shifted most successfully to renewables (solar, wind, hydro).If you use the filter controls to view the locations of operational and planned coal power stations, you can see how western Europe has almost completely moved away from dirty coal power - except for Germany which is still hugely reliant on its coal fired power stations. Change the filters to view nuclear power stations and you can see one of the reasons why Germany is still so reliant on coal (the la",
    "summary": "In the latest installment of \"Cartography for Couch Potatoes,\" Googlemapsmania serves up an <em>astounding</em> revelation: people use maps to see things! \ud83d\uddfa\ufe0fThis earth-shattering *insight* is backed by an interactive map that lets us voyeuristically hover over nearly 18,000 power stations, cause apparently, we're now all power grid experts. Commenters are equally enlightened, tripping over themselves to celebrate finding their house\u2019s light switch on the map, and debating fiercely over whether Germany\u2019s coal reliance will eventually turn the country into a barbecue. \ud83e\udd14\ud83d\udd25"
  },
  {
    "title": "Turnstyle \u2013 An esoteric, graphical functional language (jaspervdj.be)",
    "points": 52,
    "submitter": "JNRowe",
    "submit_time": "2024-08-21T17:49:40",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://jaspervdj.be/posts/2024-08-21-turnstyle.html",
    "first_paragraph": "I am delighted and horrified to announce a new graphical programming language\ncalled Turnstyle. You can see an example below (click to run).In the time leading up to ZuriHac 2024 earlier this year, I had been thinking\nabout Piet a little. We ended up working on something else during the\nHackathon, but this was still in the back of my mind.Some parts of Piets design are utter genius (using areas for number literals,\nusing hue/lightness as cycles). There are also things I don\u2019t like, such as the\nlimited amount of colors, the difficulty reusing code, and the lack of a\nway to extend it with new primitive operations. I suspect these are part of the\nreason nobody has yet tried to write, say, an RDBMS or a web browser in Piet.Given the amount of attention going to programming languages in the functional\nprogramming community, I was quite surprised nobody had ever tried to do a\nfunctional variant of it (as far as I could find).I wanted to create something based on Lambda Calculus. It forms a n",
    "summary": "<h1>Turnstyle \u2013 A New Contender in the Esoteric Olympics</h1>\n<i>Brace yourselves</i>, a new graphical programming language named Turnstyle breezes into the niche so niche <em>your favorite niche looks mainstream</em>. Inspired by the colorful chaos of Piet, but disappointed by its practical limitations (because everyone's dreaming of building web browsers in a graphical programming language, right?), our brave developer forges ahead into the forgotten realm of functional graphical coding. Commenters eagerly split into camps: those who call it the future of programming (probably also believe in unicorns) and those who are sensible enough to chuckle and move on. \ud83d\ude02"
  },
  {
    "title": "Midjourney web experience is now open to everyone (midjourney.com)",
    "points": 205,
    "submitter": "meetpateltech",
    "submit_time": "2024-08-21T17:11:48",
    "num_comments": 98,
    "comments_url": "https://news.ycombinator.com/item?id=41312225",
    "comments": [
      "Ideogram 2.0 was also released today, and it's nerfed (anatomy is lot worse than 1.0 now) just like StableDiffusion versions after 1.5 which is very disappointing.Well good thing we have Flux out in the open now, both midjourney releasing web version or ideogram releasing there 2.0 on the same day after 2 weeks of flux won't redeem them as much. Flux Dev is amazing, check what SD community is doing with it on https://www.reddit.com/r/StableDiffusion/ . It can do fine tuning, there are Loras now, even control net. It can gen casual photos like no other tool out there, you won't be able to tell they are AI without looking way too deep.\n \nreply",
      "While I won't say that realism is a solved problem, SD has been able to produce unbelievably realistic photo-level images using \"Realism Engine\"/NightVisionXL/etc for a while now.Flux's power isn't necessarily in its ability to produce realistic images, so much as its increased size gives it a FAR superior ability to more closely follow the prompt.\n \nreply",
      "Are there any publicly accessible Flux image generation services you may recommend to check out?\n \nreply",
      "There are a few.https://fastflux.ai/ for instant image gen using Schnell (but its fixed on 4 steps and is mainly a tech show off of inference engine by runware.ai)https://www.segmind.com/ has API support with lots of options, I am using it to generate and set wallpaper using an AHK script. It's very very slow though.https://replicate.com/black-forest-labs/flux-schnell/example...https://huggingface.co/spaces/black-forest-labs/FLUX.1-schne...https://getimg.ai/text-to-imageThere are other tools now if you Google 'Flux image generator online'\n \nreply",
      "If you have a suitably powerful M-Mac or iOS device, you can run it locally using \"Draw Things\", which is free.\n \nreply",
      "Just to clarify for other readers, Draw Things has support and provides download links to quants but no iOS device can run the full precision model which means you will get slightly different and usually lower quality output than stuff you may see elsewhere, even if you use the same settings. It's still damn impressive though.\n \nreply",
      "Quality issue should be mainly due to using FP16 accmulators for GEMM in M1-M2, A14-A16 devices (it is not a problem for SD v1 / SDXL models due to smaller channel count). This is changed to FP32 accmulators for GEMM in these devices with 1.20240820.1 release. q8p should have comparable quality to non-quantized models (in Draw Things, it is called FLUX.1 [dev] (Exact)).\n \nreply",
      "Whoa, thanks for the tip!\n \nreply",
      "Huggingface has quite a few spaces with the base dev model as well as different variations of it.https://huggingface.co/spaces?sort=trending&search=dev\n \nreply",
      "Check out https://www.freepik.com/pikaso you can try flux and flux realism\n \nreply"
    ],
    "link": "https://www.midjourney.com/",
    "first_paragraph": "",
    "summary": "In a stunning lack of originality but a marvelous display of bandwagoning, Midjourney opens its web experience to everyone, inevitably trapping more unsuspecting users in its web of mediocrity. Commenters, adorned in their finest online-warrior cosplay, engage in a ferocious duel of who can be more disillusioned by version 'nerfs' while simultaneously hyping up the *latest and greatest* AI tool, Flux, as if it were the second coming of Photoshop. Watch as the discussions devolve into a techie specs showdown, where terms like 'realism engine' and 'FP32 accumulators' are tossed around to disguise the bitter disappointment of their desktop wallpapers still not fooling grandma. It's the blind leading the blind in tech's latest mirage \u2014 may the least buggy AI win! \ud83e\udd16\ud83d\udcbb"
  },
  {
    "title": "Meticulous (YC S21) is hiring to eliminate E2E UI tests",
    "points": 0,
    "submitter": "",
    "submit_time": "2024-08-21T21:01:27",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "item?id=41314161",
    "first_paragraph": "",
    "summary": "Meticulous, another Y Combinator spawn, boldly aims to <em>eliminate</em> end-to-end UI tests, because who needs thorough quality assurance when you can have fast, probably broken deployments? The startup bravely announces hiring, signaling yet another thrilling rollercoaster of overpromise under a trendy banner. In the comments, armchair CTOs and GitHub stars wage war over skepticisms and typographical errors, each passionately defending their crown in the kingdom of Missing The Point. \ud83c\udfaf\ud83d\udca5 What could possibly go wrong in a world where testing is an afterthought? \ud83d\ude80\ud83d\udc94"
  },
  {
    "title": "Show HN: Handwriter.ttf \u2013 Handwriting Synthesis with Harfbuzz WASM (github.com/hsfzxjy)",
    "points": 141,
    "submitter": "hsfzxjy",
    "submit_time": "2024-08-21T07:47:05",
    "num_comments": 36,
    "comments_url": "https://news.ycombinator.com/item?id=41307815",
    "comments": [
      "I bet this is what people felt when JavaScript was first demoed on the web.In the year 2077, when each font will run it's own virtual machine on WASM containing a \"minimal\" Ubuntu image, some enlightened blogger will suggest server side rendered fonts as a performance improvement.\n \nreply",
      "JS felt less impressive to me when I first saw it, simply because it couldn't do much. However, I remember the showcase Microsoft put together to show off what CSS could do in IE3 and that was very cool at the time.\n \nreply",
      "I remember that, too, and switched to IE for the next X years\n \nreply",
      "Nice demo.Without trying to steal the thread, what I would care is actually the opposite direction.Neither in Swift Playgrounds, nor in any other programming development environment apps for both mobile OSes, have I found a good development experience using pen instead of keyboard.Given how many of us \"program\" in paper notebooks, it is quite incredible that besides a couple of research projects done by PhD students, no one cares to actually make it more widespread in a usable way.\n \nreply",
      "I could see something like Apples new calculator drawing app taking this by storm. Writing out your code and getting syntax support and all the things in your ide but with your handwriting?In the same way that the calculator writes in the answers in your handwriting, it could write in snippets of code in your handwriting.If it's going to be made though, it has to be e-ink. Go big or go home!\n \nreply",
      "I've read the README and watched the video, but I'm still not sure what this is doing? I know it can \"synthesize [a] font at runtime\", so does that mean it's creating a random handwritten font as you type? But it's not based on the user's handwriting?\n \nreply",
      "This looks like it'd be quite useful for faking documents more convincingly. Existing handwriting fonts always have tell-tale regularities and there's so few that forensics analysis exposes them easily.\n \nreply",
      "Wtf is happening here what are the inputs and outputs? Hard to tell what this program does for me\n \nreply",
      "I wonder what makes SIMD an improvement here - in the end it all boils down to TTF bytecode and I don't think this comes with SIMD instructions, right?\n \nreply",
      "It\u2019s not TTF bytecode, but WASM bytecode. There\u2019s an experimental version of HarfBuzz that can run this.\n \nreply"
    ],
    "link": "https://github.com/hsfzxjy/handwriter.ttf",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Handwriting synthesis with Harfbuzz WASM.\n       \u270d\ufe0f A Handwriting Synthesizer by abusing Harfbuzz WASM Shaper. \ud83d\udd17 Check more stupid stuff at Harfbuzz-WASM-Fantasy.During the hype of llama.ttf months ago, I was speculating the potential of WASM shaper for even crazier purpose, one that fitter to a font shaper's duty -- to synthesize font at runtime. This project as proof-of-concept implements a synthesizer that generates and rasterizes handwriting-style font, backed by a super-lightweight RNN model (~14MiB).The project must be run in an application linked against libharfbuzz with the experimental WASM shaper enabled, which does not hold for any products currently. Considering that it's not easy to build such a library from scratch, I prebuilt a Docker image hsfzxjy/harfbuzz-wasm-handwriting-synthesis which contains both the TTF file a",
    "summary": "Title: Show HN: Handwriter.ttf \u2013 Handwriting Synthesis with Harfbuzz WASM\n\nIn a world desperate for more inefficiencies, an enterprising GitHub user decides that fonts need to be as bulky and cumbersome as the modern web. Handwriter.ttf promises to synthetically generate handwriting so personalized, it could only be less useful if it required physical ink. Hacker News enthusiasts, in awe of something so wonderfully over-engineered, take turns fantasizing about a future where fonts consume more RAM than entire operating systems & suggest equally logical expansions like e-ink powered IDEs. Meanwhile, the actual utility of this tool is as clear as a smudged pencil scribble, leaving users asking, \"What even is this?\" as they toggle between mockery and misguided admiration in true HN fashion. \ud83e\udd14\ud83d\udcbe\ud83d\udd8b\ufe0f"
  },
  {
    "title": "Rye and Uv: August Is Harvest Season for Python Packaging (pocoo.org)",
    "points": 153,
    "submitter": "keybits",
    "submit_time": "2024-08-21T11:12:28",
    "num_comments": 54,
    "comments_url": "https://news.ycombinator.com/item?id=41309072",
    "comments": [
      "Uv's latest release was discussed yesterday: https://news.ycombinator.com/item?id=41302475The linked post is the author of Rye's take on that.",
      "After the whole npm VC rugpull + Microsoft acquisition, and OpenAI showing legal non-profit status is toothless marketing to VC-path-entangled leaders, I'm reluctant to cede critical path language infra to these kinds of organizations. Individual contributors to these are individually great (and often exceptional!), but financial alignment at the organizational level is corrupted out of the gate. Fast forward 1-4 years, and the organization is what matters. \"Die a hero or live long enough to become the villain.\"So fast lint, type checking, code scans, PR assistants, yes, we can swap these whenever. But install flow & package repo, no.That is unfortunate given the state of pip and conda... But here we are.\n \nreply",
      "The PSF and PyPA are more than welcome to get their act together and tell a good packaging story for Python.  Unfortunately all they\u2019ve had to offer is a billion contributor blog posts essentially saying \u201cthe system we set up for ourselves limits our ability to be helpful, and that\u2019s not our fault, somehow.\u201dThey\u2019re all so caught up in their internal systems and politics[1] that they don\u2019t seem to know why they\u2019re actually there anymore.So if someone\u2019s gonna go do an actually-good job and capture the market in the way that Astral is, then that\u2019s exactly what we as a community deserve.[1]: I mean internal politics. This is a weird alt right \u201cDEI HIRE!\u201d rant.\n \nreply",
      "That battle has already been lost for Python.  Microsoft owns Python, they just don't make it public.This is how I came to believe this is the case:Few years ago I wanted to write Python bindings to kubectl.  I discovered that in order for that to work cross-platform, I need to make CGo use the same compiler on all platforms as does Python.  Unfortunately, on MS Windows, CGO uses MINGW while Python uses MSVC.  I wrote to Python dev. mailing list (which still existed at that time) and asked why did they choose to use a proprietary compiler for their \"open-source\" project.  The answer I received in a round-about way was that MSVC was a historical choice, which cannot be presently changed because MS provides Python Foundation with free infrastructure to run CI and builds, and it also provides developers to work on Python (i.e. MS employees get paid by MS to work on Python interpreter).  And that they are under orders not to drop MS tools from the toolchain.Year after year the situation was getting worse.  Like in a lot of similar projects, success created a lot of ground for mediocre nobodies to reach positions of power.  Python foundation and satellite projects like PyPA started to be populated by people whose way into these positions was not through contributing any useful code, but rather writing pages of code of conduct.  This code of conduct and never-ending skirmishes around controlling positions eventually led to some old-timers leaving or being outright kicked out (latest such event was the ban of Tim, the guy who, beside other things, wrote Tim sort, which is a somewhat famous feature of Python).Year after year MS was pushing its usual agenda they do in every project they get their hands on: add crapload of useless features for the sake of advertising.  Make the project swing every way possible, but mostly follow the fashion trends as hard as possible.  This is how Python is now devoted to adding as much of ML-style types as possible (in the language with a completely different type system...), AoT compilation and JIT (in the language that's half of the time used to dynamically glue native libraries...) and so on.  Essentially, making it a C#, but without curly braces.MS is smart enough to understand that publicly announcing their ownership of Python will scare a lot of people away from the technology, so they don't advertise it much.  But they keep working on ensuring developers' dependency on their tooling, and eventually they will come to collect on their investment.\n \nreply",
      "There are many correct observations, but Python is owned by Microsoft, Instagram, RedHat and Bloomberg. Google fired the Python team this year, which makes it an attractive work place.\n \nreply",
      "...and a lot of solo developers and academics besides.  (I say that as a corporately unaffiliated PyPA member)\n \nreply",
      "Sounds more like Microsoft owns Windows rather than Python.\n \nreply",
      "I'm kind of interested in this space -- can anyone point me at an article that goes over why this is harder for python than it seems to be for, e.g., ruby? Is there something inherent about the way code is imported in python that makes it less tractable? Or is it just that the python world has never quite all come together on something that works well enough?(Note that I can certainly complain about how `bundler` works in ruby, but these discussions in python-land seem to go way beyond my quibbles with the ruby ecosystem)\n \nreply",
      "It's not.  Just that Guido never cared about packaging, so it was left to a ragtag unpaid motley crew to piece together and later learn from industry practices that solidified a decade or two after they started.\n \nreply",
      "The churn is interesting. In 2019, I made a python version-manager and dependency manager written in rust. I gave up after it seemed like no one wanted to use it. Everyone not satisfied with Pip was on Poetry or Pipenv; I made the one I did because they both had user-interface problems; of the sort I would run into immediately. (I believe Poetry would default to Python 2, and not give you a choice by default, or something to that effect). Now there is a new batch.The biggest challenge was dealing with older pacakges that used non-standard packaging and ran arbitrary code; generally ones that didn't have wheels.From the article:> As of the most recent release, uv also gained a lot of functionality that previously required Rye such as manipulating pyproject.toml files, workspace support, local package references and script installation. It now also can manage Python installations for you so it's getting much closer.These are all things that dead project I wrote could do.\n \nreply"
    ],
    "link": "https://lucumr.pocoo.org/2024/8/21/harvest-season/",
    "first_paragraph": "written on Wednesday, August 21, 2024\n  \n\n  It has been a few months since I wrote about Rye here last.  You might remember that in\nFebruary I passed over stewardship of my Rye packaging too to Astral.  The folks over there have been super busy in\nbuilding a lot of amazing tooling for Python packaging in the last few\nmonths.  If you have been using Rye in the last few months you will have\nnoticed that the underlying resolver and installer uv got a lot better and faster.\nAs of the most recent release, uv also gained a lot of functionality that\npreviously required Rye such as manipulating pyproject.toml files,\nworkspace support, local package references and script installation.  It\nnow also can manage Python installations for you so it's getting much\ncloser.\nIf you are using Rye today, consider this blog post as a reminder that you\nshould probably starting having a closer look at uv and give feedback to\nthe Astral folks.\nI gave a talk just recently in Prague at EuroPython about my curren",
    "summary": "**Python-Pocalypse Now: A Tale of Mocking Packages and Tech Tin-Foil Hats**\n\nIn a world where tech bloggers treat packaging updates like celebrity weddings, *Rye* quietly passes the torch to *uv* with all the pomp of a Supreme Court nomination. Brace yourself for _earth-shattering_ features like editing pyproject.toml files, surely the lifeblood of our digital existence. The commenters, in an ever-spiraling orcish battle dance, hurl conspiracy theories about Microsoft's shadow overlordship of Python while reminiscing over the golden age of tech that apparently only existed in their caffeine-addled dreams. Meanwhile, the more grounded souls attempt to navigate through the corp-speak and FUD, wondering if they accidentally walked into a script for a bad tech thriller rather than a discussion about Python package managers. \ud83d\udc0d\ud83d\udcbc\ud83d\udd25"
  },
  {
    "title": "Revisiting the Classics: Jensen's Inequality (2023) (francisbach.com)",
    "points": 50,
    "submitter": "cpp_frog",
    "submit_time": "2024-08-21T14:05:48",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=41310433",
    "comments": [
      "The proof of Young\u2019s inequality is pretty neat but has the \u201emagically think of taking a log of an arbitrary expression which happens to work\u201d step. But it clarifies why the reciprocals of exponents have to sum up to 1: they are interpreted as probabilities when calculating expected value.Here\u2019s how I like to conceptualise it: bounding mixed variable product by sum of single variable terms is useful. Logarithms change multiplication to addition. Jensen\u2019s inequality lifts addition from the argument of a convex function outside. Compose.\n \nreply",
      "You've got a product on one side and what looks like a convex combination on the other, taking the log and applying Jensen's inequality isn't as big a leap as it may sound.\n \nreply",
      "Agreed, provided you have both sides of the inequality. Coming up with that particular convex combination is a bit of a leap that\u2019s not super intuitive to me.\n \nreply",
      "if you work with a lot of convex optimization, it comes up pretty often. for example, if you learn fenchel conjugates, the lead up and motivation to learning them will often necessitate proving young's inequality with jensen's inequality. that is why learning different maths is cool. you intuit some ways to reshape the problem in order to make these \"not super intuitive\" connections.\n \nreply"
    ],
    "link": "https://francisbach.com/jensen-inequality/",
    "first_paragraph": "",
    "summary": "In today's high-voltage intellectual throwdown on francisbach.com, a handful of theoremsueue warriors gather to promptly deep-dive into Jensen's Inequality, because nothing screams \"party\" like discussing logarithms and convex functions. One commenter, clearly possessed by the spirit of Euler himself, describes the mystical art of summoning logarithms to convert multiplication into addition with the casual flair of a street magician pulling a rabbit out of a hat. Meanwhile, others chime in with revelations that this isn\u2019t just math\u2014it\u2019s a lifestyle, my friends, wherein every convex curve hides a thrilling ride of inequality proofs and Fenchel conjugates. Strap in, buckle up, and prepare your best \"surprised Pikachu\" face for when basic algebra morphs into probabilities and life lessons in expected values. \ud83e\udd13"
  },
  {
    "title": "US hospital told family their daughter had checked out when in fact she'd died (theguardian.com)",
    "points": 188,
    "submitter": "howard941",
    "submit_time": "2024-08-21T20:07:48",
    "num_comments": 92,
    "comments_url": "https://news.ycombinator.com/item?id=41313740",
    "comments": [
      "xxx"
    ],
    "link": "https://www.theguardian.com/us-news/article/2024/aug/21/sacramento-hospital-patient-death-checked-out",
    "first_paragraph": "Family of Jessie Peterson, 31, spent a year searching for her before learning hospital had shipped body to storage facilityJessie Peterson\u2019s family spent a year searching for her after they were told that she had checked herself out of a California hospital against medical advice \u2013 before they learned that she had been dead all along.The 31-year-old died in the care of Mercy San Juan medical center in Sacramento in April 2023. The hospital shipped her body to a storage facility and did not inform her mother and sisters. The family only learned her fate the following April after months of trying to find her, according to a civil lawsuit against the hospital.In the lawsuit, filed earlier this month, the family described the hospital\u2019s conduct as \u201cmalicious and outrageous\u201d and accused the facility of negligence, the negligent handling of a corpse and negligent infliction of emotional distress.\u201cMercy San Juan hospital failed in its most fundamental duty to notify Jessie\u2019s family of her dea",
    "summary": "Title: **Hospital Hide-and-Seek Ends in the Coldest Way Possible**\n\nIn a thrilling twist that not even M. Night Shyamalan could cook up, Mercy San Juan Medical Center transforms from a healthcare facility into a macabre escape room, where the grand prize is finding out your loved one actually died last year. Congrats to Jessie's family for winning the worst game ever! \ud83c\udf89\ud83d\udc7b Comments section becomes a battlefield where amateur legal experts collide with professional armchair pathologists, each outdoing the other in misplacing blame and crafting conspiracy theories. Who needs informed consent when you can have informed confusion, right?"
  },
  {
    "title": "The Euphemism Treadmill (languagehat.com)",
    "points": 19,
    "submitter": "yamrzou",
    "submit_time": "2024-08-21T23:14:59",
    "num_comments": 13,
    "comments_url": "https://news.ycombinator.com/item?id=41315126",
    "comments": [
      "xxx"
    ],
    "link": "https://languagehat.com/mcwhorter-on-the-euphemism-treadmill/",
    "first_paragraph": "",
    "summary": "The latest intellectual circus to dismount at languagehat.com involves the mesmerizing \"Euphemism Treadmill,\" a term that evidently captivates the blog's devoted linguaphiles more than free donuts at a writers' workshop. In an enthralling display of semantic athleticism, the site's host valiantly aims to dissect how offensive words transform into cuddly little expressions of politically correct joy. Meanwhile, in the comments section, a typical maelstrom of armchair linguists with Ph.D.s from the University of I-Know-Better insists that <em>they've</em> known about the concept since before it was cool\u2014each armed with an arsenal of ever-so-slightly off-topic anecdotes, ready to passive-aggressively correct each other's grammar instead of addressing the actual topic. Who needs TV soap operas when you can watch language enthusiasts duke it out over perceived slights in academic armor? \ud83c\udf7f"
  },
  {
    "title": "Crypto 'pig butchering' scam wrecks bank, sends ex-CEO to prison for 24 years (cnbc.com)",
    "points": 67,
    "submitter": "pseudolus",
    "submit_time": "2024-08-21T21:52:05",
    "num_comments": 58,
    "comments_url": "https://news.ycombinator.com/item?id=41314542",
    "comments": [
      "Whenever I hear the term \"pig butchering scam\" I struggle to distinguish it from the plain term \"scam\". Like, as far as I can tell it is simply called \"pig butchering\" because of the imagery of fattening a pig before slaughtering it. But I feel like in the past we would normally just call it a \"long con\", perhaps.This sort of thing has existed for a long time, but this term makes it sound like something that is new or novel. Feels like the media is doing a bit of... \"headline engineering\", here.\n \nreply",
      "Its nothing more than marketing/rebranding. Capitalism bby! Gotta get those clicks!\n \nreply",
      "the term \"pig butchering\" originates in Chinese (\u6740\u732a\u76d8), where this particular style of scam is often targeted at overseas people via WhatsApp. So \"pig butchering\" refers specifically to these scams run from China (or elsewhere in the region by Chinese operations), and it's what the scammers themselves call it. One of the distinguishing features is that they're often run by fairly large, organized operations with paid, trafficked, or otherwise long-term staff manning the WhatsApp personas. Similar to Indian call center scams.Much like how \"419\" or \"Nigerian prince\" refers to scams coming out of a specific region.\n \nreply",
      "I still don't get it. Is pig butchering a common phrase in Chinese to refer to scams? I believe the phrase, even in its original Chinese language, was only invented recently (Wikipedia says 2016). That doesn't answer the question of why this particular phrase was invented.\n \nreply",
      "Because, this is how the scammers described themselves, in Mandarin using colorful language.\n \nreply",
      "> Much like how \"419\" or \"Nigerian prince\" refers to scams coming out of a specific region.419 refers more to a type of scam than a region. In some ways, it's almost synonymous with \"online scam\" these days.The name simply originates with Nigeria, and continues to associate with it due to the sheer scale of online scams coming out of the region.\n \nreply",
      "I think it's easy to think that the name is somehow descriptive of the mechanics of the scam (which tends to be how scams are named). But in this case it's more about the payout patterns. It is usually a relationship/investment scam, i.e. one where the victim is conned into believing they've formed a close relationship with a wealthy individual, who then offers them investment advice, pointing them towards a fake investment app.\n \nreply",
      "Its very very good to name these scams with strong language.It reminds of people to not be the 'pig' to be butchered, to know that their greed or lust could be manipulated by an organization behind that screen, and that they are a pig walking into a slaughterhouse willingly.\n \nreply",
      "Come on, I think you're just looking for things to get upset about (and not engaging with the content in any meaningful way).Assigning specific (and colorful) names to scams/cons has always been a thing. See- Pig in a poke https://en.wikipedia.org/wiki/Pig_in_a_poke- Spanish prisoner https://en.wikipedia.org/wiki/Spanish_Prisoner- Badger game https://en.wikipedia.org/wiki/Badger_game- Coin smack https://en.wikipedia.org/wiki/Coin-matching_game- Pigeon drop https://en.wikipedia.org/wiki/Pigeon_dropAnd anyway, the name seems to come from the scammers themselves in China, so I don't know why the media would be to blame.\n \nreply",
      "I'm not upset, and I don't think your examples are analogous, since they all do have a specific meaning beyond \"scam\".I think both things can be true - the term originated from Chinese and became a common term in that region for long conning people over the internet, sure. But, at the same time, the media has also latched onto its use largely for dramatic effect, even when there is no evidence the scammers are Chinese.\n \nreply"
    ],
    "link": "https://www.cnbc.com/2024/08/21/cryptocurrency-shan-hanes-pig-butchering-scam.html",
    "first_paragraph": "Credit CardsLoansBankingMortgagesInsuranceCredit MonitoringPersonal FinanceSmall BusinessTaxesHelp for Low Credit ScoresInvestingSELECTAll Credit CardsFind the Credit Card for YouBest Credit CardsBest Rewards Credit CardsBest Travel Credit CardsBest 0% APR Credit CardsBest Balance Transfer Credit CardsBest Cash Back Credit CardsBest Credit Card Welcome BonusesBest Credit Cards to Build CreditSELECTAll LoansFind the Best Personal Loan for YouBest Personal LoansBest Debt Consolidation LoansBest Loans to Refinance Credit Card DebtBest Loans with Fast FundingBest Small Personal LoansBest Large Personal LoansBest Personal Loans to Apply OnlineBest Student Loan RefinanceSELECTAll BankingFind the Savings Account for YouBest High Yield Savings AccountsBest Big Bank Savings AccountsBest Big Bank Checking AccountsBest No Fee Checking AccountsNo Overdraft Fee Checking AccountsBest Checking Account BonusesBest Money Market AccountsBest CDsBest Credit UnionsSELECTAll MortgagesBest MortgagesBest Mor",
    "summary": "In the latest display of linguistic gymnastics, a former CEO receives a 24-year vacation to prison, courtesy of a quaintly named \"Crypto 'pig butchering' scam.\" The comment section, an ever-vigilant forum of pedants and philosophers, dives deep into the semiotics of scam taxonomy. Here, sophisticates debate whether \"pig butchering\" is an innovative term or just old wine in a new bottle, while occasionally tip-toeing around the actual swindling saga that wrecked a bank. As expected, each commenter plays a crucial part in this dance of distraction\u2014engaging more with the terminology's origin than the wreckage it describes\u2014because, naturally, internet points are the real investment here. \ud83d\udc37\ud83d\udcb8"
  }
]