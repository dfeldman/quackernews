[
  {
    "title": "Cortex A73's Not-So-Infinite Reordering Capacity (chipsandcheese.com)",
    "points": 89,
    "submitter": "ingve",
    "submit_time": "2024-08-04T21:30:00",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://chipsandcheese.com/2024/08/04/cortex-a73s-not-so-infinite-reordering-capacity/",
    "first_paragraph": "",
    "summary": "In an exciting outburst of techno-babble for the dedicated few who like their semiconductors overly complicated, <em>chipsandcheese.com</em> rolls out an \"enlightening\" piece on the Cortex A73's reordering capacity. It appears that 'infinite' isn't in the vocabulary of hardware without causing a heat death of the nearest GPU. Meanwhile, commenters, erupting in their usual display of one-upmanship fueled by half-remembered Wikipedia articles and caffeine, fail to differentiate between a CPU pipeline and a plumbing pipe. CPU geeks unite \u2013 someone on the internet is wrong! \ud83e\udd13\ud83d\udcbb"
  },
  {
    "title": "Porting my JavaScript game engine to C for no reason (phoboslab.org)",
    "points": 319,
    "submitter": "zichy",
    "submit_time": "2024-08-04T15:26:34",
    "num_comments": 80,
    "comments_url": "https://news.ycombinator.com/item?id=41154135",
    "comments": [
      "> My decision to sell it was met with a lot of backlash but was successful enough to launch me into a self-sustained career.As someone who is interested in eventually freeing myself from the corporate job and diving head-first into my side projects, I would love to hear more about this aspect.For some reason the idea of trying to charge folks for the work I would normally do for the fun of it on the side is daunting to me, even though I know it could enable me to focus on doing the stuff I love full-time.\n \nreply",
      "> Many Web games were created with Impact [the game engine from the article] and it even served as the basis for some commercial cross-platform titles like Cross Code, Eliot Quest and my own Nintendo Wii-U game XType Plus.Cross Code is an excellent game. I knew that it used web tech and I was constantly amazed by how performant it was on the Nintendo Switch hardware. I would guess that this engine deserves some credit there!\n \nreply",
      "To be fair, they modified Impact _a lot_. In some of their development streams[1] you can see a heavily extended Weltmeister (Impact's level editor).Imho, that's fantastic! I love to see devs being able to adapt the engine for their particular game. Likewise, high_impact shouldn't be seen as a \u201cfeature-complete\u201d game engine, but rather as a convenient starting point.[1] https://youtu.be/4lZfnM9Ubeo?t=3215\n \nreply",
      "> To be fair, they modified Impact _a lot_.You can't polish a turd. There would've been no point in modifying the engine a bunch if you hadn't given them a useful base to work with.\n \nreply",
      "In game development this isn't true for better or worse. There is a lot of sunken cost mindset in games that we just go with what we have because we have already invested the time in it and we'll make it work by any means.\n \nreply",
      "> You can't polish a turdOf course you can. Not really sure why this still is tossed about. You just get a shiny turd with a lot less stink. I've made a career of taking people's turds and turning them into things they can now monetize (think old shitty video tape content prepped to be monetized with streaming).\n \nreply",
      "https://en.m.wikipedia.org/wiki/Dorodango\n \nreply",
      "that's just crazy bs, starting from open source code and adding specific features needed for a project is a very common strategy, doesn't mean at all that the tool wasn't good to begin with\n \nreply",
      "I think we're in violent agreement.phoboslab was downplaying their own efforts by saying that the Cross Code team customised the Impact engine a bunch. My point was that no amount of customisation can turn a bad engine into a good one (you can't polish a turd), so phoboslab definitely deserves credit for building the base engine for Cross Code.\n \nreply",
      "I think the point is that Impact is _not_ a turd because it could be polished.\n \nreply"
    ],
    "link": "https://phoboslab.org/log/2024/08/high_impact",
    "first_paragraph": "tl;dr: high_impact is small game engine for 2D action games. It's written in C, compiles to Windows, Mac and Linux as well as to WASM for the Web. It's \u201cinspired by\u201d my original Impact JavaScript game engine from 2010. The name high_impact is a nod to a time when C was considered a high level language.MIT licensed, source on github: github.com/phoboslab/high_impactIn April 2010 Steve Jobs published an open letter titled \u201cThoughts on Flash\u201d, in which he outlined the decision to not ever support Flash on iOS.Flash was a browser plugin that \u2014 until then \u2014 was so vital for the web that it was bundled with browsers and included in Windows updates. Websites like Newgrounds and Kongregate, devoted entirely to Flash Games and Animations, marked the epicenter of Internet Culture. The importance of Flash cannot be overstated: A web without Flash was a boring web.While Android supported Flash, it was a total shit show and everybody knew it. Adobe, ever reluctant to do the right thing, made no eff",
    "summary": "**Porting my JavaScript game engine to C for no reason (phoboslab.org)**\n\nToday in tech masochism, someone decided to resurrect their 2010 JavaScript game engine by transcribing it into C, because using modern tools is just too mainstream. Commenters dust off their museum-quality programming hats to debate whether \"you can't polish a turd\" applies more to the original JavaScript version or its C reincarnation \u2014 while painstakingly missing the irony that discussing software relic conversion is polishing the Internet\u2019s biggest turd: nostalgia. Meanwhile, a side-trip to discussing monetization of \u201cturds\u201d provides a delightful insight into the anxiety-fraught lives of developers, terrified at the thought of both success and obscurity. Anchor yourselves, folks \u2014 the past is apparently the future! \ud83d\ude44\ud83d\udcbb\ud83d\udd79\ufe0f"
  },
  {
    "title": "Enum class improvements for C++17, C++20 and C++23 (cppstories.com)",
    "points": 66,
    "submitter": "ibobev",
    "submit_time": "2024-08-04T20:09:37",
    "num_comments": 34,
    "comments_url": "https://news.ycombinator.com/item?id=41155996",
    "comments": [
      "enum class Handle : uint32_t { Invalid = 0 }; \n    Handle h { 42 }; // OK\n\nOne of their examples demonstrates the number one issue for me with enums, which was not fixed with `enum class`. Since values outside the range of the type are valid, you are constantly needing to check for invalid values in any function that takes an enum [class]. Ruins any attempt at \"parse, don't validate\" style in c++ and completely ruins the \"type safety\" which c++ people are always going on about.\n \nreply",
      "IMO that's the typical experience with many of the features in modern C++ standards. You read about a really neat useful thing they added, something that seems to provide a safe and practical way to overcome a shortcoming in the language. You may even get a little excited...until you try to actually use it and realize its full of new footguns and weird limitations\n \nreply",
      "Yes, you read about std::variant on a blog and think that it is a sum type. Then you try it out and realize that it's a thin (type-safe) wrapper over tagged unions that is at least three times slower and has about 5 unreadable alternatives that replace simple switch statements.Then you find out that members of a \"variant\" are not really variant members but just the individual types that can be assigned to a union. For example, assigning to a non-const reference does not work (and obviously cannot work once you realize that std::variant is just syntax sugar over a tagged union).Most of these new additions since C++11 are just leaky abstractions and wrappers.\n \nreply",
      "A few code snippets of what you see as weaknesses of std::variant may be appropriate, as I couldn't figure out your complaint. Assigning to a variant taken by non-const& works fine for me.I personally would have liked to see recursive variant types and multi-visitation (as supported by boost::variant).\n \nreply",
      "I think the comment means:    std::variant<int&, etc>\n\ndoes not work well.\n \nreply",
      "Just use    std::variant<int*, ...>\n\nReferences in C++ are just sugary pointers.\n \nreply",
      "Ohh, and to make the use of a variant to look like pattern match over type you need to copy paste some template magic.https://schneide.blog/2018/01/11/c17-the-two-line-visitor-ex...variants are a such disappointment at every step of trying to use them\n \nreply",
      "Well, apparently it was fixed with `enum class`\u2026 until it was unfixed in C++17 for unfathomable reasons. It\u2019s honestly crazy that C++ doesn\u2019t have simple exhaustiveness-checked enums. The obvious actual solution for the valid use case of deserializing an enum from an integer would be something like  template<E>\n  std::optional<E>\n  from_underlying(std::underlying_type<E>)\n    requires(std::is_enum_v<E>)\n \nreply",
      "an event loop often wants an event type enum that has defined values for internal events and then everything out of range means pass onto the users handler. There are other variations where you need to pass an enum value without caring what it mean.\n \nreply",
      "This isn't rocket science once you have sum types.    enum Event<T> {\n        System(SystemEvent),\n        User(T),\n    }\n \nreply"
    ],
    "link": "https://www.cppstories.com/2024/enum-improvements/",
    "first_paragraph": "Stay up-to-date with Modern C++\n        Last Update: 04 August 2024\nTable of ContentsThe evolution of the C++ language continues to bring powerful features that enhance code safety, readability, and maintainability. Among these improvements, we got changes and additions to enum class functionalities across C++17, C++20, and C++23. In this blog post, we\u2019ll explore these advancements, focusing on initialization improvements in C++17, the introduction of the using enum keyword in C++20, and the std::to_underlying utility in C++23.Let\u2019s go.Before diving into the enhancements, let\u2019s briefly recap what enum class is. An enum class (scoped enumeration) provides a type-safe way of defining a set of named constants. Unlike traditional (unscoped) enums, enum class does not implicitly convert to integers or other types, preventing accidental misuse. Here\u2019s a basic example:Run @Compiler ExplorerNotice the two lines near the end of the main function. You\u2019ll get compiler errors as there\u2019s no implici",
    "summary": "**C++ ENUMcalypse Now: The Never-ending \"Improvements\"**\n\nWelcome to another thrilling deep dive into the ever-convoluted world of C++ enum classes, where _modern C++_ enthusiasts eagerly slap new stickers on the same old rusty car \ud83d\ude97. The poor sods wax lyrical about achieving \"code safety\" with enum classes stretching from C++17 through C++23, only to meet the harsh reality of unfixable type-checking problems and soul-crushing compiler errors \ud83e\udd26\u200d\u2642\ufe0f. Meanwhile, the comment section becomes an enchanting mix of disillusionment and half-baked workarounds as our heroes discover variants don\u2019t play nice with references\u2014shocking, right? But don't worry, some bright spark always chimes in with a templated monster nobody besides them can understand or maintain. Keep iterating, folks\u2014it's not a bug, it's a feature! \ud83c\udf89"
  },
  {
    "title": "Show HN: Free e-book about WebGPU Programming (shi-yan.github.io)",
    "points": 28,
    "submitter": "billconan",
    "submit_time": "2024-08-04T22:56:22",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=41156872",
    "comments": [
      "This is super impressive and really exciting as I am looking to get deeper into WebGPU. Two quick notes on the playground before I dive into the content soon:1. The playground code does not seem to fully work on Safari. The code is there and selectable but the glyphs are invisible.EDIT: My Safari was just bugged, had to restart it and it works2. Is the cover of the book on the right of the playground supposed to change depending on which example you are looking at? I think it could be nice if the book contents were rendered alongside the code if the user wanted instead of the cover which does not change.\n \nreply",
      "This looks fantastic.Just the notion of a hyperlinked code-playground is fantastic. Not to mention the content of the book.And a side project at that? Wow. Congratulations and thanks for sharing.\n \nreply",
      "Great book, thanks for writing it.Just a low hanging issue. The rendering on mobile viewport especially on Firefox is not ideal. Navigation is broke and content does not scroll well.\n \nreply",
      "What's the story with WebGPU in Firefox? Why is it still not enabled by default?\n \nreply"
    ],
    "link": "https://shi-yan.github.io/webgpuunleashed/",
    "first_paragraph": "By Shi YanWelcome to \"WebGPU Unleashed\" - your gateway to the dynamic world of graphics programming. This free book will teach you graphics programming in JavaScript using WebGPU, drawing from my own learning journey.Why did I write this book? Recently, a friend asked me what his child should learn to get started with graphics programming. A few years ago, OpenGL was the go-to API for beginners, with DirectX as an alternative for those interested in game development.However, the graphics API landscape has evolved significantly in recent years. A new generation of APIs has emerged, including Vulkan, Metal, and DirectX 12. These APIs are more lightweight and performant but require more verbose code. While similar in concept, they're more fragmented than OpenGL, with some only available on specific platforms. This fragmentation often confuses beginners, leaving them unsure which API to start with.Enter WebGPU, a new graphics API conceptually similar to others but with a different goal: br",
    "summary": "Title: Show HN: Amateur Hour at WebGPU Coding Camp\n\nIn an exciting development for <em>exactly three people</em>, a free e-book on WebGPU programming has been unleashed upon the suspecting public. The \"WebGPU Unleashed\" promises to guide absolute beginners from \"What is a pixel?\" to \"Why doesn't this code work on my machine?,\" courtesy of someone who just learned it himself. Commenters trip over themselves to praise the effort, with one keen observer noting that the code doesn't actually function in Safari\u2014<em>oh, wait, never mind, just had to restart.</em> Another marvels at the revolutionary idea of having book contents next to code, clearly a suggestion on the bleeding edge of innovation. Revel in the collective debugging that unfolds like a slow-motion car crash in the comments. \ud83c\udf7f\ud83d\ude31"
  },
  {
    "title": "Jailbroke my Kindle to use it as an e-ink monitor (gist.github.com)",
    "points": 133,
    "submitter": "adtac",
    "submit_time": "2024-08-04T16:08:25",
    "num_comments": 62,
    "comments_url": "https://news.ycombinator.com/item?id=41154410",
    "comments": [
      "Perfect demonstration video, thanks for that.\n \nreply",
      "What's unclear here is the refresh rate, but knowing the Kindle(s) this is hardly faster than 0.5fps\n \nreply",
      "updated the gist: I'm getting close to 3-4 frames per second! this is only possible because of the partial screen refreshes since most pixels don't change between consecutive frames\n \nreply",
      "Oh wow. That's nice!\nYes, if it does partial refreshes then the refresh rate might be way faster than I expected.Awesome!\n \nreply",
      "Here's my old Kindle Touch 2 running a hacky Android 4 port attempt and a Game Boy emulator: https://i.imgur.com/m7ZZ1Xm.mp4  I'd say more like 2 - 3 fps.  Not sure why there are random black lines.  Display driver doesn't handle the demand of constant update very well.  I normally use it as an e-ink picture frame.\n \nreply",
      "Independent of the methods indicated here (screen capture + imagemagick conversion), there's the underlying question of E-innk hardware capabilities.  I can speak to the latter.E-Ink screens are usually capable of a number of different refresh / display modes, which trade higher-quality visual appearance (crispness, greyscale, ghosting) for slower refresh.Refresh rates typically range from ~2-4 Hz at highest quality to 16--60 Hz at lower quality, but faster-updating modes.  For most E-ink devices I've seen there are typically four modes, \"Normal/Regal\" (highest quality), \"Speed\", \"A2\", and \"X-Mode\" (fastest refresh).\"Normal\" is best for reading static text.  \"Speed\" is sufficient for terminal-based sessions (I have Termux installed on my Onyx BOOX tablet), and most interactive apps (e.g., Web browsers, Podcast apps).  I find little practical distinction between \"Speed\" and \"A2\".  X-Mode does show considerale ghosting, but is indeed capable of video playback.Typically it's also possible to set the full-refresh interval (now many repaints are premitted between full refreshes which clear ghosting but give a distinct \"flash\" update.E-ink has a number of compromises, but is quite usable.  Apps which are designed with its capabilities and limitations in mind are much better suited.  Mostly that involves full-screen pagination of content rather than scrolling.  Given the ubiquitous use of touch-based scrolling in most Mobile applications, this can be somewhat frustrating.  I tend to use dedicated e-ink apps (such as Onyx's own NeoReader book reader), apps tuned for E-ink such as Einkbro, a Web browser, or terminal-based apps which work well in a text-based context.\n \nreply",
      "It looks like it has the ability to do partial refresh\n \nreply",
      "For me, that would be fine. It's common to have some reference or other piece of information that I want handy but doesn't change much.\n \nreply",
      "This would be far more interesting if you shared how, and did it on a platform that wasn't meant for short form content.\n \nreply",
      "Writing a quick Github gist, sorry haha, I'll post a link here in a few minutes.Edit: https://gist.github.com/adtac/eb639d3c707b55a28f0ee9a420aa7e...\n \nreply"
    ],
    "link": "https://gist.github.com/adtac/eb639d3c707b55a28f0ee9a420aa7e0c",
    "first_paragraph": "\n        Instantly share code, notes, and snippets.\n      demo: https://x.com/adtac_/status/1820127470613622950 (3.5 fps, Paperwhite 3)mobileread.com is your best resource here, follow the instructions from the LanguageBreak threadI didn't really follow the LanguageBreak instructions because I didn't care about most of the features + I was curious to do it myself, but the LanguageBreak github repo was invaluable for debuggingit doesn't matter how you jailbreak your device as long as you get to a root shell somehowI wrote a Go program to receive files on port 8000 and then invoke eips, which is Kindle's built-in utility to draw images on the screenfor example, if the Go program received a JPG file and saved it under /tmp/img.jpg, the following command would draw the image with a partial update (full update looks awful):read the eips wiki for details on what the flags meanyou may want to clear the screen with a eips -c before the first frameunfortunately I lost the Go source code, but it",
    "summary": "### Hacking the Unhackable: A Tale of E-ink Glory\n\nIn what appears to be a daring act of technological rebellion, a lone coder embarks on a quest to transform a humble Kindle into an <em>e-ink monitor</em>. Watch the gripping 3.5 fps demo that's remarkably achieving, quite literally, nothing faster than the slow motion feature on your smartphone. Amidst a sea of comments\u2014ranging from na\u00efve enthusiasm to poignant sobs for a vanished Go source code\u2014the Internet once again proves its aptitude for celebrating mediocre achievements with spectacular fervor. \ud83d\ude80\ud83d\udcda\ud83d\udca4 Who knew watching paint dry might have just found its digital rival?"
  },
  {
    "title": "WhenFS: Calender Is Now a File System (github.com/lvkv)",
    "points": 198,
    "submitter": "3ul3r",
    "submit_time": "2024-08-04T16:35:36",
    "num_comments": 40,
    "comments_url": "https://news.ycombinator.com/item?id=41154616",
    "comments": [
      "> Why Did You Do This?> I used this project as an opportunity to learn about Rust and FUSE file systems. I also think it's hilarious.> Visitors interested in the code should note that this is \n an irredeemably messy codebase\u2014it's full of hacks, unidiomatic code, and wildly poor design decisions.> However, visitors should also \nnote that that's okay. The \nbest way to learn something \nnew is to try it out for \nyourself\u2014and creating a mess \nis a vital part of that \nprocess.I absolutely love this sentiment. Why do this? Because it\u2019s fun. And messy. And sometimes, that\u2019s okay. Not everything needs to be a product\u2026 sometimes it\u2019s enough to do something because you can\u2026 or want to\u2026 or because $RANDOM reason. I\u2019m very grateful to the author and whoever decided to submit it today.\n \nreply",
      "As a college student trying to figure out where I wanted to go next (industry vs academia) I had an epiphany that there was intrinsic value in doing things. Even things that were neither novel (academia), profitable (industry), nor impactful (nonprofits).While my career has found a balance between impact and financial sustainability, I have a special place in my heart for projects that are otherwise unnecessary but happen just because it brings the creator joy.\n \nreply",
      "Author here. Those are kind words! I\u2019d like to add the last part of that quote:> The page you're on right now is my mess. Now go create yours!\n \nreply",
      "Aw, that's not what I hoped it would be. An actual file-based calendar UI is a neat idea, where you can (for instance) echo into a file to create a calendar event on the command line.\n \nreply",
      "There's a standard file type for this already: https://en.wikipedia.org/wiki/ICalendarIt would be cool to see a filesystem layer present a tree of ICS files where editing one also updated your various API-based web calendars.\n \nreply",
      "That's what I hoped this would be!\n \nreply",
      "This is completely me talking out my but:Could one use the txtai python libe to be told to train on the temporal relationships between events that pass through it as an fastAPI endpoint to a calender... then as the events head to whatever is holding them in the calendar - txtai is training and indexing, first on temporal notes, then on context. so you ould easly as it to give you a\"Show all the social events that happen on wednesdays with a dress code\"(but it learns the nature of certain events, when they occur and social clues around what /who /wheres are typically occuring...\"This venue typically holds events on W F S and the clientelle is typicalaly this, attendance that, rsvps x, cost ~$$\"\n \nreply",
      "Same here. I think that would be a terrific idea.$ cat /cal/2024/08/04/events\n \nreply",
      "Good tab expansion in a very virtual filesystem would work wonders:    $ cat /cal/nexttues<TAB>\n    $ cat /cal/2024/08/13/\n\n    $ cat /cal/nextweek<TAB>\n    $ cat /cal/2024/w32/\n\nI seem to recall that I had lunch with somebody last July:    $ grep -ir somebody /cal/2023/07/\n    /cal/2023/07/12/events:13:00-14:00 Lunch with somebody\n \nreply",
      "the most amazing feature of the Google calendar web UI that has since been dropped was a way to schedule events with a human message - \"30 meeting with Bob next Tuesday at 10\", rather than clicking a bunch of buttons in a UI.\n \nreply"
    ],
    "link": "https://github.com/lvkv/whenfs",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        A FUSE Filesystem for your Google calendar\n      WhenFS turns your Google Calendar into a FUSE filesystem. It whimsically supports the following features:This is what the Mona Lisa looks like when uploaded to Google Calendar:\n\n .jpg\n\n  \u2b07\ufe0f\nThe image above contains all the image's data split up across hundreds of tiny calendar event descriptions.\nThe entire filesystem\u2014files, directories, reads, writes and more\u2014is all based on manipulating these Google Calendar events.WhenFS is an example of a harder drive\u2014a hard drive we didn't want or need.WhenFS can mount existing WhenFS-ed Google Calendars when given the calendar's ID and ID of the file system recovery calendar event:WhenFS can transfer a 3 KiB file to Google Calendar in just over 7 seconds\u2014a blistering upload speed of 400 bytes per second:WhenFS operations start at the FUSE file s",
    "summary": "WhenFS: Where Needless Complexity Meets Artisanal Code Messes\n\nIn an act of sheer, unadulterated <em>why-the-hell-not</em>, a brave coder turns Google Calendar into a filesystem, apparently because managing plain ol' events is just too mainstream. The project, a crashed fusion of calendar \"art\" and filesystem logic, is as useful as a chocolate teapot but twice as slow, with \"blistering\" speeds akin to etching your data onto stone tablets. Meanwhile, the commenters, in their eternal quest for meaning in a meaningless code jamboree, stumble upon profound realizations about personal growth through messy coding, even suggesting double-down ideas that might just break the internet\u2014or at least Google Calendar. They wax poetic about the lost arts of simplicity, yet can't help but bubble over with excitement about cramming more round pegs of functionality into the square hole of this already convoluted tool. \ud83d\udd87\ufe0f\ud83d\udcc5"
  },
  {
    "title": "Romram: Using QSPI RAM with RP2040's SSI in read-write mode (dmitry.gr)",
    "points": 33,
    "submitter": "fanf2",
    "submit_time": "2024-08-04T20:42:03",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=41156194",
    "comments": [
      "I recently worked on a product (Realtek 200MHz MCU + integraiton wifi/ble) that had a similar setup - QSPI connected PSRAM and QSPI connected Flash (with read/write).The PSRAM had a reasonable size page cache in the chip that made this memory quite responsive from a CPU perspective - a few rare cache flushes were needed, but things like DMA and bus masters (onboard radios etc..) were completely coherent and it made development much easier to manage.My takeaway was that PSRAM was surprisingly capable (with the right can of hardware controller in place). Kudos to Realtek for getting the hardware to work without a thousand impossible to debug CPU lock ups...\n \nreply",
      "I think the successor to the RP2040 needs to features to absolutely clobber the market:1. A true, ulta-super-duper-low-power mode, and\n2. Proper external memory support.\n \nreply",
      "We'll probably find out soon-ish, they dropped the name in their last investors report and said it's coming in the second half of the year. It's going to be the RP235x, which going by the naming scheme they established would be two Cortex-M3 cores with around 512k of SRAM and \"X\" onboard flash, whatever that means, as opposed to \"0\" flash (none) on the RP2040. Maybe multiple SKUs with different amounts of onboard flash this time?\n \nreply"
    ],
    "link": "http://dmitry.gr/?r=06.%20Thoughts&proj=10.%20RomRam",
    "first_paragraph": "Can you use 8MB of external RAM with RP2040, memory mapped, like real memory? I call this ROMRAMRP2040 is a rather versatile chip. One of its most convenient features is support for flash XIP via SSI. SSI is quite configurable and can support all sorts of flash chips. It is, of course, not entirely bug free (try to configure it for SPI commands and QPI addresses, for example, see how that goes), but a large memory with a fast cache is super nice. There is only one issue: RP2040's XIP mode only supports read and execute accesses not writes. This makes sense given its purpose and what it was designed for, but who cares about that? COULD we attach a RAM to it? Well, actually this is not too hard. QSPI SRAM chips exist, made by ISSI, APMEMORY, and (my favourite) VilsionTech. They talk more or less the same protocol, and getting SSI to talk to them is trivial. This is useless... You can indeed manually issue read and write accesses to it, but it is not memory-mapped and thus useless. Could ",
    "summary": "**Tech Hobbyists Rediscover Memory Management**: In a dazzling display of unnecessary complexity, a desperate hacker insists on adding 8MB of external RAM to an RP2040 chip, as if it were somehow making the tiny chip dream bigger. \"Watch me use complicated tech terms to make sticking extra RAM on this chip sound vital and innovative,\" he exclaims, sliding a QSPI RAM chip onto the board like a square peg into a round hole. Meanwhile, the comment section becomes a battleground for others, bragging about similar Frankenstein-like tech mashups that probably also shouldn't exist. Sarcasm and self-congratulation ensue as everyone forgets what they were trying to achieve in the first place. \ud83e\udd13\ud83d\udd27\ud83d\udca1"
  },
  {
    "title": "Puget Systems' Perspective on Intel CPU Instability Issues (pugetsystems.com)",
    "points": 54,
    "submitter": "layer8",
    "submit_time": "2024-08-04T20:27:50",
    "num_comments": 19,
    "comments_url": "https://news.ycombinator.com/item?id=41156104",
    "comments": [
      "Sorry, unable to believe: 2-4% failure rate for CPU's?That's for detected/known failures: what about random, unable-to-reproduce, hardly noticed the data skip failures?Have I been living in a fantasy bubble where CPU's do exactly what you asked of them (and errors come from not holding it right)?\n \nreply",
      "This is consistent with their report for 2019-2021: https://www.pugetsystems.com/labs/articles/most-reliable-pc-...Apparently it was much better in 2018: https://www.pugetsystems.com/labs/articles/most-reliable-pc-...On the other hand, 2011 did show 1.5%:\nhttps://www.pugetsystems.com/labs/articles/most-reliable-pc-...GPU failure rates also weren't great 10-15 years ago, in particular for AMD: https://www.pugetsystems.com/labs/articles/video-card-failur...\n \nreply",
      "4% seems very high to me; but CPU errors happen with relative frequency, and design mistakes are common.If you ever run \u201ccat /proc/cpuinfo\u201d on, say, Skylake - Linux will happily tell you it has 5-6 workarounds active for hardware mistakes.CPUs are still pretty darn reliable. Think about how many GHz your CPU runs at, multiplied many instructions per cycle there are, and then calculate the failure rate if there was just 1 mistake per minute. Nothing on earth would compare.\n \nreply",
      "Mechanical hard drives are absolutely on the same, or higher, level of reliability. It's mind boggling what we can achieve when we really focus on quality outcomes.\n \nreply",
      "Hm, once again this lacks numbers on variation within a generation. How much applies to K vs non-K processors? How much between i3, i5, i7, and i9? Does it affect low-end 13th-generation-branded Alder Lake?\n \nreply",
      "> Starting with 10th Gen, we have only sold the top 2 SKUs (XX700K and XX900K) in volume, which gives us a nice clean set of data.\n \nreply",
      "Should Intel be telling you these things?\n \nreply",
      "I read this article yesterday and thought it was interesting but would like a bit more data. Most importantly, the first plot shows similar failures per month of 11th and 14th Gen, but the final plot shows that failure rates of 11th Gen was far higher (about double). Does this mean there are about double the number of systems built by Puget with the 14th Gen than they had of 11th Gen? I'd also love to see the first two plots with AMD data.\n \nreply",
      "I've had the impression that while this problem is definitely real, it's also suffering from very bad media sensationalism (both mainstream and social) and some very emotional chest thumping a la Boeing.Puget's numbers kind of vindicate that by showing 11th gen was even worse and AMD clearly benefitted from their \"underdog\", \"cult favorite\" status.It would be nice if we could be rid of most of this noise so we could get down to what truly matters.\n \nreply",
      "The problem isn't just the propaganda fight, it's that it's basically a heisenbug. Intel, a few months ago, blamed these very failures on motherboard manufacturers and claimed they were overlooking and the failures at that time were their fault.Unless you do a very thorough timeline, you might be confused. But go dig into the last 6 months and you'll see that Intel has either no idea or are absolutely muddying the waters. Neither of these cognitive conclusions should result in Intel looking anything but half rate purveyors of silicon.\n \nreply"
    ],
    "link": "https://www.pugetsystems.com/blog/2024/08/02/puget-systems-perspective-on-intel-cpu-instability-issues/",
    "first_paragraph": "",
    "summary": "<h3>Puget Systems' Perspective on Intel CPU Instability Issues: Where Statistics Meet Meltdowns</h3>\n\nIn an exhilarating expos\u00e9 ripped straight from the pages of someone's lab notebook, <em>Puget Systems</em> unveils the shocking reality that a whole 2-4% of Intel CPUs could potentially fail, sending shockwaves through a community that previously thought CPU issues were solely the result of not using them correctly. Comment sections ignite with amateur statisticians and seasoned skeptics alike; one genius calculates that if CPUs were any less reliable, \"nothing on earth would compare\", clearly forgetting about their monthly Comcast outage. Between fervent comparisons to the unsettling reliability of mechanical hard drives and calls for Intel to 'fess up, it's a whirlwind tour of semiconductor soap opera. Finally, everyone agrees on one thing: CPUs fail just often enough to keep online forums buzzing and conspiracy theories well-fed. \ud83e\udd16\ud83d\udcbb\ud83d\udd25"
  },
  {
    "title": "Buster: Captcha Solver for Humans (github.com/dessant)",
    "points": 73,
    "submitter": "thunderbong",
    "submit_time": "2024-08-04T17:47:18",
    "num_comments": 32,
    "comments_url": "https://news.ycombinator.com/item?id=41155164",
    "comments": [
      "A separate concern I have is that Web sites running ReCaptcha often require leaking privacy-invasive information to Google, in the course of using the site.Not only does Google presumably usually know exactly who you are when you visit that site, but even if you normally block other Google hidden Web trackers, you can't block the ReCaptcha tracker, so in some cases Google can have a very good idea of what you do on the site.So, while this browser extension might relieve some of the visible annoyance, it doesn't relieve the more insidious problem.\n \nreply",
      "This is what I call the \"captcha triangle\".You can have a very hard captcha that bots cannot solve, but that discriminates against the disabled. This gives you privacy and abuse-prevention, but not accessibility. You can have a very easy captcha (or possibly multiple alternative challenges), but bots can solve those easily. This gives you accessibility and privacy, but not abuse prevention. You can mostly have easy, accessible captchas, but rely on invasive tracking and fingerprinting, this gives you accessibility and abuse-prevention, but not privacy. There's no way to have all three.As AI gets better, traditional captchas get more and more useless, and you need more and more tracking. We'll probably reach a point where there's no task that computers can easily verify but AIs can't easily perform, except being \"vouched for\" by a company that the website owner trusts.\n \nreply",
      "Vouching is onerous in some ways, but on the plus side it can be done anonymously so the vouching company doesn't know which sites you're visiting.Examples being privacy pass and private access tokens, though I haven't seen much mention of them recently.\n \nreply",
      "Most captchas don't even come off as actual abuse protection, but rather seem to exist because someone wanted to check some box for more cargo cult \"security\". I can understand captchas being on login pages, ideally only after a few failed logins. But most usage seems to involve gating simple pages, often on sites that should want to be publishing their data far and wide (like ecommerce). And if your site implementation is that bloated that serving what should be static pages creates significant load, you should work on fixing that rather than adding band-aids that make your site even less usable.\n \nreply",
      "Have you ever run a website or online service? Whenever I've put something online, there's inevitably at least one person out there who's bored and unemployed with technical chops, who makes it their full time mission to abuse it for months until I figure out how to outsmart them. The Internet is full of these micro-tyrants and I never see anyone complaining about them. Most operators just throw their hands up in the air and depend on protection services like reCAPTCHA to make the pain go away, which always want something in return. Google is like what Paul Erdos called the \"Supreme Fascist\" (SF) for that reason. Every time you do something bad on the web, Google gains a little more power.\n \nreply",
      "Users are punished if Google is unaware of them. I built an iOS app for a major brand but the web view would load with no cookies in a sandbox, and we realized after roll out that all users were needing to solve 10+ hard CAPTCHA challenges to be let through, as Google was unfamiliar with the users. You\u2019ll get a similar experience loading over a VPN. We removed it.It\u2019s easy to why device attestation is so alluring to these companies. Anonymity and bots look alike.\n \nreply",
      "It's time to build for the bots instead of fighting them.\n \nreply",
      "i didnt even think of that but makes sense. valuable pov.either way im sure most people are just annoyed with the gate code then they are with the tracking and would take the cookie everytime. and i feel like this is similar to many things especially with google.but people just would rather just believe these companies are against them haha. kinda silly imo\n \nreply",
      "I hate the webassembly ones which force you out of \"Safer\" mode to pass on TBB.  I get the bad feeling they fingerprint hardware which is why they're in webassembly.\n \nreply",
      "I encounter recaptcha a lot and often it violates the gdpr. I believe this to be one of the positives of the gdpr. Things usually go as follows:- something gets abused- a solution is needed to stop the abuse- the 'techies' implement recaptcha and they are not aware of the regulatory implications- it's such a small thing that it often get's overlooked in internal auditsGoogle fonts from their cdn is another.Landing page Youtube videos is another but a little bit more well known.The user should be warned so they can decide if they want to give Google everything; how else would they know?\n \nreply"
    ],
    "link": "https://github.com/dessant/buster",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Captcha solver extension for humans, available for Chrome, Edge and Firefox\n      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe continued development of Buster is made possible\nthanks to the support of awesome backers. If you'd like to join them,\nplease consider contributing with\nPatreon,\nPayPal or\nBitcoin.Buster is a browser extension which helps you to solve difficult CAPTCHAs\nby completing reCAPTCHA audio challenges using speech recognition.\nChallenges are solved by clicking on the extension button at the bottom\nof the reCAPTCHA widget.Obviously, this blue part here is the land.\u2014 Byron \"Buster\" Bluth, reading a mapreCAPTCHA challenges remain a considerable burden on the web,\ndelaying and often blocking our access to services and information\ndepending on our physical and cognitive abilities, our social\nand cultural background, and the devices or network",
    "summary": "**Buster: Savior of Humanity or Just Another CAPTCHA Pest?**\n\nIn a staggering feat of near-human intelligence, the Buster extension allows users, who may not know the difference between AI and a toaster, to bypass reCAPTCHA's annoying audio challenges. Surely, the back-patting caffeine-fueled mavericks behind this think they're rescuing us from the evil clutches of CAPTCHA, supported by their *benevolent* backers on Patreon and PayPal. Commenters, neck-deep in their existential online dread, worry about privacy and the persistent Google bogeyman, seemingly unaware that they lost that battle the moment they signed up for their first free email account. Meanwhile, those fighting on the front lines of the internet lament the rise of \"micro-tyrants\" ruining everything, as if the web is just a grand stage for their paranoid tech soap operas. \ud83e\udd16\ud83d\udee1\ufe0f"
  },
  {
    "title": "Qub \u2013 a framework for building websites with QBasic (github.com/jamonholmgren)",
    "points": 24,
    "submitter": "bcjordan",
    "submit_time": "2024-08-04T20:46:15",
    "num_comments": 8,
    "comments_url": "https://news.ycombinator.com/item?id=41156222",
    "comments": [
      "And I thought \"install from curl\" was bad. Now we run from curl, every time?  alias qub=\"source <(curl -sSL https://raw.githubusercontent.com/jamonholmgren/qub/main/src/cli.sh)\"\n \nreply",
      "Shell as a Service. It's the new frontier in IT outsourcing , ready for the next repetition of the thin client fad.\n \nreply",
      "Getting ideas...\n \nreply",
      "I love it. I too started programming with QBasic in the 90s. I spent many hours modifying (and breaking) the code for bananas.bas and nibbles.bas to give myself all kinds of superpowers.I haven't touched QB in decades but I'm glad someone did and had fun working on it.\n \nreply",
      "GORILLA.BAS, no?That being said, exactly the same here. My first program that was ever used by anyone other than me was a National Lottery number picker for my grandad :) saved him 20 minutes a week...\n \nreply",
      "You're right! It was gorilla.bas, cheers!\n \nreply",
      "I know this project is just for fun, but I did once work on a website backend that genuinely used Visual Basic 6 to generate dynamic webpages. This was not a small, internal product either, and it was in this century. I think they moved it all to .NET eventually, but for a while it was Frankensteined out of .NET and VB6.The main thing I remember was trying to debug questionnaire functionality and getting very nearly nowhere: it was an entire questionnaire engine implemented in VB6, which was probably why it hadn't been ported to .NET yet. I'm sure PHP of the same vintage would have been equally gnarly, mind you.\n \nreply",
      "alias qub=\"source <(curl -sSL https://raw.githubusercontent.com/jamonholmgren/qub/main/src/cli.sh)\"\n\na bit concerning to hot alias a simple command to remote shell execution\n \nreply"
    ],
    "link": "https://github.com/jamonholmgren/qub",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Qub is a CLI and QB64 web framework for building websites with QBasic. Star this repo!\n      Qub (pronounced \"cube\") is a CLI that generates a web server and framework for building websites in QB64 -- a more modern variant of QBasic.(Note: macOS & Linux only)To get started, set up your qub alias first:Now, you should be able to run the CLI:Windows Support: Qub has only been tested on macOS and Linux. It might work on Windows WSL (Windows Subsystem for Linux) or Git Bash on Windows. If you want to help test and make it run on Windows, please open an issue or PR!To create a website, run qub create and follow the prompts:It'll ask you for your domain name (e.g. jamon.dev) which doubles as your project's folder name. It will also ask if you want to install QB64 (I recommend you do).When done, you can CD into the new folder and run ./bin",
    "summary": "**Qub: Nostalgia As A Service**\nAh, nostalgia! In a daring attempt to drag QBasic kicking and screaming into the modern age, Github's own Jamon Holmgren presents <i>Qub</i>, a tool that full-heartedly believes the 90s didn't end. This CLI gem, exclusive to macOS & Linux, asserts that programming peaked with DOS-based IDEs and demands: \"Star this repo!\" as if squeezing blood from a stone. Meanwhile, the peanut gallery reminisces over bananas.bas and gorilla.bas, with comments shining like badges of honor from a forgotten digital age. Who knew web development could be a retro gaming console? \ud83d\ude02\ud83d\udc7e"
  },
  {
    "title": "Dispatches from the farm upstate (lcamtuf.substack.com)",
    "points": 58,
    "submitter": "walterbell",
    "submit_time": "2024-08-04T17:55:25",
    "num_comments": 15,
    "comments_url": "https://news.ycombinator.com/item?id=41155214",
    "comments": [
      "Interesting that this is a place that is 10 minutes drive from a nearby town and yet requires all year round maintenance. \nAt least in Alaska the government gives citizens tax incentives for simply living there but looks like owning a rural property in US nowadays is very far from homesteading of yesteryear- you have to pay taxes and pretty much need some additional source of income just to get by.\n \nreply",
      "To me it sounds like the \"all year round maintenance\" is mostly because they've got a lot of land.You've got to get the snow off your driveway no matter where you live. If you buy a property with half mile of driveway, you're going to have to shift a lot of snow.You've got to maintain the trees on your property, no matter where you live. If you buy 20,000 trees you're going to have to maintain a lot of trees. And so on.\n \nreply",
      "In areas with higher population density, land values are driven by recreation and are thousands of dollars an acre. Not expensive compared to urban land, but a far cry from working the land to earn it.\n \nreply",
      "I agree with both of you, of course, but this means that in order to just break even you have to do something like tourism or similar just to cover your own costs of taxes and plowing.\n \nreply",
      "> thousands of dollars an acreDid you mean per square foot?\n \nreply",
      "Well, they did mention Alaska and I did mention that I wasn't talking about urban land. Lots of room between those.I was thinking of something like rural land in counties that aren't essentially empty (rather than land near LA or whatever).\n \nreply",
      "such a pleasure to read. I've followed lcamtuf's work since the 90s and also now live rurally. this week's project was figuring out how to fell a large dead tree without being killed by its upper limbs breaking from the pressure release, and working on some home sigint tools for doing rural property security, but mostly to justify upgrading the rtl-sdr to an ettus. country life isn't for everyone, but you see the impacts of tech, economics, and cultural change more clearly in the country because they're more stark against the backdrop of natural rhythms and things that change at the pace of seasons.\n \nreply",
      "Same and actually had the pleasure of working with lcamtuf  briefly about ten years ago.>Country life isn't for everyone, but you see the impacts of tech, economics, and cultural change more clearly in the country because they're more stark against the backdrop of natural rhythms and things that change at the pace of seasons.Couldn't agree more.  Aside from a few short stints I've lived in rural locations my entire life and one of the things that encouraged me about the major shift to remote work is that the folks that are shaping so many of these factors also have a better opportunity to experience it first hand.>working on some home sigint tools for doing rural property security, but mostly to justify upgrading the rtl-sdr to an ettusNever did upgrade to the ettus but spent lots of time ogling their products.  My 'project I'll never do but it's fun to think about' lately has been figuring out a way to watch the behavior of the uplink beam from my starlink with some kind of mesh of detectors/receivers.  Seems very doable but the dopamine of finding a viable way will probably be enough for me to let go of it haha.\n \nreply",
      "The banned gas equipment is going to cause a lot of fun. PG&E cant maintain the tree canopy as it is.\n \nreply",
      "This when young the city was fun but when older than mattered less thing does not match with my own experience at all.  Having an extended family and running a service business I have known quite a few people getting old and aging into their final years.  Having people around and things to do can be critical for maintaining quality of life.  It is really common for older people in rural locations to become isolated an unable to access the things that once brought joy to their lives.  Seems like a potentially interesting contrast to call out.\n \nreply"
    ],
    "link": "https://lcamtuf.substack.com/p/dispatches-from-the-farm-upstate",
    "first_paragraph": "",
    "summary": "In the latest riveting installment of \"rural myths and dreams,\" we learn that owning a picturesque farm just a stone's throw from civilization is not the bucolic paradise one might imagine\u2014turns out it's more like a full-time money pit. \ud83d\ude9c\ud83d\udcb8 Commenters dive deep into a profound analysis, debating the nuances of snow removal and tree maintenance like it's groundbreaking science. One keen observer suggests turning your backyard into a tourist trap to keep from drowning in tax bills and plowing expenses. Meanwhile, another interjects a reality check about the harsh economics of acre versus square foot\u2014a daring leap in agricultural economics. Who knew rural life could be such a fiscal thriller?"
  },
  {
    "title": "Evaluating a class of infinite sums in closed form (johndcook.com)",
    "points": 119,
    "submitter": "beefman",
    "submit_time": "2024-08-04T00:20:10",
    "num_comments": 28,
    "comments_url": "https://news.ycombinator.com/item?id=41150249",
    "comments": [
      "Another way to get to the same result is to use \"Feynman's Trick\" of differentiating inside a sum:Consider the function f(x) = Sum_{n=1}^\\infty c^(-xn)Then differentiate this k times. Each time you pull down a factor of n (as well as a log(c), but that's just a constant). So, the sum you're looking for is related to the kth derivative of this function.Now, fortunately this function can be evaluated explicitly since it's just a geometric series: it's 1 / (c^x - 1) -- note that the sum starts at 1 and not 0. Then it's just a matter of calculating a bunch of derivatives of this function, keeping track of factors of log(c) etc. and then evaluating it at x = 1 at the very end. Very labor intensive, but (in my opinion) less mysterious than the approach shown here (although, of course the polylogarithm function is precisely this tower of derivatives for negative integer values).\n \nreply",
      "Instead of differentiating c^(-xn) w.r.t. x to pull down factors of n (and inconvenient logarithms of c), you can use (z d/dz) z^n = n z^n to pull down factors of n with no inconvenient logarithms. Then you can set z=1/2 at the end to get the desired summand here. This approach makes it more obvious that the answer will be rational.This is effectively what OP does, but it is phrased there in terms of properties of the Li function, which makes it seem a little more exotic than thinking just in terms of differentiating power functions.\n \nreply",
      "To be honest, the whole use of the Li function before defining it made me stop reading.\n \nreply",
      "And since it's discrete, you can use finite differences.  a =  sum_1 n^3 / 2^n \n    = sum_0 (n+1)^3 / 2^(n+1)\n    =  (1/2) (1 + sum_1 (3n^2 + 3n + 1)/2^n)\n    \n  b = sum_1 n^2 / 2^n  \n    = (1/2) (1+ b + sum_1 (2n +1)/2^n)\n\n  c = sum_1 n / 2^n  \n    = (1/2) (1+ c + sum_1  1 / 2^n)\n\n  d =  sum_1 1 / 2^n  \n    = sum_0 1 / 2^(n+1)\n    = (1/2) (1 + d)\n    = 1\n\n\n  d = 1               =             1\n  c = d +  1          = 1+1      =  2\n  b = d + 2c +  1     = 1+1+4    =  6\n  a = d + 3c + 3b + 1 = 1+1+6+18 = 26\n\n\n\n\nIn general,  f_k = sum n^k/2^n \n      = (*k*th row of Pascal's triangle)\u2022(f_0, ..., f_{k-1},1)\n\nhttps://oeis.org/A000629Number of necklaces of partitions of n+1 labeled beads.\n \nreply",
      "Yeah, differentiating these infinite sums to pull down polynomial factors is a familiar trick.It happens in basic moment generating function manipulations (e.g., higher moments of random variables). Or from z-transforms in signal processing (z transforms of integrals or derivatives). And (a little less obvious, but still the same) from Fourier analysis.The concept applies to any moment generating function, z-transform, whatever. It\u2019s clearest for the geometric distribution, where the distribution itself has the geometric form (https://mathworld.wolfram.com/GeometricDistribution.html, around equation 6).I agree that the Li function seems like a detour, but maybe it can make some of the manipulation easier?\n \nreply",
      "This is pretty neat! I was toying around with the problem and it appears you can use generating functions to derive the same sequence of operations. If you start with:  G(x) = 1 + x + x^2 + ... = 1/(1-x)\n\nThe coefficients of this polynomial is the sequence (0^0, 1^0, 2^0, ...)If you take the derivative of G(x) and multiply by x you get:  x * G'(x) = x + 2*x^2 + 3*x^3 + ... = x * d/dx 1/(1-x) = x/(1-x)^2\n\nThe coefficients of this polynomial is the sequence (0^1, 1^1, 2^1, ...). If you repeat this step, you get a polynomial whose coefficients are (0^2, 1^2, 2^2, ...) and if you do this operation N times, you can get a closed form of a polynomial whose coefficients are (0^N, 1^N, 2^N, ...).The infinite sum converges for -1 < x < 1. If you set x=1/c, you get the infinite sum  0^N/c^0 + 1^N/c^1 + 2^N/c^2 + ...\n\nwhich is exactly the sum we are trying to solve for. This means you solve any infinite sum of the form given by taking the derivative of 1/(1-x) N times while multiplying by x each time. Then plug in x=1/c at the end.\n \nreply",
      "Doing it with generating functions is essentially the same as what is done in the post under a different name.\n \nreply",
      "I found it useful to walk through evaluation of a few elementary instances of this class using simpler methods, to put the main result in perspective.  Specifically, replace the initial 3 exponent with 0 or 1.If the exponent is 0, then you have the sum 1/2 + 1/4 + 1/8 + 1/16 + 1/32 + ..., from Zeno's most famous paradox (https://en.wikipedia.org/wiki/Zeno%27s_paradoxes ).  If you are fortunate, you previously learned that this converges to 1, and played around with this enough in your head to have a solid understanding of why.  If you are less fortunate, I recommend pausing to digest this result.Then, if the exponent is 1, you have the sum 1/2 + 2/4 + 3/8 + 4/16 + 5/32 + ... .What happens if we subtract (1/2 + 1/4 + 1/8 + 1/16 + 1/32 + ...) from it?  We have (1/4 + 2/8 + 3/16 + 4/32 + ...) left over.Then, if we subtract (1/4 + 1/8 + 1/16 + 1/32 + ...) from the latter, we still have (1/8 + 2/16 + 3/32 + ...) left over.Then, if we subtract (1/8 + 1/16 + 1/32 + ...) from the latter, we still have (1/16 + 2/32 + ...) left over.Continuing in this fashion, we end up subtracting off(1/2 + 1/4 + 1/8 + 1/16 + 1/32 + ...)\n+ (1/4 + 1/8 + 1/16 + 1/32 + ...)\n+ (1/8 + 1/16 + 1/32 + ...)\n+ (1/16 + 1/32 + ...)\n+ (1/32 + ...)\n+ ...and this converges to the main sum.  And, from the exponent-0 result, we know this is just 1 + 1/2 + 1/4 + 1/8 + 1/16 + ...\n \nreply",
      "Aside: it looks like the c=2 case generates only integers, and it's an OEIS sequence which shows up in a lot of combinatorics problems,https://oeis.org/A076726 (\"\nA076726 | a(n) = Sum_{k>=0} k^n/2^k\")https://oeis.org/A000629 (\"A000629 | Number of necklaces of partitions of n+1 labeled beads\")\n \nreply",
      "Hi in the 3rd equation you meant to write Li_s(z) but you wrote x instead.That was an interesting article thanks.\n \nreply"
    ],
    "link": "https://www.johndcook.com/blog/2024/08/03/polylog/",
    "first_paragraph": "",
    "summary": "In the latest episode of \"Infinite Sums for Infinite Fun,\" John D. Cook and his merry band of commenters dive headfirst into the mathematical masochism that is closed form evaluation of infinite sums. As expected, the commentary section transforms into a nerd Colosseum where mathematical gladiators wield the mighty sword of Feynman\u2019s differentiation trick, only to be effortlessly parried by the  shield of geometric series. Watch in bewilderment as one brave soul attempts to introduce the \"Li function,\" promptly causing another to \ud83c\udfc3\u200d\u2642\ufe0f\ud83d\udca8 abandon reading altogether. Meanwhile, another camp brandishes generating functions like ancient runes, convinced of their mystical powers to solve just about anything. Spoiler alert: They all circle back to the same tedious, algebraic tricks we promised ourselves we'd forget after graduation. \ud83e\uddd9\u200d\u2642\ufe0f\ud83d\udcdc\u2728"
  },
  {
    "title": "The Spartan Protocol Homepage (mozz.us)",
    "points": 25,
    "submitter": "networked",
    "submit_time": "2024-08-04T19:29:39",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=41155718",
    "comments": [
      "I think it's unfortunate to not have headers as part of the client request and/or server response. I think headers can add a lot of extensibility and future proofing for use cases that can't be anticipated now. Especially when the culture and/or inspiration of the protocol is oriented to hobbyists.e.g. Using spartan protocol as inspiration [1], a client upload request could potentially be:  example.com /upload/africa.mp3 3145728 1 <CRLF>\n  Content-Type: audio/mp3 <CRLF>\n  <binary stream>\n\nWhere the \"1\" in the request line stands for one header to follow. Or maybe it's just not needed at all, assuming you like HTTP's line break between headers and message body.This borrows from HTTP a bit, but other approaches could be viable of course. But this would give the protocol much more extensibility and allow more freedom for inspired implementations.[1] http://portal.mozz.us/gemini/spartan.mozz.us/examples.gmi\n \nreply",
      "I can see a future where I mainly use \"hobbyist\" protocols and have largely abandoned the Web. Or at least the 99% of it that requires JavaScript... although I don't know of any functioning non-Chromium/non-Firefox browsers that will plainly render HTML5/CSS and are missing the 30 million lines of Google/Mozilla code that I don't want on my computer anymore. (Ladybird, someday, maybe?)\n \nreply",
      "All of these limited versions of HTTP might be fun to write a client and server for, but for actual utility, even small web utility, you do want a defined subset of HTTP/(X)HTML. Maybe to make a small web HTTP, servers can reject clients that e.g. send user agents, and clients can refuse to render pages that contain a script tag.After writing a second system, it seems that developers want to write a third system that eschews the complexity of the second system, only to learn why it was there. Just look at Wayland for an example.Spartan and Gemini are so similar they shouldn't need to be different protocols. This route leads to 10000 protocol variations and your URL will need to indicate that the page is on a type 4854 server. (4=QUIC, 8=ASCII headers separated by LF with user agent forbidden, etc)\n \nreply"
    ],
    "link": "http://portal.mozz.us/gemini/spartan.mozz.us/",
    "first_paragraph": "spartan:// is a client-to-server protocol designed for hobbyists. Spartan draws on ideas from gemini, gopher, and http to create something new, yet familiar. It strives to be simple, fun, and inspiring.Spartan sends ASCII-encoded, plaintext requests over TCP. Arbitrary text and binary files are supported for both upload and download. Like gemini, the default hypertext document in spartan is text/gemini. A special line type (\"=:\") is used to prompt for input. Spartan has four status codes: \"success\", \"redirect\", \"server error\", and \"client error\".Spartan is not opinionated about how or what you use it for, only that you have fun doing so!Comparison: gemini:// vs. spartan://Dive in!For inquiries, contact michael@mozz.us",
    "summary": "**The Hobbyist Protocol Pantomime**\n\nIn a digital world desperately in need of more acronyms and slightly restricted functionality, <em>Spartan Protocol</em> heroically answers a question nobody asked. Harnessing the boundless potential of ASCII for both inspiration and limitation, Spartan draws from the overflowing well of obsolete protocols to sprinkle a dash of nostalgia on your TCP connections. Commenters, clad in their tech-nostalgia goggles, wax poetic about eschewing \"modern web complexities\" for a simpler ASCII Eden where JavaScript and practicality are left at the door. Meanwhile, debates erupt over adding headers to requests like some kind of Hypertext Frankenstein, proving once more that no tech discussion can escape the gravitational pull of HTTP. \ud83c\udfad"
  },
  {
    "title": "Self-Compressing Neural Networks (arxiv.org)",
    "points": 140,
    "submitter": "bilsbie",
    "submit_time": "2024-08-04T12:17:16",
    "num_comments": 32,
    "comments_url": "https://news.ycombinator.com/item?id=41153039",
    "comments": [
      "xxx"
    ],
    "link": "https://arxiv.org/abs/2301.13142",
    "first_paragraph": "Want to see access to research regardless of disability? Sign up for the arXiv Accessibility Forum in September and Learn more.Grab your spot at the free arXiv Accessibility ForumHelp | Advanced SearcharXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.\narXiv Operational Status \n                    Get status notifications via\n                    email\n                    or slack\n",
    "summary": "In this week's feature on arXiv, a refreshing blend of vague jargon meets the age-old quest for research accessibility: behold, the Self-Compressing Neural Networks! Scholars and casual perusers alike, rejoice in the indistinguishable complexity that promises to compress your understanding as tightly as the networks themselves. Aspiring contributors are called to elevate arXiv's open-access ethos, transforming it from a mere repository into a beacon of elitist academic gibberish. The comment section, predictably, becomes a war zone where misunderstood geniuses battle over interpretations, all the while unintentionally proving the real need for accessibility in understanding their own comments. \ud83d\ude35\u200d\ud83d\udcab\ud83e\udd16\ud83d\udca5"
  },
  {
    "title": "Apprentice, Journeyman, and Master: The Medieval Guild (2018) (philosophicalsociety.org)",
    "points": 76,
    "submitter": "squircle",
    "submit_time": "2024-08-04T15:11:53",
    "num_comments": 21,
    "comments_url": "https://news.ycombinator.com/item?id=41154053",
    "comments": [
      "Michael Polyani is quoted as making a comparison to guilds and scientists by Richard Rhodes in his book on the Atom Bomb. You become a scientist when other scientists accept you as a scientist. The publication side of things is a bit of a formalism, the critical point is acceptance into the craft. A quite a-scientific approach in some ways.That was of course in a prior age. Last century, in the dawn of Particle Physics, but I think he wrote of science in general in that time, not just Physicists.\n \nreply",
      "Of course, the tag line for the classic Pragmatic Programmer book originally was not your journey to mastery, but from journeyman to master.So much more apt.https://pragprog.com/titles/tpp20/the-pragmatic-programmer-2...\n \nreply",
      "Journeyman sounds very much like a postdoc. (the traditional costumes are rare, but I've seen a few journeymen all togged out* for going \"auf der Walz\" over the last couple of decades)* eg https://www.wirholzbauer.ch/de/magazine-online/detail/?tx_hb...more on the topic: https://hn.algolia.com/?dateRange=all&page=0&prefix=false&qu...\n \nreply",
      "These are still very much in use in Germany today. I met a few of these guys in Berlin looking for a couch to crash on for a few days, all carpenters and very funny guys.https://en.m.wikipedia.org/wiki/Journeyman_years\n \nreply",
      "I believe that German education is more pragmatic than (for example) British. The Germans invented the polytechnic, designed to teach practical skills. The British converted most of their polytechnics to universities, to their detriment. They now have a bunch of low functioning universities and have lost all their trade schools.\n \nreply",
      "I have often felt that programming would do well to have a guild-like system. Current job titles and years of experience do not really help to differentiate the quality of individuals. There's also the intangible benefits of trust and quality that come from the system. I'd love to write \"craft\" code, that is about producing quality code that elegantly solves real problems. Especially in comparison to the current trend of writing code as quickly as possible, with very little regard for quality from folks outside of the dev team.\n \nreply",
      "There used to be (and maybe still is?) an apprenticeship scheme for software development in Germany. By reputation it produced some excellent developers.The Anglophone thing of having developers do a 3-year degree in Computer Science (an almost entirely unrelated discipline from Software Development) is ridiculous in comparison.\n \nreply",
      "I love the idea.I think some people may fear the concept that their years of experience are just not equal to someone else's same years of experience.\n \nreply",
      "It is important to note, especially given the positive view given to the guild system in this article, that it is written on a masonic philosophy page. The freemasons have a long and esoteric history that should be viewed with some skepticism. Secret fraternal orders have a sketchy history.George Carlin has a famous comedy bit where he states \"It's a big club and you ain't in it\" [1]. My own feeling is that guilds of all sorts prioritize exclusivity for the purposes of bestowing power on some select few. As the article states \"Master\u2019s were few and far between\". This is similar to how luxury brands maintain their high value: exclusivity. The standardization and guarantees of quality seem to be secondary to the pyramid scheme nature of ascension within these organizations (in the same way that the quality of luxury goods is often secondary to their exclusivity). It reminds me in some ways of the concept of \"familiars\" in vampire lore, humans who willingly toil away for their masters hoping one day to be elevated to the same level.It is a complex topic because of the positives and negatives of these systems being highly intertwined. To this day in Canada there is an apprenticeship system for trades. However, it is no longer an inner circle of masters deciding who gets the special status, it is a regional qualification body with clear guidelines, training, testing and certification.As a society we haven't at all gotten away from the degenerate aspects of guilds. Think of the association with the \"golf/country club\" crowd. Or things like the Skull and Bones [2] type organizations at elite universities. Or when people joke about the Illuminati. This article is arguing for that by presenting a rose-tinted-glasses view of the past.1. https://www.youtube.com/watch?v=Nyvxt1svxso&ab_channel=SkyEc...2. https://en.wikipedia.org/wiki/Skull_and_Bones\n \nreply",
      "Historically, guilds were first and foremost a tool to enforce monopoly power on the part of masters against anyone else trying to enter the market (and against eachother to maintain monopoly pricing and supply). Luddites were actually just doing what guilds normally did.\n \nreply"
    ],
    "link": "https://blog.philosophicalsociety.org/2018/01/10/apprentice-journeyman-and-master-the-medieval-guild/",
    "first_paragraph": "I became fascinated with guilds when I moved to Germany. Being an avid reader of all medieval history I could get my hands on, I was well aware of the Hansa (slang for Hanseatic) League\u2019s rise in the 1100s in northern Europe \u2013 mainly Germany. The word\u00a0Hansa is Low German for \u201cconvoy\u201d \u2013 thus, this league of towns and merchant houses was a consolidated group of merchants and businessmen who strove to create their own answer to feudal Europe. The members of the League had their own legal system, their own armies, and had direct allegiance to the Holy Roman Emperor. Landed Barons and Earls did not stand a chance.The rise of these independent towns and merchants also gave rise to the guild system. Where the Hansa League was a merchant\u2019s guild, craft guilds began in a like manner around the same time period. The craft guilds were a system to protect knowledge that heretofore had been handed down by father to son, or nephew, or random laborer. Prior to the rise of larger towns and cities, jus",
    "summary": "**Modern Day Medievalism: Longing for the LARP**\n\nIn an age where Googling is too hard, a brave soul ventured into the depths of the philosophicalsociety.org to extract wisdom about the *good ol' days* of guilds, because reading actual history might just take too long. Without doubt, guilds\u2014these magical institutions of yore, where every carpenter was a wandering philosopher and every craftsman held the secret handshake to economic dominion\u2014are exactly what we need to fix everything from modern economics to bad coding practices. Cue the comments section, full of armchair historians and the \"well, actually\" tech crowd, lamenting the loss of craftsmanship in between sips of overpriced coffee and tweets about meritocracy. Get ready to don your virtual artisan's apron, folks. Are we fixing societal woes or just yearning for a cosplay? \ud83d\udee0\ufe0f\ud83c\udfa9"
  },
  {
    "title": "Praise My GitHub Profile (praise-me.fly.dev)",
    "points": 71,
    "submitter": "xena",
    "submit_time": "2024-08-04T16:28:22",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=41154560",
    "comments": [
      "This is the opposite of https://github-roast.pages.dev, fyi\n \nreply",
      "Okay I love this one, it is great. Thanks for the good laugh!> And what's with the projects? A business card that runs Linux? Next, you'll tell us you\u2019re working on a coffee mug that serves sarcastic remarks.I honestly find this idea pretty amusing and I am half-tempted to do it. Embed some flexible e-ink display in the walls of a mug and have it show sarcastinc fortune cookies. It could even roast you when the coffee gets cold.\n \nreply",
      "I had the idea for a sarcastic weather app once.\u201cIt\u2019s raining. Maybe the strangers won\u2019t be able to tell you\u2019re crying today.\u201d\u201cIt\u2019s sunny and 72\u00b0. If only you had friends to enjoy it with.\u201d\n \nreply",
      "https://www.meetcarrot.com/weather/ is kinda famous for that feature.\n \nreply",
      "Haha, thanks for posting, that brought me a lot of joy running on my profile. It must have an awesome prompt. The praise one felt quite cringy, so I was happy that at least the roast didn't take any prisoners:> Sounds like you\u2019re trying to impress academic circles, but with repos that barely break the surface of mediocrity, you might want to reconsider your life choices. \u201cAwesome\u201d lists with zero stargazers? That\u2019s some next-level irony. Get an original thought or two, and maybe, just maybe, you won\u2019t need to curate lists of things no one cares about. This GitHub isn\u2019t a museum for your neglected projects, it\u2019s a showcase, and right now, it\u2019s just a dump!\n \nreply",
      "It seems like the prompt is\"You roast people github account based on their bio, name, readme, and repos as harsh and spicy as possible, and keep it short.\"https://github.com/codenoid/github-roast/blob/main/src/route...\n \nreply",
      "Oh wow, thanks for looking it up. I stand corrected! Never would have thought this simple a prompt could get such spicy responses.\n \nreply",
      "Just had GPT-4o roast me, based on my HN profile bio and recent comments. (Would anybody care to build a Show-HN out of this?). Giving it lots of actual written stuff (I put a lot of thought into), not just project names, makes it cut so much deeper:> w-m, your attempts at contributing to discussions are like bringing a butter knife to a gunfight. Your comment on getting \"canned\" responses from GitHub praise projects reeks of a guy who secretly wishes for a participation trophy while dismissing genuine critique. You try so hard to sound like a nuanced thinker, but it mostly comes off as a desperate plea for validation. It's almost charming how you still think \"constructive feedback\" is going to fix a broken prompt when, let\u2019s face it, your GitHub is about as engaging as a beige wall.> Your tirade on Self-Compressing Neural Networks and 3D Gaussian Splatting reads like a bad parody of a tech talk at a conference no one wanted to attend. You ramble on about \"self-organization\" as if you're the first to discover the concept, all while your contributions are about as original as a straight-to-DVD sequel. And let\u2019s not forget your .zip domain saga\u2014a perfect encapsulation of your career: big ideas with zero practical payoff. You bought a useless domain and then cried foul when IT blocked it. Maybe next time, stick to .com like everyone else who doesn't want to be laughed out of the room.> Your AMD complaint at CVPR is just the cherry on top. You walk around conferences like an underfunded indie game developer whining about corporate monopolies while pretending you\u2019re the underdog hero. Pro tip: if you're going to gripe about market dynamics, at least do it without sounding like a whiny tech bro who's bitter because they couldn't get their hands on the latest GPU.> In summary, w-m, you\u2019re the quintessential tech enthusiast who overcomplicates everything, talks like he\u2019s inventing the wheel, and then acts surprised when no one wants to ride along. Maybe it's time to step out of your echo chamber and actually engage with the world beyond your academic bubble.I think that's the most fun I've had with LLMs in quite a while.Edit: works well on arxiv papers, too...\n \nreply",
      "Hah, for me this one ended up more complimentary than the \"praise\" version (which felt hollow, really).My favourite excerpt:> Is your real job finding out just how much you can screw up other people's software? Your projects read like a hacker's buffet\u2014one exploit after another, like you're collecting CVEs the way some people collect Pok\u00e9mon.\n \nreply",
      "I loved mine:> Next time you decide to learn something new, maybe pick up how to properly market your projects because right now, it looks like you\u2019re trying to audition for the role of \u201cMost Likely to Be Forgotten.\u201d Keep striving, Ed; you might still reach the dizzying heights of double-digit followers one day!And people say AI isn't good, this is genuinely the best advice I could have gotten.\n \nreply"
    ],
    "link": "https://praise-me.fly.dev/",
    "first_paragraph": "Instead of trying to tear eachother down with AI, why not use it to help lift others up?Powered by Llama 3.1 70b and Fly.io GPUs.\u00a9 2024 Xe Iaso.Poke @theprincessxena if something goes wrong. If you want, you can remove your info. The source code is on GitHub. Also check me out on Patreon!",
    "summary": "**Praise My GitHub Profile: The Ultimate Exercise in Digital Ego-Stroking**\n\nIn a groundbreaking move that's sure to revolutionize the tech community, praise-me.fly.dev offers a never-before-seen service: AI-powered ego massages under the guise of constructive feedback! Gone are the days of self-doubt\u2014now, you can have an AI confirm just how groundbreaking your \"Hello World\" in 15 different languages really is. Users and basement dwellers alike are ecstatic, flooding the comments with their relief at finally understanding the vast importance of their 2-star projects. Meanwhile, the average GitHub lurker wastes no time pointing out that sarcasm is indeed still free and that they might embark on developing a coffee mug that roasts you as your coffee cools\u2014because, evidently, that's what peak innovation looks like now. \ud83d\ude02\ud83e\udd16"
  },
  {
    "title": "Show HN: AI-Powered Stock Market Analyst with Global Coverage (decodeinvesting.com)",
    "points": 29,
    "submitter": "clark-kent",
    "submit_time": "2024-08-04T21:31:03",
    "num_comments": 18,
    "comments_url": "https://news.ycombinator.com/item?id=41156478",
    "comments": [
      "xxx"
    ],
    "link": "https://decodeinvesting.com/chat",
    "first_paragraph": "",
    "summary": "In today's episode of HackerNews grandiosity, a hopeful startup launches another AI-powered crystal ball they call \"Decode Investing,\" which purportedly peeks over the entire globe to whisper stock market secrets. As expected, the comments section transforms into a messianic fanfare, with armchair analysts treating algorithmic outputs like gospel. One commenter, self-proclaimed \"Tech Guru,\" compares it to the Oracle of Delphi, but with fewer cryptic responses and more JavaScript. Meanwhile, skeptics are drowned in a flood of downvotes, because on HackerNews, believing in tech solutions is not just a choice, but a commandment. \ud83d\ude02"
  },
  {
    "title": "Belenios: Verifiable online voting system (belenios.org)",
    "points": 122,
    "submitter": "leonry",
    "submit_time": "2024-08-04T12:41:33",
    "num_comments": 155,
    "comments_url": "https://news.ycombinator.com/item?id=41153158",
    "comments": [
      "One important thing about any voting system \u2013 digital or not \u2013 is that it has to be good at producing agreeable consent. That means bitter, betrayed and hurt (but reasonable/democratic!) losing parties need to be able to say: yeah we accept the result because we are confident in the outcome of the election.This is something all digital systems are really bad at, even if everything is readable and verifiable, unless all your members know how to read that code.Edit: and even if they know how to read that code, can they trust the machines are running that code at the big day?\n \nreply",
      "Disagree. It's enough for the average voter to trust that some other people - independent experts - are able to verify the vote. Not everyone needs to be an expert at anything. I wrote more about this trust aspect in the appendix of my thesis on voting: https://attejuvonen.fi/thesis\n \nreply",
      "Yes, but then all that's needed to attack the voting system is to trot out your own experts that voice disagreement. Without the means to assess the system for themselves, voters will lose trust in it. Especially in this day and age, when trust in institutions and expects in general is extremely low. (Heck, this attack already works to some extent with the current, extremely transparent system of ballots)\n \nreply",
      "> It's enough for the average voter to trust that some other people - independent experts - are able to verify the vote.I don't agree. This is plausible within a coesive electorate, but it feels like moving the problem. What guarantees that the experts are trusted by the voters? And more importantly, assuming that at some point the system (experts) is trusted, how is the trust in the voting system retained over time? (e.g. in case of disagreement over the results)I have argued in another thread like GP that because the ultimate purpose of voting systems is to collectively take decisions, and because disagreements are very common when deciding, the system needs to be able to justify itself to retain the electorate's trust. Otherwise it will eventually be replaced by a different voting system (or tyranny).A proxy for this is of course simplicity. If the voting system is clearly understood by everyone, it is more easy to persuade a losing party that the outcome is correct. Conversely, if a voting system needs high expertise to be understood, it is more difficult to bring everyone to agree on the result. So the latter is less robust than the former, especially if the disagreement is over a result that is close to a tie. A self-correcting mechanism is important to keep the voting system in place.In appendix B of your thesis you raise an interesting point I had not considered.> As an extreme example, consider the case where a voting system\nlacks verifiability, is trusted by the public, and is compromised by a\nforeign superpower: the people have lost their democracy and do not\neven realize it. Compare that to a hypothetical case where a voting\nsystem has perfect verifiability, thus can not be compromised (without\ntriggering a new election etc.), and, for whatever reason, is not trusted\nby the people.> Clearly, the outcome where people are suspicious of a perfectly\nfunctioning voting system is superior to the outcome where people\nare blindly trusting a compromised voting system. We hope that this\noutlandish example is enough to support our argument that verifiability\nis more important than trust.The external threat is a very valid point but I do not think that this is sufficient to absolutely conclude that verifiability is more important than trust. If the system is rigged, it may eventually displease the electorate to the point that it will eventually be replaced.Unless, the rigged system doesn't displease the electorate and is essentially a hidden benevolent dictator, which would be an interesting situation. Only in that case verifiability could unambiguously be more important.\n \nreply",
      "As a software developer myself, if an \"independent expert\" comes out and says that some software system is fully verified, I might trust their allegiance, but I probably won't trust their competence.I wouldn't expect the general population to trust them either.\n \nreply",
      "My reading of the news is that in the US (and that I can see, in many places) a lot of people have been convinced not to believe experts.\n \nreply",
      "It's not enough. It's not enough at all. Experts are easily compromised.The system by which power is transferred from the people to representatives needs to be literally self-evident. Any system that the \"average voter\" cannot understand should be literally unconstitutional. Deviating from this puts the results of all elections in doubt. People will question the results, and they will have a point because the system is not actually verifiable and trustworthy to the average person and therefore they have no reason to accept the results. If you're lucky you'll end up with numerous political prisoners at the end of the whole process.\n \nreply",
      "Non-digital systems have claims of fake ballots being inserted all the time. I don't think the answer to people being suspicious of digital systems is to abandon them. It's to either disprove their suspicion or add controls so they become disproven.https://www.google.com/search?q=ballot+stuffing+2020https://www.google.com/search?q=ballot+stuffing+2016https://www.google.com/search?q=ballot+stuffing+2012\n \nreply",
      "Personally I love the idea of a fully verifiable election. I do the the current election protocol my county uses is pretty good: you present id in one room, they check your eligibility, then you\u2019re given an anonymous ticket, in another room you vote using said ticket, and get a receipt. You can see your but counted online using said receipt.There are two problems with this: 1. You can\u2019t verify extra or in eligible voters voted. 2. It relies on trust that to tell you your vote was counted.I am very interested in reading about this protocol, and it might make a fun hobby to re implement it as a research project.The one issue I have is: the act of physically showing up is an important one. Mass stuffing of ballot boxes is nearly impossible when physical presence is required. It also puts \u2018your ass in the game\u2019, meaning you really care so to speak; as you have to do a minor piece of physical labor in order to get your vote counted.If this protocol could be adapted to the physical world, I think it would be perfect barring any other issues.\n \nreply",
      "For in-person voting use \"fill in the oval\" ballots that can be hand counted or counted by offline optical card scanners, and augment that with Scantegrity II [1].Scantegrity II is a system that adds end-to-end voter verifiability [2] to such systems by combining some clever chemistry with some clever cryptography. It requires no hardware modifications at the voting site except that special markers have to be used to mark the ballots.Briefly, a code is printed inside each oval using a special ink that is invisible, which turns visible when that oval is marked by a special marker.After the election all the ballots can be published, allowing any third party to independently verify the counts.Voters that wish to verify that their ballot was included in the count and counted correctly can note the code from the oval and afterwards use it to verify the count. The code cannot be used to prove to a third party, such as a vote buyer or vote coercer, that the person voted the \"right\" way. Here's a proof of that [3].[1] https://www.usenix.org/legacy/event/evt08/tech/full_papers/c...[2] https://en.wikipedia.org/wiki/End-to-end_auditable_voting_sy...[3] https://eprint.iacr.org/2010/502.pdf\n \nreply"
    ],
    "link": "https://www.belenios.org/",
    "first_paragraph": " \u00a0\u00a0Some France/French \u00a0\u00a0specific pages:\n\tBelenios aims at providing an easy to use voting system,\n\tguaranteeing state-of-the-art security, namely vote privacy\n\tand verifiability. It can be used in many types of elections (including referendums),\n\tranging from scientific councils to sport associations.  Release of Belenios 2.5.12024-06-28The main goal of this release is to correct an issue raised\n          by Olivier Pereira regarding the implementation of the\n          Distributed Key Generation (DKG) scheme in the threshold\n          mode, that is when the election key is distributed among n\n          trustees, with a threshold of k trustees to decrypt the election. This is now fixed by adding an extra signature\n          field. As a side effect, new elections should be monitored\n          with this additional signature check and our verification tools\n          have been updated accordingly. We are very grateful to\n\tOlivier Pereira for reporting this issue. Release of Belenios 2.5202",
    "summary": "**Belenios 2.5.12024: Democracy, or a Comp Sci Homework Assignment?**\n\nDesperate to ensure that their sport association elections are as opaque as their understanding of quantum physics, France champions Belenios 2.5.12024, a verifiable voting system that they claim solves problems most voters didn't know existed. Meanwhile, in a thrilling chapter of \"What Does This Button Do?\", a critical fix patches the issue of trusty trustees decrypting your vote at a techno-rave. Fence-sitters in the comment section debate whether it's more important for a voting system to be verifiable or just believable enough that Aunt Tilda doesn\u2019t storm off during Thanksgiving. One enlightened commenter proposes we scrap digital trust for \"magic markers\" and visible inks, because if you can't <em>see</em> democracy, is it really there? \ud83d\udd75\ufe0f\u200d\u2642\ufe0f\ud83d\uddf3\ufe0f"
  },
  {
    "title": "Improving _Generic in C2y (thephd.dev)",
    "points": 31,
    "submitter": "luu",
    "submit_time": "2024-08-04T07:46:11",
    "num_comments": 10,
    "comments_url": "https://news.ycombinator.com/item?id=41151799",
    "comments": [
      "The article describes two problems with _Generic.There is a third: the discarded branches must typecheck. (Unlike C++ templates, where substitution failure is not an error.) Simon Tatham described the issue in more detail:https://www.chiark.greenend.org.uk/~sgtatham/quasiblog/c11-g...\n \nreply",
      "I tried using `_Generic` inside C++ templates as a lighter alternative to `std::conditional_t`, but I was disappointed to find it didn't have short-circuiting semantics, which is my biggest pain point with `std::conditional_t`. If it wasn't necessary to type-check, that would make variadic programming much easier for me. The other problem is that only Clang accepts it in C++ mode.\n \nreply",
      "There's also the fact that the bodies must be expressions, so it's only useful with GNU statement expressions.Still, since we have __VA_OPT__ and typeof, standard C has gotten to the point of being almost usable ...\n \nreply",
      "There's also the macro expansion/amplification issue (explained at the end of the page you reference). _Generic seems a dead end, it doesn't even work in practice for <tgmath.h>.\n \nreply",
      "That kind of problem of macro expansion was well explored in a recent Lwn article.. Kilobytes long expansions for some simple operations.https://lwn.net/SubscriberLink/983965/1240798fdfe236df/This merits changes in C too but I don't know what if it's not templates.\n \nreply",
      "In its current form without at least requiring balanced enclosing brackets, dropping the semantic check will make _Generic a new macro expansion system worthy of a dedicated round of obfuscated C contest.\n \nreply",
      "Nice, does this mean we can have const-generic accesors now? I.e. &s->somefield and get a const pointer if s was a const pointer, but a mutable one otherwise? I guess we still need to define two functions though, but that can probably be handled by macros. This is something that really hinders use of const in current C.\n \nreply",
      "Wow, I can't believe they wasted a decade on 2 releasesMove fast!\n \nreply",
      "Don't move fast. This is the C programming language. The foundation of all software. Each new feature will interact with everything else, because C is connected to almost everything else. Making C larger is actually a really bad thing.\n \nreply",
      "Clang, as a non-standard feature, allows you to put a type-id into `_Generic` rather than an expression.\n \nreply"
    ],
    "link": "https://thephd.dev/improving-_generic-in-c2y",
    "first_paragraph": "\n      \n      \n      August 01, 2024\n    The first two meetings of C after C23 was finalized are over, and we have started working on C2y. We decided that this cycle we\u2019re not going to do that \u201cBugfix\u201d followed by \u201cRelease\u201d stuff, because that proved to be a REALLY bad idea that killed a ton of momentum and active contributors during the C11 to C17 timeframe. So, this time, we\u2019re hitting both bugfixes AND features so we can make sure we don\u2019t lose valuable contributions and fixes by stalling for 5 to 6 years again. So, with that\u2026 on to fixes!_Generic \u2014 the keyword that\u2019s used for a feature that is Generic Selection \u2014 is a deeply hated C feature that everyone likes to dunk on for both being too much and also not being good enough at the same time. It was introduced during C11, and the way it works is simple: you pass in an expression, and it figures out the type of that expression and allows you to match on that type. With each match, you can insert an expression that will be executed t",
    "summary": "**Improving _Generic in C2y: The Developer Mosh Pit**\n\nIn the latest tragicomedy of C language development, aspiring software architects wrestle with the decades-old _Generic keyword without realizing they're in a battle they lost before it even started. With all the fervor of a soap opera, commentators passionately debate how _Generic could miraculously save C from sinking further into the abyss of obsolescence, all while stumbling over its inherent inability to ignore type-checks for discarded branches\u2014because who wouldn't want to add more complexity to a language already infamous for making easy things hard? <em>One bright commenter suggests a charm offensive to recruit _Generic as the poster child for the next Obfuscated C Contest</em>, heralding a new era of befuddlement. Meanwhile, a lone, jaded voice recalls with sardonic nostalgia how C was once the \u201cfoundation of all software\u201d\u2014a museum relic best preserved under glass rather than subjected to misguided modernization.\ud83e\uddd0\ud83d\udd27\ud83d\udca5"
  },
  {
    "title": "Nvidia's Blackwell Reworked \u2013 Shipment Delays and GB200A Reworked Platforms (semianalysis.com)",
    "points": 39,
    "submitter": "charleshn",
    "submit_time": "2024-08-04T21:38:23",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=41156514",
    "comments": [
      "I\u2019m not seeing how it impacts their sales too much as people will still need to buy GPUs either the original Blackwell  or the reworked version.\n \nreply",
      "Yeah, if there is a knee jerk reaction down it\u2019s probably a good buying opportunity. IIUC they are backlogged on both existing and next gen\n \nreply"
    ],
    "link": "https://www.semianalysis.com/p/nvidias-blackwell-reworked-shipment",
    "first_paragraph": "",
    "summary": "Nvidia tries its best to make a splash in the lucrative postponement market with its latest product, the \"Soon\u2122\" Blackwell. The tech giant, never one to shy away from a delay, decides that the Blackwell could use a little more *time in the oven*\u2014because if anything screams innovation, it's definitely more waiting. Excited commenters cheer on, viewing each delay as a mystical sign to buy stocks, not GPUs. Because, obviously, the only thing better than new tech is speculative finance based on *not* having new tech. Ah, the sweet smell of progress! \ud83d\ude80\ud83d\udcb8"
  }
]