[
  {
    "title": "A small lathe built in a Japanese prison camp (1949) (lathes.co.uk)",
    "points": 366,
    "submitter": "CommieBobDole",
    "submit_time": "2024-04-28T18:16:26",
    "num_comments": 84,
    "comments_url": "https://news.ycombinator.com/item?id=40190542",
    "comments": [
      "I'm only part into the story, but I already love it.The prisoners-of-war were tired hiding their lathe every time they might be searched, that they hung up a sign \"workshop\" above one of their huts, and timed it so that the new round of guards thought it had always been there.",
      "For an extended read, you may try \"King Rat\" by James Clavell - same author of the current hit show \"Shogun\".The book is set in the same Changi PoW camp where the author was held during WWII. The character Lieutenant-Colonel Larkin is based off Lieutenant-Colonel E. E. \"Weary\" Dunlop who was the real life surgeon using these tools for creating artificial limbs amongst other things and whom Clavell knew and presumably Bradley too.It's not exactly a cheery read but very much an inspiring one in terms of survival, ingenuity, and moral complexity.",
      "Thanks, I've read it, don't remember the lathe in it. Awesome book. So much better than shogun or any of his other works from his \"trader series\".I recommend King Rat to people who need to get back in to reading books.",
      "How dare you slander The Noble House. I love most of his works, but Straung is peak Clavell.",
      "Joss !",
      "It's not specifically about Changi, but you might also be interested in the book \"Rats of Rangoon\" by Lionel Hudson which is all about the author's experiences during WWII in the Rangoon prison camps (also run by the Japanese of course)",
      "As I understood, one of the japanese officer's hut - which is even bolder! Hence why they tricked the translator to have the japanese character for \"workshop\". A lot of smart and bold moves all along. Especially as the japanese were known for their \"harsh\" treatments (humiliations, beatings, torture, slow death, brutal death etc etc) toward prisoners, anything that would lead to a cue that they were doing something hidden would have had a radical and definitive answer...",
      "I assumed it was the hut used by the PoW officers. Japan did not treat PoWs particularly well (though British PoWs were treated much better than Chinese) and did not follow the 1929 Geneva Convention on the treatment of PoWs. Under that convention, officers are to be treated with due regard to their rank and part of that means being quartered separately from the other ranks (as well as not being made to work). I think officers would also be separated in PoW camps in Japan.",
      "I find it hard to believe that they copied the word for workshop (presumably \u5de5\u623f) convincingly enough that it wasn't obviously written by someone without any understanding of how to actually write the language. It's extremely obvious when someone tries to copy Chinese characters without any understanding of stroke order, stroke pressure, etc. The way that someone would show how a character looks to someone without any knowledge (ie textbook form) and how they would naturally write such a sign is also different. You would be able to tell instantly that a non-native prisoner wrote it.Actually, signs were also written right-to-left horizontally during that period but it's likely that someone showing them how to write on a piece of paper would have written vertically, so they would probably not even have the knowledge to know the correct order of the text.",
      "If all signs in the prison camp were written right-to-left instead of vertically, they probably would have noted that before creating the sign. Especially considering their lives depended on it."
    ],
    "link": "http://www.lathes.co.uk/bradley-pow-lathe/",
    "first_paragraph": "email: tony@lathes.co.ukHome\u00a0 \u00a0Machine Tool Archive\u00a0 \u00a0Machine-tools Sale & WantedMachine Tool Manuals\u00a0 \u00a0Catalogues\u00a0 \u00a0Belts\u00a0 \u00a0Books\u00a0 AccessoriesThe R. Bradley Lathe-\u00a0 Home-made in a Prisoner of War Camp -",
    "summary": "In a daring display of ingenuity only surpassed by the boldness of online commenters pretending to understand Japanese linguistic nuances, a small lathe is constructed in a Japanese prison camp, 1949. The makeshift engineers, not satisfied with merely crafting survival tools, decide to bamboozle their captors with \"high school project level\" stealth by hanging a workshop sign, convincing the new guards of its ancient presence on the site. Online enthusiasts, meanwhile, argue over the authenticity of the kanji and the comparative literary merits of \"King Rat\" vs. \"Shogun,\" as if their insights were as crucial to history as the artificial limbs presumably fashioned from the lathe. The audacity of POWs hiding their workshop in plain sight pales in comparison to the bravery of commenters viciously defending their favorite James Clavell novels."
  },
  {
    "title": "I found one of my first programs (Java, 2011) on the Wayback Machine and it runs (github.com/khiner)",
    "points": 58,
    "submitter": "khiner",
    "submit_time": "2024-04-27T05:36:45",
    "num_comments": 28,
    "comments_url": "https://news.ycombinator.com/item?id=40177553",
    "comments": [
      "The first major piece of code that I ever wrote was a publishing workflow management system for a major newspaper. It routed page images to presses and generated pdfs of each page in each edition of the newspaper and made pdfs of each day's newspaper editions and published them to a static website where they were archived.I was only allowed to use perl 4 to write this software and I wasn't allowed to use a database, even though the datastructure for a day's publishing batch had tens of thousands of keys and values and required RDBMs style queries. It also features a configurable postscript parser that extracts all kinds of data from completed newspaper pages that informs the publishing system. When I wrote it I was told that it would run for a few months only while we figured out how to get a $5M commercial product to handle the work.The whole thing was written in perl 4 style OO Perl and came in at about 16k lines of code in the end -- most of the code was for the postscript processor and tons of cruft that I had to write to made a relational DBMS in memory because I wasn't allowed to use mysql. It took me four months to write it. I launched it in January of 2002 and it runs to this day. I know this because I got a call about it last month where my replacement's replacement's replacement asked me a few questions about what OO Perl is because he wanted to make a few changes. Good luck! It still runs and is responsbile for about 80% of what it was originally built to do. It is used by hundreds of people daily, who by all reports absolutely hate it. There are people working at the newspaper today that use it regularly that were not born when I wrote it. I am twice as old as I was when I wrote it.They have apparently tried to replace it several times over the last 22 years and have failed to do so... this is likely due to the blockheadedness of my old boss (who is still there) as much as the radically insane obscurity of my code, which is exactly how you'd expect 16k lines of 22 year old OO Perl 4 would be.",
      "That\u2019s a really incredible story. I\u2019m not sure how much more you remember/are able to share, but I would kill to read a longer post about this.",
      "It's in moments like this that I miss the hacker news magazine[0], because I had relatively high certainty that when stories like this popped up, the poster in question would get interviewed and their story would appear in the next edition.Not sure who else recalls it? Really appreciated the monthly format as well, I think summarising the last month and going in-depth on specific stories ended up being a good touchstone for what happened in the community.If anyone is interested in picking up the torch, I for one would be happy to resubscribe to it :)...-[0]: https://news.ycombinator.com/item?id=1261499",
      "Interestingly, i have a similar story.I created a database publishing platform exactly that time, a was given full control. I created it in Java, and added a JavaScript engine for scripting templates. The initial product was also side in a few months. It also runs to this day. The war file could be run by any Java server. \nThe code, while old, was in a reasonable state, given some of the migrations.I never thought about the code being older than the people working on it",
      "> asked me a few questions about what OO Perl is because he wanted to make a few changesWell that's pretty impressive. Most of my garbage pearl code from 20 years ago would probably look like line noise to most modern developers if it wasn't for the shebang.",
      "i never wrote perl in any serious fashion, but i've always tried to use as much information in the source so i can figure out how i did it. I enjoy reading the submissions to code golf challenges, though. A few of the more esoteric language users have let slip they write a compiler to go from readable code to the target unreadable code.Whenever i see terse C or load bearing perl it does look like line noise.",
      "If you don't mind me asking, how much did they pay you to build it?",
      "My salary was about 30k. Best deal ever lol",
      "Not relevant to thread, but still for fun & testing LLM.Asking Llama3: How old is the author of this comment.Meta AI>\nLet's break it down!\nThe author mentions:\nThey wrote the code in January 2002.\nThey were half their current age when they wrote it.\nThey are twice as old now as they were when they wrote it.\nSo, if they were x years old in 2002, they are now 2x years old.\nWe know that 2024 - 2002 = 22 years, so:\n2x = x + 22\nSolving for x, we get:\nx = 22\nThis means the author was 22 years old in 2002 and is now 44 years old.",
      "The wayback machine is pure nostalgia. Every time I go there I\u2019m truly amazed at what it\u2019s like to have a society wide memory that automatically captures these different moments of our lives.Old pictures I never thought I\u2019d ever see again. Landing pages for old companies I\u2019ve built and only a handful of my closest friends remember. Blog posts from long deleted places, times, and mental caverns.Just incredible."
    ],
    "link": "https://github.com/khiner/CrosswordFiller",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.",
    "summary": "In a riveting saga of archaeological brilliance, a brave keyboard warrior unearths the ancient scrolls of Java - a publishing system so archaic, its users curse its existence daily. This marvel of obsolescence, crafted in the forbidden dialect of Perl 4, continues to haunt the production lines with the ferocity of a lingering curse, proving that some horrors are eternal. Commenters, in a display of nostalgia-fueled masochism, reminisce about their own contributions to the digital necropolis, sparking a symphony of \"back in my day\" and unintentionally highlighting the tech industry's unparalleled talent for celebrating inefficiency. As the tales of yore swirl about, one can't help but wonder if the real legacy of software development is not the code, but the collective delusion that this is, in fact, progress."
  },
  {
    "title": "FreeBee: AT&T Unix PC emulator (philpem.me.uk)",
    "points": 20,
    "submitter": "luu",
    "submit_time": "2024-04-29T00:28:37",
    "num_comments": 0,
    "comments_url": "",
    "comments": [],
    "link": "https://www.philpem.me.uk/code/3b1emu",
    "first_paragraph": "code:3b1emu",
    "summary": "In a stunning display of technological necromancy, the internet has been graced with FreeBee, an emulator for the otherwise forgotten AT&T Unix PC, a machine so revered it's usually found housing spiders in your grandad's basement. The creator, undoubtedly yearning for the days when a megabyte was a thing of wonder, has bravely decoded the ancient runes to bring 3b1emu to the baying masses of tech hipsters and nostalgia addicts. Commenters, in their infinite wisdom, oscillated between waxing poetic about the *glory days* of command lines and bemoaning their lost youth \u2014 as though the act of emulating a computer that struggled to run a text editor could somehow reverse the merciless tide of time. It's the tech equivalent of insisting that movies were better when they were silent and in black and white, but with more beard stroking and fewer flapper dresses."
  },
  {
    "title": "6502 \u2013 Guideline to Reverse Engineering (how to read die shots) [pdf] (reactivemicro.com)",
    "points": 45,
    "submitter": "siraben",
    "submit_time": "2024-04-28T22:49:17",
    "num_comments": 0,
    "comments_url": "",
    "comments": [],
    "link": "https://downloads.reactivemicro.com/Electronics/Reverse%20Engineering/6502%20-%20Guideline%20to%20Reverse%20Engineering%20v1.0.pdf",
    "first_paragraph": "",
    "summary": "In an electrifying display of time-wasting, a daring soul deciphers the ancient runes of the 6502 microprocessor, painstakingly explaining how to read die shots as if anyone in the current millennium genuinely cares about silicon hieroglyphics. Hobbyists and professional procrastinators flock to the comments, brandishing their magnifying glasses and tales of yore, when 1kB of RAM was a luxury not a laugh. It's a festival of nostalgia and nerdy one-upmanship, where the most revered commenter is the one who can most convincingly pretend they'll apply this arcane knowledge to something other than party anecdotes. Truly, a heroic effort in digital archaeology, ensuring the saga of \"Look, I made an LED blink using technology old enough to buy its own alcohol!\" continues to enchant bored office workers everywhere."
  },
  {
    "title": "Show HN: Dotenv, if it is a Unix utility (github.com/gyf304)",
    "points": 119,
    "submitter": "gyf304",
    "submit_time": "2024-04-28T20:25:46",
    "num_comments": 44,
    "comments_url": "https://news.ycombinator.com/item?id=40191510",
    "comments": [
      "I think direnv already does a good job in this space, and it's already available in your package manager.https://direnv.net/",
      "I don't think direnv and dotenv are really the same \u2014 dotenv manages environment variables for a program, whereas direnv manages environment variables for an interactive shell.As an example of the difference, dotenv is useful for running programs inside Docker containers \u2014 which do not inherit your interactive shell's environment variables \u2014 whereas direnv isn't particularly useful there. Ditto for programs run via init systems like systemd or even classic SysV init. On the other hand, direnv is convenient for end-user env var config, since it's aware of your shell's working directory and updates the env vars based on it without needing to run extra commands.",
      "I've used direnv, but I think a nice property of OP's dotenv is that it's explicit: if I want to pass env vars, I run my program under it.  If I don't, then I don't.  There's no \"hidden behavior\" for me to forget about and then get surprised by.",
      "As far as I'm aware of, Direnv's behavior is not hidden at all. Whenever you cd into the directory, you get a message listing all the new en var activated. And when you change the .envrc, you get another message saying that direnv has been deactivated. I never had happen to me \"oh shoot !! I forgot this env var was activated because I'm in this dir\".",
      "What happens when, 30 commands later, you execute a command in your shell and didn't remember that message from a day or so ago?",
      "I don't think \"hidden\" and \"explicit\" are true antonyms.From your description, direnv is implicit and noisy, whereas dotenv seems to be (unless you embed it in a script) explicit and quiet.",
      "Oh yeah, that's the default. Everyone I know im ediately disabled that and I even forgot about it till now",
      "I know ohmyzsh and zsh has this covered for auto loading the .env when you enter the directory",
      "Compare with dotenvx - https://github.com/dotenvx/dotenvx\nThis is my current tool of choice.",
      "Doesn\u2019t this already exist as https://www.npmjs.com/package/dotenv-cli ?"
    ],
    "link": "https://github.com/gyf304/dotenv",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.",
    "summary": "In a world where the reinvention of the wheel is the highest form of flattery, a brave soul has introduced \"Dotenv, if it was a Unix utility,\" for those who find reading documentation too mainstream. The Hacker News crowd, ever ready to leap into the fray, quickly turns the comments into a battleground over *direnv* vs. *Dotenv*, a rivalry as heated as Vim vs. Emacs, but with less dignity. One commenter notes the revolutionary feature of Dotenv being \"explicit,\" a concept apparently as novel as remembering your own name. Meanwhile, others rush to point out that their favorite shell already magics environment variables from thin air, leaving us to ponder why anyone does anything when a plugin probably exists to do it for you."
  },
  {
    "title": "The Essence of Compiling with Continuations (1993) [pdf] (acm.org)",
    "points": 48,
    "submitter": "swatson741",
    "submit_time": "2024-04-28T22:30:55",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=40192579",
    "comments": [
      "Also worth reading: Compiling with Continuations, Continued (2007) [1][1] https://www.microsoft.com/en-us/research/wp-content/uploads/...",
      "Abstract: https://dl.acm.org/doi/abs/10.1145/173262.155113"
    ],
    "link": "https://dl.acm.org/doi/pdf/10.1145/173262.155113",
    "first_paragraph": "",
    "summary": "In an exhilarating turn of events that nobody saw coming, the world is graced with *The Essence of Compiling with Continuations* from the distant era of 1993. Because, clearly, what the programming world lacks is another dense paper that approximately three people and a half-awake cat can fully appreciate. Meanwhile, the comment section erupts in an intellectual display of one-upmanship, as readers scramble to prove they've not only endured the original saga but also its thrilling sequel, *Compiling with Continuations, Continued*. Brace yourselves for an epic journey through compiler design, peppered with comments that serve as humblebrags about digesting these titanic tomes without breaking a sweat\u2014or understanding them, but who's checking?"
  },
  {
    "title": "The Ivy League and other elite private colleges are losing esteem (natesilver.net)",
    "points": 16,
    "submitter": "paulpauper",
    "submit_time": "2024-04-29T03:21:48",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=40194103",
    "comments": [
      "I'd say its the exception that you should not go Ivy/elite if you get in.  Ivy Leagues have experiences/opportunities that simply are not replicated at state schools.Yes for determined/driven individuals, it may not matter all that much.  And if you are not going to take advantage of what those elites have to offer, maybe you should reconsider if the financial burden is too high.",
      "And the resum\u00e9 boost is for life.",
      "Unless of course: \u201cPublic perceptions of higher education have declined rapidly, and I expect the problems to get worse.\u201d turns out to be the case(Which it probably won\u2019t)",
      "More nonsense from Nate Silver. As he himself points out the decline in esteem is being driven by a general distrust of all institutions amongst certain elements on the right.But what he fails to mention is that most of these people aren't in positions of power e.g. hiring and thus their opinions aren't all that relevant.If you go to an Ivy League school you statistically will get a higher paying job, have a better chance of getting into YC and other such programs and generally lead a better life. And for most that is what is important - not the education.",
      "I think I agree with Nate\u2019s advice (skip the Ivies, go to a good state school) but I don\u2019t agree with the reasons why.I don\u2019t think elite private colleges are losing esteem at all (the recent noise about pro-Palestinian protests will be forgotten five minutes after they stop, just like all the other campus protest movements in decades past, this isn\u2019t new!), I just think the economic argument is getting harder and harder to make.",
      "I get your point, but Ivies (and other rich private schools) offer dramatically better financial aid to \"middle class\" students than most state schools do.E.g. most students who qualify for aid would take on less debt to attend Stanford or an Ivy than to attend, say, UC Berkeley. Or pick some other state school, since Cal has had its share of protests.",
      "I think they are losing esteem, but some silly protests aren't why. The selection process itself is deeply, deeply flawed and interacts poorly with incentives for education. Feedback on performance is muddled up with the effects of networking with monied up people.Not much of this is positive. Their ability to hire and the amount of money they have still is, I suppose. Assuming those are focused on teaching, though, which I doubt.",
      "Networking with monied people is still a perk for sure. But I wonder (jokingly but not completely jokingly) if you\u2019d be better off spending 1/10 of the cost going to Burning Man with index cards of rich inheritees to hunt down.",
      "Harvey Mudd will cost $93K this upcoming year. Virginia Tech will cost $41K (in state).  It is tough to justify a 2.3x difference in price.",
      "> Virginia Tech will cost $41K (in state).Thanks to wrongful death lawsuit payouts?"
    ],
    "link": "https://www.natesilver.net/p/go-to-a-state-school",
    "first_paragraph": "",
    "summary": "In a world where the shimmer of Ivy League institutions is allegedly dimming faster than the gloss on a Harvard MBA\u2019s LinkedIn profile, natesilver.net dives headfirst into the fray, discovering that, shockingly, people with too much money might still think these schools are worth the obscene tuition. The commenter brigade, armed with the insight only a 3AM Reddit binge can provide, rallies to the defense with pearls of wisdom like, \u201cBut the networking!\u201d and \u201cState school plebs just don\u2019t get the *experience*.\u201d Meanwhile, one brave soul suggests that, maybe, just maybe, throwing cash at Burning Man in hopes of brushing shoulders with the tech elite\u2019s progeny could offer the same, if not better, ROI than a semester at Yale. Another enlightening moment has us ponder, amidst the din of privilege and Ivy League echo chambers, if perhaps the steep price of admission is really worth it for a lifetime subscription to Alumni Spam\u00ae and the chance to say, \"Well, at Harvard...\" at dinner parties."
  },
  {
    "title": "Personal computing paves the way for personal library science (bramadams.dev)",
    "points": 81,
    "submitter": "_bramses",
    "submit_time": "2024-04-28T21:57:00",
    "num_comments": 6,
    "comments_url": "https://news.ycombinator.com/item?id=40192359",
    "comments": [
      "> The \"during\" is hard work, and very lonely work. There are no promises of success, and indeed, the path is one where you can't see more than three feet ahead of you and you exist on the cliff's edge of extinction by any silly mishap. The work of \"during\" is exhausting, and it constantly holds you taut and alert, afraid of the shadows that lurk beyond the campfire's edge.Well said. All anyone can do is to do the lonely work till you can't anymore or you find friends to not be lonely at that work anymore.",
      "I've had related ideas lurking at the back of my mind for a while now. Essentially, I want to save more things locally and and interact with it. For example, I have a bunch of book notes stored in Bear. I'd like to be able to ask questions about those notes, and also show the pages of the book itself.",
      "> Personal Library Science is the leverage of LLM technology, applied to a personal library. A personal library differs from a impersonal library in the fact that a personal library is an interpretation of a source material. These interpretations include: photographs from different photographers at the same event, or favorite scenes from a movie, or favorite passages from books, parts of songs that bring you to tears, etc. Importantly, these interpretations create unique sets that go on to create unique problems which require unique, idiosyncratic solutions.Would an LLM-driven \"Personal Library\" require manually annotated textual interpretation of each curated item, or could it derive personal interpretations from user history and the uniqueness of curated items/sets?For those who have been using local, offline LLMs with a manually curated text/image corpus, what have been the most valuable or surprising use cases?Author demo video (2023), https://youtube.com/watch?v=7TgqMRz2r3M & tooling comment (2024), https://news.ycombinator.com/item?id=39789712> Inspired by the commonplace book format, I take highlights from Kindle and embed them in a DB. From there I build (multiple) downstream apps but the central one, Commonplace Bot is a bot that serves as a retrieval and transformer for said highlights.Related: https://en.wikipedia.org/wiki/Lifelog",
      "> Would an LLM-driven \"Personal Library\" require manually annotated textual interpretation of each curated itemNo. In something like this you\u2019d probably have the LLM annotate and curate your personal library for you.Potentially by creating and assigning tags or topics based on the content of your library.",
      "Yea. I had this discussion not too long ago about this. I'd love to have a combination of a library (Personal Knowledge Management style), data ingestions, and a current world view/state.The PKM is the stored info to write to and query against (both for LLMs and humans). The data ingests are just a pipeline of digital inputs to the system, like chat logs, maybe (transcribed) webcam feeds, files i'm currently editing on desktop, browsing history, etc. The current world view is the interpretation of what i'm doing - to tie all the ingests together and give them context. Eg in isolation browsing some Rust crates might not be that useful. But if i'm also editing Project X on my computer then it's reasonable to assume the searching is related to X. However if it's been 8 hours since any Project X activity, it's less likely related. Same goes for context-less chat logs (as happens frequently in my house) where they are extensions of a voice conversation, etc.All of this stuff is of course insanely privacy invading, so i'd only implement this locally. I also wouldn't even store most of it for fear of data invasion, but using it to fuel a PKM automatically seems pretty sexy. Like browser history, but for your life.This is all just wishful thinking though, LLMs have been moving too fast for me to even bother toying with this. I should note though that i did not intend for LLMs to be \"smart\". Rather, in a RAG-like fashion (i think is the term), i want to just let LLMs do what they're good at - summarization & autocomplete, and let the world view / PKM store the real data.",
      "there may be an important divergence implied by this essay .. people here ask about using an LLM.. but the essay refers to \"different photographs of the same scene from different photographers\" or other personal collection items that are related but subjective or not-authoritativeThere is a rush in public to condense and summarize many authoritative publications to find patterns, or to replace a human expert with automated results.. yet that is fundamentally different than taking multiple incomplete perspectives to add to a human library-owners knowledge and investigations.It is subtle to speak it but not subtle in its implications.. taking \"data as facts\" and condensing them or reordering them or rewriting an output based on them, using automation, is different than a human mind taking in many inputs for human mind knowledge and enabling new outputs from a human author."
    ],
    "link": "https://www.bramadams.dev/issue-55/",
    "first_paragraph": "How the past of Personal Computing gives us a hint into the future of Personal Library Science",
    "summary": "In a thrilling episode of \"When Nostalgia Meets Overthinking,\" a brave blogger valiantly tries to convince the internet that the future of hoarding digital snippets from our unremarkable lives is actually rooted in the ancient art of personal library science. Armed with a vision that's as clear as mud, commenters leap into the fray, injecting levels of pretension and overcomplication that could only be achieved by people who genuinely believe organizing their digital clutter is a task worthy of a Homeric epic. One visionary suggests leveraging LLM technology to manage personal libraries, not realizing the irony of needing AI to manage the book quotes they'll never look at again. Meanwhile, another dreams of creating a privacy-invading, life-logging behemoth that somehow makes browser history sexy, clearly misunderstanding the assignment. The collective delusion that organizing digital detritus is a noble quest rather than a procrastination technique confirms humanity's capacity for self-deception knows no bounds."
  },
  {
    "title": "Reentry \u2013 An Orbital Simulator (reentrygame.com)",
    "points": 57,
    "submitter": "belter",
    "submit_time": "2024-04-28T12:41:27",
    "num_comments": 8,
    "comments_url": "https://news.ycombinator.com/item?id=40188173",
    "comments": [
      "Great looking game, but the special EULA you have on Steam using eulatemplate.com has some disagreeable clauses. Eg.We can't:- Allow any third party to use the Software on behalf of or for the benefit of any third partySo I can't let a friend play?- Use the Software for any purpose that Wilhelmsen Studios considers is a breach of this EULA agreementAmbiguous phrasing that subjects me to the whims of your interpretation.- The user agrees to indemnify and hold Wilhelmsen Studios harmless from and against all the risks arising out of the use of the Software.Um, HELL NO.  I'm not indemnifying you just to play a game.  Especially with the \"you can modify it at any time any way you want\" clause below.What if you (even accidentally) program the game to format my computer, participate in a botnet, download illegal content etc?Or if the games causes YOU damages in some way - I'm not paying you for damages caused by your own code, or presuming to cover the costs of your lawyers if we go to court.- Wilhelmsen Studios will offer the user no warranty on any issue arising out of the use of the \u201cSTEAM\u201d service, and give no support thereto.So if Steam pulls the game two days after I buy it it's my problem not yours?- The terms also apply to any Wilhelmsen Studios updates, supplements, Internet-based services, and support services for the SoftwareWait - so if I hire you to do some consulting for me commercially, I'm deemed (in the absence of any other agreement) to accept these terms for that?  This is a very unusual clause (and the EULA is even more objectionable for a commercial relationship).- The provisions that by their nature continue and survive will survive any termination of this EULA agreement.Again, very vague, and if a lawyer did this I'd tell them it's lazy drafting.I was really excited to try your game but this EULA makes it a hard pass.  This is far from the usual \"Indie\" approach typically seen here.  Maybe you could explain why you need such unusual clauses, and why you can't achieve your required protections in a less user-hostile fashion.",
      "This looks awesome.If you have a VR headset the Apollo 11 experience[0] is really cool as you get a sense of how cramped some of the capsules are. I bet this will deliver the same feeling with VR.0: https://store.steampowered.com/app/953840/Apollo_11_VR_HD/",
      "I can confirm, loved this app.",
      "I hope the text in the game was spell-checked more thoroughly than that in the promo page.",
      "Woah. And I was expecting some dinky Lunar Lander type game.",
      "Just astonishing that one person (largely) is doing all the research and development for this game.",
      "surprisingly there is a very similar precedent: https://en.m.wikipedia.org/wiki/Orbiter_(simulator)something about space fight simulators perhaps",
      "https://youtu.be/JCKb2r_E1PQ"
    ],
    "link": "https://reentrygame.com/",
    "first_paragraph": "",
    "summary": "In the latest chapter of our ongoing saga, \"Developers vs. Common Sense,\" a plucky code-wrangler at Wilhelmsen Studios has decided that the best way to launch their orbital simulator into the stratosphere of gaming stardom is by anchoring it down with an EULA heavier than a Saturn V rocket. Prospective astronauts are thrilled to discover they can't share their joyride with a friend without running afoul of the law, and should any part of the game accidentally turn their PC into a paperweight, they're on the hook for damages. Meanwhile, the comment section orbits from excitement over VR capabilities to dissecting legal jargon that even a trained cosmonaut couldn't navigate. One small step for game development, one giant leap for legal absurdity."
  },
  {
    "title": "Speeding up C++ build times (figma.com)",
    "points": 96,
    "submitter": "skilled",
    "submit_time": "2024-04-27T09:34:57",
    "num_comments": 69,
    "comments_url": "https://news.ycombinator.com/item?id=40178634",
    "comments": [
      "I wrote about how I keep build times sane in SumatraPDF at https://blog.kowalczyk.info/article/96a4706ec8e44bc4b0bafda2...The idea is the same: reduce the duplicate parsing of .h files.I don't use any tools, just a hard-core discipline of only #include'ing .h in .cpp files.The problem is that if you start #include'ing .h in .h, you quickly start introducing duplication that is intractable, for a human, to avoid.On another note: C++ compiler should by default keep statistics about the chain of #include's / parsing during compilation and dump it to a file at the end and also summarize how badly you're re-parsing the same .h files during build.That info would help people remove redundant #include's.But of course even if they do have such options, you have to turn on some flags and they'll spam your build output instead of writing to a file.",
      "Having written, benchmarked, and maintained C and C++ compilers for decades, I know why the compiles are slow:1. phases of translation2. constant rescanning and reparsing of .h files3. cannot parse without doing semantic analysis4. the preprocessor has its own tokens - so you gotta tokenize the .h file, do the preprocessing, convert it back to text, then tokenize the text again with the C/C++ compiler. This is madness. (Although with the C compiler I did manage to merge the preprocessor lexer with the compiler lexer, this made it the speed champ.)This experience fed into D which:1. uses modules instead of .h files. No matter how many times a module is imported, it is lexed/parsed/semanticed exactly once.2. module semantics are independent of who/what imports them3. no phases of translation4. lexing and parsing is independent of semantic analysis",
      ">On another note: C++ compiler should by default keep statistics about the chain of #include's / parsing during compilation and dump it to a file at the end and also summarize how badly you're re-parsing the same .h files during build.Clang does offer something very close to this, and if you use it you'll find parsing the same/duplicate header files contributes on the order of microseconds to the overall compile time. Your article is from 1989, which is likely before compilers implemented duplicate header file elimination [1], but nowadays all C++ compilers optimize the common #ifndef/#define header guard as well as #pragma once so that they entirely ignore parsing the same file over and over again.[1] https://gcc.gnu.org/onlinedocs/cpp/Once-Only-Headers.html",
      "True, but when you're compiling a.c and then b.c, the .h files get reparsed all over again.",
      "As much as I hate long compilation times, I also value code discoverability, readability, and consistency. Your (i.e., Rob Pike\u2019s) strategy seems like a nightmare to me. I love Rob, but I can\u2019t follow this rule.",
      "If you use a \"unity\" build (all .cpp files concatenated into one compilation unit) with the normal '#pragma once' or guard in the headers, then you can be certain that every header file is parsed only once, with no discipline needed. CMake can do this for you with an option. You lose the ability to do incremental builds of individual changed files, but it may be fast enough that you don't care.For my own personal projects, I just use ccache and precompiled headers. It's good enough for me. I don't want to have to apply \"hard-core discipline\" to my projects.",
      "Oh, the joys of using a language that thinks (automated) copy-and-paste coding is the same as a module system.",
      "> On another note: C++ compiler should by default keep statistics about the chain of #include's / parsing during compilation and dump it to a file at the end and also summarize how badly you're re-parsing the same .h files during build.Not exactly that, but do you know clang's -ftime-trace and tools like https://github.com/aras-p/ClangBuildAnalyzer which help analyzing where time is actually spent? (In small repeated headers I don't see much of a problem, but they of course may contain not so small things ...)",
      "Shouldn't precompiled headers mitigate that?",
      "How much of a speedup did you get switching over to Rob Pike style includes?"
    ],
    "link": "https://www.figma.com/blog/speeding-up-build-times/",
    "first_paragraph": "",
    "summary": "In a desperate bid to make C++ less of a pain to everyone waiting for it to compile, a hero emerges with sage advice: Just don't include headers in headers, people. Commenters, in a display of unparalleled originality, suggest everything from using precompiled headers, to unity builds, to simply bemoaning the state of compiler technology that doesn't magically make their spaghetti code compile instantaneously. Meanwhile, a veteran compiler whisperer reminiscences about the Good Ol' Days of hacking the lexer, inadvertently revealing that maybe, just maybe, the problem isn't C++ but the ancient arcane rituals programmers perform in its name. Oh, and someone discovered that tools exist to analyze compile times, prompting a collective gasp from an audience that apparently regards CMake as the peak of innovation."
  }
]