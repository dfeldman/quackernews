[
  {
    "title": "Generating Simpson's Paradox with Z3 (kevinlynagh.com)",
    "points": 62,
    "submitter": "surprisetalk",
    "submit_time": "2024-08-11T21:53:14",
    "num_comments": 10,
    "comments_url": "https://news.ycombinator.com/item?id=41219562",
    "comments": [
      "Biggest trap of Simpson's paradox is the results can change with every level of granularity.If you take the example of Treatment A vs Treatment B for tumors, you can get infinite layers of seemingly contradicting statemens:\n- Overall, Treatment A has better average results\n- But if you add tumor size, Treatment B is always better\n- But if you add gender to size, Treatment B is always better\n- But if you add age category to gender and size, Treatment A is always better\n- etc...It totally contradicts our instincts, and shows statistics can be profoundly misleading (intentionally or not).\n \nreply",
      "Like Tumors are higher dimensional objects than what human brains are trained to perceive.\n \nreply",
      "If the previous comment is right, then this one is plainly also true in some sense. I'm disappointed to see downvotes.\n \nreply",
      "I just love the napkin equation in the middle of [1], it really made it clear to me[1]: https://robertheaton.com/2019/02/24/making-peace-with-simpso...\n \nreply",
      "The wikipedia gives a reasonable take:\"Mathematician Jordan Ellenberg argues that Simpson's paradox is misnamed as 'there's no contradiction involved, just two different ways to think about the same data' and suggests that its lesson 'isn't really to tell us which viewpoint to take but to insist that we keep both the parts and the whole in mind at once.'\"My own take is that any statistic has a value and a strength (in the case of averages, strength can be the number of instances averaged, for instance). You can have to keep in mind both.https://en.wikipedia.org/wiki/Simpson%27s_paradox\n \nreply",
      "Z3 is kind of my new favorite thing right now.  I have a problem that lends itself quite well to constraints-based reasoning, and I need it to be optimized. I'm sure I could have hacked something together using any number of programming languages, but after playing with Z3 for a bit, I realized that this could be easily done in around ~100 lines of an SMT2 file, and probably be considerably faster.Tools like this make me feel a lot better about all the time I wasted playing with predicate logic.\n \nreply",
      "Curious, would your data constraints be related to http://equationofhappiness.com/Would like to know how you us Z3 to evaluate emotional happy Q. Could you apply that to evaluate a piece of content (like thread, feed, comment) and then evaluate the energy of the thing for its happiness quotient value whatever? then you can just Z3 the thread and determine the psychological predicted impact...Maybe you could then design casula games that provide the positive happy Q vibes.--I was in a program from when I was a baby with UCSD that was a life tracking project and they would check in with you every so often to see where you were on that trajectory - and where you were happy in life etc.Problem is that it was also tied to Morehouse University, MK, Vic Baranco, and a bunch of other Stanford thingy's from the 70s that we all know abou these days.\n \nreply",
      "Seems like an inappropriate use of the word \"paradox\". How about Simpson's intuitive situation?\n \nreply",
      "Paradoxical iff data sets are isolated; explains the Gemini effect. Preferences tend to model future outcomes if sample sizes of surveyors are combined.\n \nreply",
      "\u201cGoing against common expectation\u201d is well established as one of the definitions of \u201cparadox\u201d. Check any dictionary you choose.\n \nreply"
    ],
    "link": "https://kevinlynagh.com/z3-simpsons-paradox/",
    "first_paragraph": "I\u2019ve been reading Pearl\u2019s Causal Inference in Statistics, and one of the exercises poses this problem:Baseball batter A has a better batting average than his teammate B. However, someone notices that B has a better batting average than A against both right-handed and left-handed pitchers. How can this happen?The Z3 Theorem Prover is a great lil\u2019 tool for solving these sorts of problems.\nThe following generates an example of this situation, which is more commonly known as Simpson\u2019s Paradox.Running Z3 against this file generates this output, showing an example satisyfing our constraints:The batting avergaes in tabular form:The key to understanding the paradox is that the players did not bat against the same set of pitchers. A batted against 5 lefties and 12 righties; B against 2 and 11.If you liked this, you might like Kevin\u2019s email newsletter.As an Amazon Associate, we may earn commissions from qualifying purchases from Amazon.com.",
    "summary": "At kevinlynagh.com, another tech enthusiast throws the Z3 Theorem Prover at a baseball conundrum right out of a middle school textbook, sparking intense enlightenment about Simpson\u2019s Paradox\u2014because nothing says \"innovative tech use\" like simulating simplified sports scenarios. Commenters leap at the chance to one-up each other, illustrating their <em>profound</em> grasp on statistics with examples pulled from every imaginable corner of irrelevance\u2014because if you can\u2019t confuse a casual observer with your intellectual digression, are you even trying? One proud mathematician redefines paradoxes, apparently trying to recalibrate dictionaries everywhere. If you enjoy pseudo-intellectual musings thinly veiled as content, and lots of links for that sweet, sweet affiliate cash, this blog might just be your new favorite thing. \ud83e\udd13\ud83d\udcb8"
  },
  {
    "title": "Verso \u2013 web browser built on top of the Servo web engine (github.com/versotile-org)",
    "points": 592,
    "submitter": "pabs3",
    "submit_time": "2024-08-11T12:34:41",
    "num_comments": 202,
    "comments_url": "https://news.ycombinator.com/item?id=41215727",
    "comments": [
      "In other exciting Servo-browser news, Servo and Redox OS have submitted a joint proposal to fund the porting of SpiderMonkey and WebRender to Redox: https://www.redox-os.org/news/this-month-240731/\n \nreply",
      "So we will, in ~5 years time have two new browser, one in Rust and one in Swift.I hope in the process of doing it we will find new ways of doing things.\n \nreply",
      "I'd like to see Swift adopted more on non-Apple operating systems, some of the recent GTK apps written in Swift are pretty cool.\n \nreply",
      "I'd really rather not, personally. All my Swift experiences have been fighting the abysmal compilation times.\n \nreply",
      "That's a bit of an issue in Rust world, too.\n \nreply",
      "What apps are you thinking of? Curious to check them out.\n \nreply",
      "There's been a lot of work on this in the last few years with Windows support, preliminary Android support is also being worked on and should appear at some point in Swift 6.\n \nreply",
      "Is swift going to do what flutter and kotlin multiplatform cannot?\n \nreply",
      "sadly Gtk's support for MacOS is best efforts only\n \nreply",
      "What swift browser are you referring to?\n \nreply"
    ],
    "link": "https://github.com/versotile-org/verso",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        A web browser that plays old world blues to build new world hope\n      A web browser that plays old world blues to build new world hope.Verso is a web browser built on top of Servo web engine. It's still under development. We don't accept any feature request at the moment.\nBut if you are interested, feel free to help test it.You can also use chocolatey to install if you prefer it.For unified environment setup and package experience, we choose Flatpak to build the project from the start.\nPlease follow the Flatpak Setup page to install Flakpak based on your distribution.We also support building Verso in nix shell. But we don't bundle it in nix at the moment.If you prefer to build the project without any sandbox, please follow the instructions in Servo book to bootstrap.\nBut please understand we don't triage any build issue without fla",
    "summary": "Title: \"Verso - Because the world needed another half-baked browser\"\n\nIn an admirable attempt to reinvent the wheel, a band of intrepid developers introduces <em>Verso</em>, yet another browser pledging allegiance to the obscurest corners of open-source technology. Not accepting any feature requests (because who really wants user feedback when you're building the digital equivalent of a unicorn?), the Verso team solemnly invites everyone to help test their perpetually 'under development' marvel. Meanwhile, the comment section metamorphoses into a tech utopia where enthusiasts fantasize about a future where every operating system comes with its bespoke, buggy web browser. Keep two aspirins and your legacy browsers handy, folks\u2014you might need them if you plan on actually browsing the web. \ud83e\udd84\ud83d\udcbb"
  },
  {
    "title": "Adbfs-rootless \u2013 Mount Android phones on Linux with adb. No root required (github.com/spion)",
    "points": 60,
    "submitter": "peter_d_sherman",
    "submit_time": "2024-08-11T20:22:11",
    "num_comments": 7,
    "comments_url": "https://news.ycombinator.com/item?id=41219080",
    "comments": [
      "Hello, maintainer here. Happy to see this little project on the front page of HN. Unfortunately it hasn't received the appropriate attention from me lately, mainly because of the difficulties of running tests (and the android emulator) on GH action runners. Attempt to add some basic tests can be found here https://github.com/spion/adbfs-rootless/pull/62This submission motivated me to check out the latest state of virtualization in GHA and it looks like GH shipped it for all linux runners https://github.com/actions/runner-images/discussions/7191#di... - so it might be possible to get that PR working now.\n \nreply",
      "Hi maintainer, can you please outline the differences in functionality between using this on a rooted vs non-rooted device? Thank you\n \nreply",
      "I've never used it with a rooted device! :)I don't think there should be any significant difference in funcitonality, other than perhaps the set of directories accessible. In general, you should be able to access anything that you can view / access using `adb shell ls`, `adb pull` and `adb push`\n \nreply",
      "Understood, thanks. I thought there was some exploit or something in play.\n \nreply",
      "Nothing that exciting, I'm afraid.\n \nreply",
      "ADB is such a crummy experience for file transfers, and Android File Transfer is somehow even worse.  This sounds great!\n \nreply",
      "MacDroid on MacOS is a shareware utility providing similar functionality of using ADB Shell level FS access inside a directory in Finder using the new File Provider API\n \nreply"
    ],
    "link": "https://github.com/spion/adbfs-rootless",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Mount Android phones on Linux with adb. No root required.\n      This variant of adbfs works even WITHOUT having root access (busybox) on your phone!You will need libfuse-dev and adb. You will also need build-essential, git, and pkg-config. On Ubuntu:Clone the repository:Build:Optional: If you have a separate copy of android-sdk and would\nlike to use that adb, copy the binary adbfs to the android-sdk/platform-tools\ndirectory. If platform-tools is in your $PATH you can skip this step.Create a mount point if needed (e.g. in your home directory):You can now mount your device (also from the platform-tools dir):If you want to trigger a media rescan after every operation, use the option -o rescan:Have fun!When running you get the following error:Solution: Make sure that USB Debugging is enabled.Then fusermount -u /media/mount/path before t",
    "summary": "**Everyone's a Kernel Expert** - A bunch of heroic keyboard warriors at Hacker News discovered another groundbreaking tool: adbfs-rootless, which promises to mount your Android phone to Linux with *zero* root privileges. Excitement ensued as the only requirement appeared to be clairvoyance in USB debugging, a PhD in dependencies, and sacrificing your firstborn to the FUSE gods. The creator popped in, announcing he\u2019d forgotten about the project while being busy not improving it. Meanwhile, the comment section turned into a tech support group trying to decide whether the software is useless or just mostly useless, with low-grade reminiscing about every slightly relevant tool they used since 2003. \"No exploits here\", they clarified; truly, the only thing exploited here is user optimism. \ud83d\ude05"
  },
  {
    "title": "China's total wind and solar capacity outstrips coal (renewablesnow.com)",
    "points": 58,
    "submitter": "teractiveodular",
    "submit_time": "2024-08-11T23:54:18",
    "num_comments": 26,
    "comments_url": "https://news.ycombinator.com/item?id=41220098",
    "comments": [
      "Worth highlighting: The research firm projects that by 2026, solar power alone will outstrip coal as China's main energy source, reaching 1.38 TW in cumulative capacity, 150 GW above coal.Last year, China added a record 293 GW of wind and solar, driven by gigawatt-scale renewable hub projects. Coal power additions were about 40 GW in 2023, while the first half of 2024 saw only 8 GW of new coal capacity, according to Rystad Energy\u2019s estimates.After a record 216 GW of solar installations last year, China is expected to exceed 230 GW this year. Wind capacity additions are projected to be 75 GW in 2024.To put those numbers into perspective, the largest nuclear power plant complex in the US (Vogtile) has a capacity of 4.6 GW, while the world's largest power plant at the Three Gorges does 22.5 GW (max).\n \nreply",
      "How long is the 294 GW produced , For solar is the rated output only produced when sun shining?- which means the quoted OP is only for a few hours a day?   The nuclear power plan OP would be constant.\n \nreply",
      "Currently, the world will be deploying ~660GW of solar per year by end of year, and at current manufacturing capacity ramp rates, will reach ~1TW/year in ~18 months. This doesn\u2019t stop, it only continues to climb. The Sun delivers enough energy to Earth in under an hour to power humanity for a year. There will certainly be challenges along the way as the world heads towards net zero, but none of this is unsolvable with current renewable and storage technology.Renewable and storage costs continue to decline, new nuclear is dead, existing nuclear will run as long as safe to do so until decommissioning. Fission lost to fusion at a distance.https://www.lazard.com/media/xemfey0k/lazards-lcoeplus-june-...https://ourworldindata.org/grapher/installed-global-renewabl...https://pv-magazine-usa.com/2020/05/14/overbuilding-solar-at...https://www.wartsila.com/energy/towards-100-renewable-energy...https://www.bloomberg.com/news/newsletters/2024-07-09/china-... | \nhttps://archive.today/DklaA\n \nreply",
      "> only produced when sun shining?- which means the quoted OP is only for a few hours a day?China has a very large desert region in the northwest that receive a LOT of sun year round, so I'd expect the panels to be producing a decent amount of power throughout most of the day.The biggest problem is actually distance - even a few years back, I was reading that there was a massive amount of solar power, but a very significant percentage was lost in transmission to the most densely populated areas of China which are predominantly in the southeast and east of the country.These areas are also where a lot of rare earth metals are mined, so feasibly it would be relatively cheap to produce giga-batteries there too smooth demand, but I also suspect that they could see significant advantage to doing things that are traditionally energy-costly like electrolysis of water to create hydrogen that could be transferred across the country by pipe with pretty minimal losses and then burned to drive turbines at the other end. Such systems might end up with overall fewer losses than just having thousands of miles of power grid.Another thing I read recently that was interesting is that it's getting approximately close to free for China to produce solar panels now, significantly cheaper than anywhere else in the world. Largely this is also due to the excess power produced in the northwest that can be cheaply used in the processing needed to produce more solar panels.\n \nreply",
      "Capacity factor of solar is generally ~20%\n \nreply",
      "there in lies the problem with nuclear.Solar is cheaper and easier, so when the sun is shining you get essentially free energy while the nuclear cant be ramped down so you are now producing excess energy during the day.solar eats nuclear's lunch during the day... with the long term waste issue and military target danger of nuclear thrown in.\n \nreply",
      "I'm not one to champion China, but thank god that they seem to be pretty co2 conscious. It's easy to envision China having leadership that didn't give a fuck about climate change (or didn't want to hear it was real) and just went full on coal energy independence.\n \nreply",
      "One of the best aspects of Chinese energy policy is there isn't much evidence they care about CO2 at all. They aren't world's largest coal consumer (by a 5x margin I believe [0]) because they care about CO2.They care about cheap energy and energy security. They've been relatively transparent that they are pursuing all available options as far as those options will go. It has been a wildly successful strategy for them in securing prosperity and I wish the west had that sort of ambition.[0] https://ourworldindata.org/grapher/coal-consumption-by-count...\n \nreply",
      "Those quantities are astonishing, no doubt. Does \u201ccapacity\u201d here mean \u201cnameplate capacity,\u201d in the sense of the maximum that the installation can produce under peak input conditions? So for solar, the actual energy flowing into the grid would be on the order of 10-20% of that?\n \nreply",
      "Yes, spot on, but it'd be closer to 25% for a grid-scale solar PV installation.\n \nreply"
    ],
    "link": "https://renewablesnow.com/news/chinas-total-wind-and-solar-capacity-outstrips-coal-rystad-says-865106/",
    "first_paragraph": "",
    "summary": "In an electrifying turn of events, China\u2019s wind and sun-powered escapade allegedly dethrones smoggy old coal as the cool kid on the energy block, says a blog post nobody fact-checked. Internet experts, armed with bad math and eco-buzzwords, celebrate this twilight saga of renewables biting the fossil fuel dust, ignoring minor nuisances like solar only working when the sun deigns to shine. Meanwhile, the comment section morphs into a grand arena of armchair energy professionals squabbling over capacity factors, as if bombarding each other with hyperlinks and acronyms will finally crown solar the prom queen of energy sources. If only this much energy was funneled into their comprehension skills! \ud83c\udf1e vs. \u26ab\ufe0f!"
  },
  {
    "title": "Server Mono: A Typeface Inspired by Typewriters, Apple's SF Mono, and CLIs (servermono.com)",
    "points": 184,
    "submitter": "yankcrime",
    "submit_time": "2024-08-11T16:04:49",
    "num_comments": 43,
    "comments_url": "https://news.ycombinator.com/item?id=41217136",
    "comments": [
      "So, if you're going to demonstrate the box drawing characters \u2014 and in a monospaced font, I would \u2014 they should line up?E.g., under \"lines\", the rows are overlapping; https://i.imgur.com/KnOP2Wu.png ; I would think they're only supposed to just touch, with no gap, no overlap.The boxes, similarly, don't quite line up right. https://i.imgur.com/6pVYh9a.png (Even the 100% box isn't lining up right, although somehow what FF screenshotted != what it rendered. sigh.) The point being, you want these to tile seamlessly. Oddly, they tile differently in the pictures-of-font that break up the page. (Which I'm not sure what they're supposed to be? One is called \"5af1d7a5-fa60-4827-9b4f-808cdb635d59\" and has no alt text. They remind me of Dwarf Fortress though.)As other people hint, this seems like the line height is cramped. I/l/1 ambiguities is a deal breaker for any terminal font, though.\n \nreply",
      "Number One, Pipe Character, lower case L, upper case I, zero and O, Parentheses and Brackets, are so common pain points on coding and terminal fonts. Those should be painfully distinct.\n \nreply",
      "The first thing I look at on ANY font is the capital \"i.\" No crossbars? No dice.This one has those and a distinguishable zero vs. O, so far so good.Whoops; someone pointed out that 1 and l are indistinguishable. That's a major failing.\n \nreply",
      "> Whoops; someone pointed out that 1 and l are indistinguishable. That's a major failing.Agreed.\n \nreply",
      "They do line up, if you install and use the OTF version:https://imgur.com/a/N2tNaiOalthough some characters still seem to be missing, most of them work as intended.edit: nevermind, looks like it was using Lucida Sans instead! what is going on? does the OTF only include ASCII or something?\n \nreply",
      "For those commenting on the importance of character ambiguity, I completely agree, and offer \"DP Sans Mono\", a font specifically designed for unambiguous proofreading.https://www.pgdp.net/wiki/DP_Sans_Monohttps://www.pgdp.net/c/faq/font_sample.phpfont download link at https://www.pgdp.net/phpBB3/viewtopic.php?t=70714\n \nreply",
      "I can't put my finger on it but I don't find this enjoyable to read at all.. so I don't know much about readability claims here. Maybe I'm an outlier.\n \nreply",
      "The line spacing is way too tight (this is line-spacing: 1).Obviously that is beneficial for ASCII-art (smaller vertical gaps), but plain text would benefit from at least 1.1 and maybe 1.2.I am not a typographer but the cap height of this font (I think it's the cap height) appears quite large, when perhaps it would be better to have a slightly smaller cap height so the ASCII-art features would work well at line-height 1.0 without the letters feeling so vertically cramped.Basically, slightly less-tall letters.But as I say, not an expert.\n \nreply",
      "line spacing beyond minimal ought not be an attribute of a font. I can see a \"recommended\" line spacing for some type of \"vertical as well as horizontal beauty\", but drives me nuts when choosing a font also chooses scads of whitespace.I like to squeeze a lot of info on a page, why do other people get to say \"no\". Sure, space out your wedding invitation, I can deal, but on the daily text on my screen, that should be up to me.I do prefer \"typewriter\" fonts that are more squoze horizontally, this one seems to have loosened the ol belt a little, maybe for more \"squareness\".\n \nreply",
      "Oh I am not saying it should be.The problem is that to resolve the readability issues many people seem to be observing on that page you need to set it to 1.1 or 1.2 (try it!)But that will break the console pseudographics.Part of the problem with this font appears to be large, space-filling (yes, squareness is another way to put it) glyphs, when if they had a bit more of a difference between the cap height and the ascender height the full-height pseudo graphical glyph stuff would still work without the textual characters feeling so cramped.At least, I think that is right. I know just about this stuff to be wrong in important ways.Either way there must be a solution to this; it feels like a missed opportunity.\n \nreply"
    ],
    "link": "https://servermono.com/",
    "first_paragraph": "SERVER MONOREGULAR WEIGHTSIL OPEN FONT LICENSE 1.1Server Mono is a typeface inspired by typewriters, Apple's San Francisco Mono, ASCII art, command-line interfaces, and programming tools.Server Mono continues the long tradition of monospace fonts, renowned for their versatility in command-line interfaces due to their clear readability and uniform character width. You'll notice our own preferences reflected in the design, as we value how it performs across various viewing contexts. Server Mono offers excellent readability and pairs well with its uniform, predictable, and orderly appearance.We anticipate that Server Mono will be a valuable choice for your websites, game worlds, and custom desktop application interfaces, especially where precise alignment is essential.This single-weight font was released in 2024 by the Internet Development Studio Company of Seattle, Washington. Created by designers Tim Vanhille and Matthieu Salvaggio, with supplemental direction from Jimmy Lee and the Int",
    "summary": "**Typewriter Nostalgia Meets Coding Catastrophe: A Mockumentary**\n\nIn the latest typographic misadventure, *Server Mono* stretches to unite the crisp nostalgia of typewriters with the stark functionality of command lines, serving a single-weight circus straight out of Seattle. By mashing Apple's chic SF Mono with a dose of yearning for some ASCII-art arcade, it crafts a marvel that's uniform, predictable, and quaintly orderly\u2014perfect for your nephew\u2019s first \u2018Hello, World!\u2019 \ud83d\ude44 Design enthusiasts Tim and Matthieu (with cheerleading from Jimmy) ensure you can squint at your screen while guessing whether you're looking at an \u2018l\u2019, \u2018I\u2019, or \u20181\u2019. Meanwhile, battalions of commenters engage in a pixel-perfect joust over misaligned box characters and claustrophobic line heights, delighting in the OTF bait-and-switch that probably renders in Comic Sans on a bad day. \"Make fonts unreadable again,\" they cry, earnestly ignoring the subtle joys of legibility! \ud83e\udd13"
  },
  {
    "title": "The most cited authors in the Stanford Encyclopedia of Philosophy (schwitzsplinters.blogspot.com)",
    "points": 23,
    "submitter": "bbor",
    "submit_time": "2024-08-11T04:03:12",
    "num_comments": 12,
    "comments_url": "https://news.ycombinator.com/item?id=41213902",
    "comments": [
      "Not sure the point of having a filter to select only authors born after 1900.Does show the bias towards the American end of Anglo-American analytic philosophy though.Quine is ponderous. No idea how David Lewis made it to the top of the list either.Without Wittgenstein included, to me this list seems fairly pointless. Realise he might not be close to the top but without his work most of these American philosophers would be nowhere. Maybe I have a different idea as what counts as \u201ccontemporary\u201d.  Hume seems pretty contemporary to me. So does Nietzsche.\n \nreply",
      "modern yes, contemporary no...\n \nreply",
      "John Von Neumann is #145, pretty cool. Anyone else spot any other programming greats in the list?\n \nreply",
      "> \u201dOnly authors born 1900 or later are included.\u201dAh, that\u2019s why Plato isn\u2019t #1\n \nreply",
      "A series of footnotes to David Lewis doesn\u2019t have quite the same ring to it.\n \nreply",
      "Plato cited Socrates a lot\n \nreply",
      "Fascinating list that I thought yall would enjoy! If you\u2019re not yet aware, https://plato.stanford.edu is as close to \u201cphilosophical canon\u201d as it gets in modern American academia.Shoutout to G\u00f6del and Neumann taking top spots despite not really being philosophers, at least in how they\u2019re remembered. Comparatively, I\u2019m honestly shocked that neither Bohr nor Heisenberg made the cut, even though there\u2019s multiple articles on quantum physics\u2026 Turing also managed to sneak in under the wire, with 33 citations.The bias inherent in the source is discussed in detail, and I would also love to hear HN ideas on how to improve this project, and how to visualize the results! I\u2019m not the author, but this is right up my alley to say the least, and I\u2019d love to take a crack at it.\n \nreply",
      "> and how to visualize the results!There's bound to be something to be teased out from who referenced whom and when.Eg: (random example) https://en.wikipedia.org/wiki/Graham_Priest had a great many students from the 1980s onwards, coinciding with the rise of plato.stanford.edu personal computers and the internet.He's come in at #51 or so likely on the back of a generation of philosophy students with technology crossover writing up early articles on plato and throwing in a citation to Priest.I'm in no way implying this is undeserved, just as an example of some of the weighting bias coming from the era when many plato stub articles originated.\n \nreply",
      "very out of touch with European philosophy, and therefore global philosophy. Strange anglo-centric project.edit: that's literally the point of the post, my bad.\n \nreply",
      "> 2. Quine, Willard van Orman (213)It's easy to become number 2 when you reference yourself /s(For reference, a Quine is a type of computer program that takes no input and only reproduces it's source code, so basically self replicating. This is based on Quine's research into the logic of recursion and replication [0])[0] - https://en.m.wikipedia.org/wiki/Quine_(computing)\n \nreply"
    ],
    "link": "https://schwitzsplinters.blogspot.com/2024/08/the-378-most-cited-contemporary-authors.html",
    "first_paragraph": "reflections in philosophy of psychology, broadly construedTime for my five-year update of the most-cited authors in the Stanford Encyclopedia of Philosophy!  (Past analyses: 2010, 2014, 2019.)\n \n\nImage of a young David K. Lewis [source]\n\nMethod\n  \n* Only authors born 1900 or later are included.\n\n* Each author is only counted once per headline entry (subentries are excluded). In 2010, I found that this generated more plausible results than counting authors multiple times per entry.\n\n* As in 2019, but unlike 2014 and 2010, I include co-authors.  Due to the unsystematic formatting of SEP references, this was a somewhat noisy process.  To capture last authors, I searched for \"and\" or \"&\" in each bibliographic line, if appearing before a \"19\", \"20\", \"forthcoming\", or \"in press\", then pulled the text immediately after.  To capture second authors that were not last authors, I searched for a second comma before such a date-preceding \"and\" or \"&\", then pulled the text after that.  I omitted co-",
    "summary": "**Who's Who of Circle-Jerking In Philosophy: A Meticulous Count of Academic Bites and Echoes**\n\nIn a riveting display of counting exercises masqueraded as intellectual analytics, here comes the bi-decade cavalcade of the most-cited philosophers since 1900, per the ever-esteemed <em>Stanford Encyclopedia of Philosophy</em>. Watch the American philosophical steamroller chug along, flattening nuances and European scholars alike. Commenters chime in with earth-shattering insights like \"Quine is ponderous\" and the baffling exclusion of quantum noteworthies leaves readers reeling\u2014or not. Dive into this tempest of tedium, adorned with gems such as Plato's conspicuous absence simply because he didn't make the 1900s cut. Who would've thought auditing footnotes could be so exhilarating, yet so pedantically pointless? \u23f3\ud83d\udcda\ud83c\udf00"
  },
  {
    "title": "Firefox Browser Ported to HaikuOS (haiku-os.org)",
    "points": 407,
    "submitter": "return_0e",
    "submit_time": "2024-08-11T08:23:43",
    "num_comments": 161,
    "comments_url": "https://news.ycombinator.com/item?id=41214762",
    "comments": [
      "Some history about Firefox and BeOS. Before Firefox, there was Mozilla, which had a BeOS port (called Bezilla). Bezilla was bloated and slow. So the BeOS community tried to make a stripped version of Mozilla with only the browser (minus all the bloat). This project became an inspiration to do the same for Mozilla, and that product became Firebug (or something similar - edit phoenix, then firebird), which due to trademark conflicts got renamed to Firefox that we all know today. So in a round-a-bout way, we have come full circle after 20 years, Firefox is finally ported to the platform that inspired its creation.Kind of poetic. We should write a 3-5-3 Haiku about this journey.\n \nreply",
      "It wasn't Firebug, that was a developer  tool extension.  It was first Phoenix which hit trademark issues, and then Firebird which hit trademark issues, which then became Firefox.\n \nreply",
      "From what I remember, Firebird was more related to the database open source project which was a fork of InterBase, so at that time it was relatively well known due to its roots with IB.\n \nreply",
      "Maybe it hit trademark issues, but the reason I remember from slashdot was that phoenix was already a semi-popular open source project in the debian repository, so firefox had to be named from phoenix to mozilla-phoenix. But firefox at the time still named phoenix just ran so much better on windows than linux, it was funny.\n \nreply",
      "No.Phoenix Technologies, the BIOS maker sent me an email telling us they made a BIOS web browser and our name would confuse things. Under advice from our legal support, we agreed to change the name.We changed to Firebird and the OSS database project bombed my inbox (and Mitchell's too) for a week with hundreds of nastygrams and though we were in the clear on TM, we didn't want to stomp on the little OSS project so we changed again.I was at the whiteboard when Jason Kersey of mozBin, mozillaZine, and later Chrome fame came up with Firefox. We had two columns of names, forces of nature and animals and were pairing them up.\n \nreply",
      "was waterduck considered?\n \nreply",
      "Stormcow\n \nreply",
      "Both Phoenix and Firebird were over the naming and trademark clashes:For firebird, https://www.cnet.com/tech/tech-industry/mozilla-holds-fire-i... and https://www.cnet.com/tech/services-and-software/mozillas-fir... in this case it was AOL Time Warner that owned the Firebird trademark for the database.2) For Phoenix, https://web.archive.org/web/20070914035447/http://www.ibphoe... the main reporting on it seems to be lost but wikipedia still backs it up\n \nreply",
      "Phoenix was because of a challenge from Phoenix Technologies, the BIOS maker. Firefox was because of concerns about stomping on a small OSS project, the Firebird Database. I was responsible for all of this at Mozilla. Happy to answer any questions.\n \nreply",
      "With a fraction of the userbase it had 20 years ago, thanks to everyone that keeps shipping Chrome with their applications, testing only with Chrome developer tools, and so on.Anyway, congratulations to anyone involved in the port.\n \nreply"
    ],
    "link": "https://discuss.haiku-os.org/t/progress-on-porting-firefox/13493?page=7",
    "first_paragraph": "Amazing! Does it seem more stable than other browsers on haiku?Does it seem more stable than other browsers on haiku?This is what I call a true BeOS-fan lifestyle. It clearly a work in progress port, but the main question is: it is more stable than what we have right now? Is it wrong to ask about the status? I would just like to know how stable it is.Seems that the \u201ctrue BeOS fan lifestyle\u201d is to jump out on people in forums for asking questions? The current status is that no text can be shown due to some rendering issues,so it is not usable at all.\nThat may now change fast,however,considering the cause is likely something that can be fixed rather easy,now that the rest of this huge monster application seems to be working.X521 did say \u201csomewhat\u201d running. I don\u2019t know if he sent you a personal message or you\u2019re working on it aswell. However, from his given statement I dare to assume that there are other underlying issues aside of the obvious lack of text. I may be wrong but that\u2019s just ",
    "summary": "**The Return of the Legendary Browser: Firefox Reawakens on HaikuOS**\n\nIn an awe-inspiring display of nostalgia mixed with technological resurrection, Firefox has been ported to HaikuOS, sparking joy and confusion among the dozen users of the niche OS. Commenters, trapped in a time warp, engage in heartwarming yet utterly pointless debates over browser genealogy, reminiscing about the days when Firebird wasn't a database and Phoenix wasn't just a BIOS manufacturer. Meanwhile, the actual state of the Firefox port, unable to even render text, is glossed over with optimistic tech jargon suggesting that fixing it \u201cshould be easy\u201d\u2014because if decades of software development have taught us anything, it's that everything is always easier said than done. So gather 'round, old timers and newbies, to witness this majestic blend of past glory and present futility, wrapped in the warm, fuzzy blanket of open-source camaraderie. \ud83c\udf89\ud83d\udd25\ud83d\udc53"
  },
  {
    "title": "Show HN: My 70 year old grandma is learning to code and made a word game (grandmasword.com)",
    "points": 338,
    "submitter": "lowercarbon",
    "submit_time": "2024-08-11T16:01:50",
    "num_comments": 127,
    "comments_url": "https://news.ycombinator.com/item?id=41217109",
    "comments": [
      "Caution: Spoilers in this comment!Arriving a bit late to the party, but I couldn't resist crafting a quick binary search solution in Python.  from urllib.request import urlopen, Request\n  DICT_URL = \"https://grandmasword.com/dictionary.js\"\n  response = urlopen(Request(DICT_URL, headers={\"User-Agent\": \"Mozilla/5.0\"}))\n  words = [w.strip('\"[];\\n') for w in response.read().decode().split(\"[\")[1].split(\",\")]\n  lo, hi, answer = 0, len(words) - 1, \"\"\n  while answer != \"d\":\n      mid = lo + (hi - lo) // 2\n      print(words[mid])\n      answer = input(\"after/before/done? [abd] \")\n      if answer == \"a\":\n          lo = mid + 1\n      elif answer == \"b\":\n          hi = mid - 1\n\nTook a total of 17 guesses to find the solution:  MALPIGHIAS\n  after/before/done? [abd] a\n  RUBIFIES\n  after/before/done? [abd] a\n  TEARERS\n  after/before/done? [abd] a\n  UNMANLIEST\n  after/before/done? [abd] a\n  VORTICES\n  after/before/done? [abd] b\n  UTOPIANIZING\n  after/before/done? [abd] a\n  VERTICILLASTERS\n  after/before/done? [abd] a\n  VIROSE\n  after/before/done? [abd] a\n  VIZARD\n  after/before/done? [abd] a\n  VOLCANISE\n  after/before/done? [abd] a\n  VOLUMIZER\n  after/before/done? [abd] b\n  VOLPINOS\n  after/before/done? [abd] b\n  VOLITATE\n  after/before/done? [abd] b\n  VOLCANOLOGICAL\n  after/before/done? [abd] b\n  VOLCANIZATION\n  after/before/done? [abd] a\n  VOLCANIZES\n  after/before/done? [abd] a\n  VOLCANO\n  after/before/done? [abd] d\n\nThanks for sharing this nice game on a fine Sunday evening!  It was fun to play both manually as well as programmatically!\n \nreply",
      "let l = 0;\nlet h = dictionary.length - 1;const textbox = document.querySelector(\"input\");while (l <= h) {\n  const m = Math.floor((l + h) / 2);\n  const guess = dictionary[m];\n  const textbox = document.querySelector(\"input\");\n  console.log(\"Guessing:\", guess);  textbox.value = guess;\n  guessWord();\n\n  if (document.querySelector(\".correct\")) {\n    console.log(\"Found the word:\", guess);\n    break;\n  } else if (textbox.placeholder.includes(\"after\")) {\n    l = m + 1;\n  } else {\n    h = m - 1;\n  }\n}Here's mine in JavaScript, you can paste it in the console.\n \nreply",
      "Thanks!  I should have realised that a solution for this could be implemented in JavaScript as well, allowing it to run directly in the web browser.   Here is my translation of my earlier Python program to JavaScript:  let lo = 0, hi = dictionary.length - 1\n  const answer = document.getElementById('guess')\n  while (document.getElementsByClassName('correct').length === 0) {\n    const mid = Math.floor(lo + (hi - lo) / 2)\n    answer.value = dictionary[mid]\n    guessWord()\n    if (answer.placeholder.indexOf('after') !== -1) {\n      lo = mid + 1\n    } else {\n      hi = mid - 1\n    }\n  }\n\nThis solution is quite similar to yours.  Thanks for this nice idea!\n \nreply",
      "One time when I was in the Unix computer lab in college, testing my C skills on a Sun workstation, an old lady sat down at the workstation next to me. She must've been between about 70 and 80 years old, maybe older, and she had a notebook which, as it lay open, I saw C++ code hand-written in it in her spidery, old-lady hand. I thought, huh, well it's never too late to start learning this stuff!There's also the case of the 80-some-year-old Japanese lady who wrote her own iPhone app, a game about arranging traditional Japanese paper dolls: https://social-innovation.hitachi/en/article/colors-wakamiya...If you're retired, bored, and have a lot of time on your hands, learning tech proficiency and programming seems a good way to pass the time and help keep your mind sharp. Just as it was for us bored kids back in the day.\n \nreply",
      "There is some bug in the sorting, because it sorted \u201cvol\u201d after \u201cvolatile\u201d for me. It seems to depend on some previous state, though, because I couldn\u2019t reproduce it in a new window.Edit: See also https://news.ycombinator.com/item?id=41217457.\n \nreply",
      "It seems the previous guess is always placed either one up or one down from the entry box. So if you're guessing \"V\" words, then type \"apple\", then \"apple\" will show after \"vodka\". So the list is not getting re-alphabatized.\n \nreply",
      "Right. My word was before \"wizard,\" and later I guessed \"yesterday,\" which is after wizard. It put yesterday adjacent to the entry box, before wizard. Same is true for words before the word. Basically, if I make bad guesses, it doesn't list them in alpha order.\n \nreply",
      "Grandma's First Bug report\n \nreply",
      "It might not be sorted intentionally as part of the challenge of the game.\n \nreply",
      "I had a similar issue. Void sorted before Vogue. Breaks the game totally as far as I can tell.\n \nreply"
    ],
    "link": "https://grandmasword.com",
    "first_paragraph": "",
    "summary": "Title: Show HN: *Grandma Strikes Back: Syntax Error Style*\n\nIn a touching story of generational aspiration, a 70-year-old granny dives into the savage world of coding to birth a word game that pits human vocabulary against the blistering pace of a Silicon Valley hackathon. <em>Show HN</em> erupts as Cheeto-fingered commenters transform a simple family project into a full-blown code critique session. \u201cInteresting use of an array\u201d says one aspiring Gates, showcasing a DIY binary search in Python, because why enjoy a game when you can atomize it into a soulless algorithmic challenge? Meanwhile, a bug report on word sorting sparks a heated debate about the ethical implications of alphabetical order, proving once again that no deed\u2014however wholesome\u2014goes unpunished in the Hacker News tribunal. \ud83e\udd16\ud83d\udd25\ud83d\udc75"
  },
  {
    "title": "Things I've learned building a modern TUI Framework (textualize.io)",
    "points": 196,
    "submitter": "willm",
    "submit_time": "2024-08-11T12:22:50",
    "num_comments": 80,
    "comments_url": "https://news.ycombinator.com/item?id=41215679",
    "comments": [
      "It's funny how every TUI developer eventually stumbles over Unicode and then handling international characters and emojis correctly turns into its own project close to the same scope of (or even bigger than) the original TUI project. It happened to me on rivo/tview and through the resulting rivo/uniseg package, I learned that all other TUI library maintainers deal with the same issues. Finally, everyone invents their own unique solutions to the problem because character width is not standardized and terminals are messy, as noted in the article. OP simply supports Unicode 9 only (Unicode is at version 15.1 at the moment). Sooner or later, users will complain, however, that certain emojis or international characters are not rendered correctly. So I'm not sure that this is a great solution.\n \nreply",
      "The state of the art here is to detect mode 2027, and enable it when supported. This lets you know the terminal will handle graphemes properly.I maintain two TUI libraries which use this technique and emoji support has been (nearly) great. (One of which uses your uniseg library!)https://mitchellh.com/writing/grapheme-clusters-in-terminals\n \nreply",
      "That isn't sufficient. Codepoints with ambiguous width can't be detected in a standard way. A large number of pre-emoji symbols have been upgraded to have emoji presentation. Some systems default them to emojis with wide rendering, others maintain the text presentation with narrow rendering. Many systems ignore the presentation selectors if you want to force it.\n \nreply",
      "I personally don't think this mode is all that very useful, to be fair. First of all, the grapheme clustering is not set in stone, it's been changed from one Unicode standard version to other.Second, and this is mostly because my personal use cases are very humble, a much, much simple to implement workaround, for everyone involved, would be a couple of OSC sequences which would mark a part of output text as the prompt (when terminal is in canonical/cooked mode), so that a huge chunk of readline could be simply thrown away.So your program could just print a prompt, and then simply read the cooked line. In the meanwhile, the terminal emulator would handle line editing, line-wrapping and asynchronous output: if you keep outputing text to the terminal while a prompt is active, the terminal would clear the prompt and the unfinished line, print the text, then re-display the prompt and the line; basically what all \"async readline\" libraries do already with rl_clear/rl_redisplay \u2014 but doing it in the terminal would take care of this properly, because the terminal definitely knows how wide all the symbols it itself thinks are. And the tab completion could be supported by returning a <TAB>-terminated line to the program, instead of an <LF>-terminated line.Unfortunately, I don't think something like this can actually become even moderately widely adopted.Edit: Or, you know, maybe we could extend terminfo? Like, introduce twcswidth() function that would take your string, and the somehow encoded Unicode grapheme clustering data that the current terminal is actually using which you can query from terminfo, and return the number of screen cells it would take on this terminal.\n \nreply",
      "really great read, thanks. Im a little disappointed that no terminal emulator both implements the Kitty image protocol, and mode 2027. I wish there would be a terminal project that would just pick the best standards we have at the moment. Im not a fan of sixel for a lot of reasons. Im looking forward to trying Ghostty, though.\n \nreply",
      "Ghostty has both mode 2027 and kitty image protocol\n \nreply",
      "wezterm has both according to the above article\n \nreply",
      "Are there any libraries in place which can normalize all emojis down to a single symbol?\n \nreply",
      "It's a design decision.  On one end, if I'm reading your question correctly, you could use 0xFFFD (the replacement character) for anything not recognized as language-specific characters in the BMP and SMPs (this can be done within practically all existing Unicode libraries by filtering on character class) which will inadvertantly filter some non-emoji symbols and doesn't really convey any information (it can even look unprofessional, it reminds me a lot of the early web during the pre-unicode growing pains of poorly implemented i18n/l11n).There are libraries like Unidecode[0py] [0go] [0js] which convert from unicode to ASCII text that might be easiest to include in a TUI.  All the ones I looked at will convert emoji to `[?]` but many other characters are converted to that, too, including unknowns.On the other end you can keep a running list of what you mean by emoji[1] and pattern match on those characters, then substitute for a representative emoji.  But it will still pose some difficulty around what to choose for the representative symbol and how to make it fit nicely within a TUI.  An example of a library for pattern-matching on emoji is emoji-test-regex-pattern[2] but you can see it is based on a txt file that needs to be updated to correspond with additions to Unicode.[0py]: https://github.com/avian2/unidecode[0go]: \n(actually there are a few of these) https://pkg.go.dev/github.com/gosimple/unidecode[0js]: https://github.com/xen0n/jsunidecode[1]: these aren't really contiguous ranges, and opinions vary, see https://en.m.wikipedia.org/wiki/Emoji#Unicode_blocks[2]: https://github.com/mathiasbynens/emoji-test-regex-pattern\n \nreply",
      "There's a \"trick\" that works somewhat well for some compound emoji like \"family\": replace ZWJs with whitespace. Emoji width is not standardized because it depends on platform, fonts available, shell and terminal emulator, but almost no terminal supports compound emoji correctly. Because of how they were designed, most terminals will print the emoji as its component parts. If you need to do something like underline a piece of text (like rustc has to) we decompose them ourselves, and then it is a more tractable problem to know what the width of a char is (0, 1 or 2, and var width for tabs, which we just transform to a hardcoded 4\u2014incorrect but usable). This can still be incorrect, on specific terminals, but works well enough on most.\n \nreply"
    ],
    "link": "https://www.textualize.io/blog/7-things-ive-learned-building-a-modern-tui-framework/",
    "first_paragraph": "I've be working on Textual for over a year now. Here's a few things I've discovered (or re-discovered) regarding terminals in Python, and software development in general.\nWill McGuganAugust 3, 2022I've be working on Textual for over a year now. Here's a few things I've discovered (or re-discovered) regarding terminals in Python, and software development in general.\u2014 Will McGugan (CEO / Founder) @willmcguganA modern terminal emulator is a remarkably sophisticated piece of software. The protocol they run may be ancient, but many are powered by the same graphics technologies used in video games. Despite this, smooth animation is not a given in the terminal. If you have ever tried any kind of visual effects in a terminal you may have been disappointed with flickering or tearing.But it is possible to achieve smooth animation as you can see from the following screencast. So what trick(s) are we pulling?There are a few factors which reduce flicker in the terminal. The first is the terminal em",
    "summary": "**The Art and Science of Making Terminals Dance**\n\nIn another heartbreaking episode of \"Discoveries that no one asked for,\" Will McGugan unpacks a year\u2019s worth of battles with terminal emulators, just to <em>possibly</em> make a letter blink smoothly on your screen. The crowd is wild, split between nostalgic cries for simpler text interfaces and aggressive suggestions on handling Unicode\u2014a task akin to herding cats high on catnip. As commenters argue passionately about esoteric encoding problems and the right way to shoehorn images into text, everyone seems to miss the point: most users just want things to work without needing to understand the phrase \"grapheme clustering.\" A timeless tale of over-engineering solutions to problems that barely exist, beautifully wrapped in jargon that even Google can't clarify. Bravo, tech! Bravo! \ud83c\udfad\ud83d\udcbb"
  },
  {
    "title": "Genetics solves a thorny problem: how plants have prickles (cosmosmagazine.com)",
    "points": 35,
    "submitter": "gmays",
    "submit_time": "2024-08-10T20:46:27",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=41212103",
    "comments": [
      "There are thornless varieties of blackberries, but they taste awful compared to the real thing.Hopefully this will allow to develop new thornless varieties that will duffer only in presence of thorns and not taste.\n \nreply",
      "I have to disagree :)It\u2019s true that Marionberry is one of the most delicious as well as aggressively thorny, but there are many excellent thornless cultivars pioneered by the University of Arkansas, including Triple Crown and Prime Ark, as well as the series named after Native tribes, Apache, Navajo, Arapaho, which are among the sweetest.\n \nreply",
      "I went a different way with it.  I was thinking of how I could figure out how to grow thorns to keep ne'er-do-wells away\n \nreply",
      "Have a look at the thorns on a honey locust.I'm curious if they have a similar mechanism.  They are very woody and oh so so sharp.\n \nreply"
    ],
    "link": "https://cosmosmagazine.com/nature/plants/thorns-prickles-roses-plants/",
    "first_paragraph": "",
    "summary": "In the latest ground-shattering revelation from <em>Cosmos Magazine</em>, scientists apparently had nothing better to do than figure out why plants are so touchy-feely with their prickles. The comment section bursts into a botanical showdown, where enthusiasts duel with the ferocity of a nature documentary over which berry tastes less like cardboard. One genius wants to engineer personal thorn bushes for home security because, obviously, that's easier than buying a lock. Meanwhile, another is obsessively comparing thorn textures\u2014because who doesn't ponder the aerodynamics of plant spikes on a Tuesday afternoon? \ud83c\udf35\ud83d\udd2c"
  },
  {
    "title": "OpenBSD 7.5 via QEMU on Hetzner physical machine (no phys. access / KVM console) (gfuzz.de)",
    "points": 61,
    "submitter": "hoschi_",
    "submit_time": "2024-08-11T19:33:01",
    "num_comments": 9,
    "comments_url": "https://news.ycombinator.com/item?id=41218737",
    "comments": [
      "Website seems to have gotten HN\u2019s hit of death, but the headline sounds fun.I\u2019ve also got OpenBSD 7.5 running on a Hetzner server, but it runs \u201cnatively\u201d. By which I mean it\u2019s still a VM from Hetzner, but I don\u2019t have my own nested QEMU layer or anything.\n \nreply",
      "Nice write-up. It should really not be that hard but unfortunately it is. And it is getting worse.It made me sad to see that Hetzner had discontinued the FreeBSD rescue system. But it seems to be correct:\nhttps://community.hetzner.com/tutorials/freebsd-openzfs-via-...How much did it really cost them to have the mfsbsd image available?\n \nreply",
      "For Hetzner and other dedicated servers, there is a prepackaged script to bootstrap FreeBSD from Linux: https://depenguin.me/.\n \nreply",
      "I tried a couple times to get OpenBSD 7.4 and 7.5 booting on EC2 and GCE with no luck (hang during the bootloader).  I ended up going with https://openbsd.amsterdam but it would be nice to have working images in the major cloud providers.\n \nreply",
      "Vultr has OpenBSD images too.\n \nreply",
      "nixos-anywhere is a tool that allows you to do something similar (?) to install NixOS in-place on a remote machine (using kexec \u201cmagic\u201d under the hood).https://github.com/nix-community/nixos-anywhereI tried it on a Hetzner VPS and was honestly pretty surprised that it even worked. What makes it even cooler is that you can continue to rebuild the machine\u2019s config remotely even after initialization (thanks to NixOS).\n \nreply",
      "Pretty clever to boot a virtual QEMU VM and pass through the physical disks for installation. Nice that it can be done without a support request.\n \nreply",
      "Did the same to install Proxmox. Pretty straightforward though I probably wouldn't have thought of it myself had I not read about it.\n \nreply",
      "Struggling right now setting up various qemu on a hetzner, specifically with IPv6 on bridges etc. I used to have Proxmox servers for work before but never had to worry about networking.Any issues or recommendations considering the Proxmox route? You do port forwarding or multiple ipv4?Thanks for putting this idea in my head!\n \nreply"
    ],
    "link": "https://hackmd.gfuzz.de/s/Qsk14kc3i",
    "first_paragraph": "",
    "summary": "**OpenBSD 7.5 via QEMU on Hetzner \"Innovation\"**\n\nToday on Hacker News, another intrepid tech wanderer attempts to force-feed OpenBSD 7.5 through QEMU into a Hetzner cage, demonstrating the *pinnacle* of unnecessary complexity. Commenters are divided between offering condolences for the \"death of basic usability\" and giving each other back-pats for rigging up similar tech Rube Goldberg machines. Meanwhile, Hetzner smiles in the background at the free DIY customer support, and somewhere, a single FreeBSD fan quietly mourns the loss of their mfsbsd image. The cycle of \"why do it the easy way when you can complicate it\" continues unbroken. \ud83c\udf00\ud83d\udcbb\ud83e\udd26\u200d\u2642\ufe0f"
  },
  {
    "title": "Tree Attention: Topology-Aware Decoding for Long-Context (arxiv.org)",
    "points": 20,
    "submitter": "diwank",
    "submit_time": "2024-08-11T20:02:58",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://arxiv.org/abs/2408.04093",
    "first_paragraph": "Want to support truly open science and create access to research, regardless of disability? Sign up for the arXiv Accessibility Forum in September and Learn more.Grab your spot at the free arXiv Accessibility ForumHelp | Advanced SearcharXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.\narXiv Operational Status \n                    Get status notifications via\n                    email\n                    or slack\n",
    "summary": "In the latest academic clickbait, \"Tree Attention: Topology-Aware Decoding for Long-Context,\" researchers unearth yet another convoluted method to make computers pretend they understand War and Peace\u2014this time with trees! Meanwhile, arXiv champions the noble cause of \"open science\" by hosting a forum that ensures even your smart fridge can contribute its two cents on quantum mechanics. Commenters are gearing up, split between praising arXiv for its commitment to defeating the digital divide and sketching out their own backyard blueprints for a Large Hadron Collider. Get your popcorn ready\u2014this blend of high-minded ideals and internet pontification is the perfect recipe for a thrilling bout of intellectual shadowboxing. \ud83c\udf7f\ud83d\ude0e"
  },
  {
    "title": "Segment Anything Model and Friends (lightly.ai)",
    "points": 61,
    "submitter": "sauravmaheshkar",
    "submit_time": "2024-08-07T12:22:14",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=41180632",
    "comments": [
      "I appreciate this overview, but something that isn\u2019t clear to me is how SAM 2 compares to efficient SAM and the other improvements that are based on SAM 1? Is SAM 2 better across-the-board or is it better than SAM 1 but not a slam dunk compared to efficient SAM and the others? Especially as it relates to speed and model size. Should we wait for someone to make an efficient SAM 2?\n \nreply",
      "SAM 2's key contribution is adding time-based segmentation to apply to videos. Even on images alone, the authors note [0] the image-based segmentation benchmark does exceed SAM 1 performance. There have been some weaknesses exposed in areas of SAM 2 vs SAM 1, like potentially medical images [1]. Efficient SAM trades SAM 1 accuracy for ~40x speedup. I suspect we will soon see Efficient SAM 2.[0] https://x.com/josephofiowa/status/1818087122517311864\n[1] https://x.com/bowang87/status/1821021898928443520?s=46&t=9K-...\n \nreply",
      "SAM 2 not only focuses on speed, it actually performs better than SAM (1), the other models instead always trade performance for speed. SAM 2 is able to achieve this result thanks to its Hiera MAE encoder: https://arxiv.org/abs/2306.00989\n \nreply"
    ],
    "link": "https://www.lightly.ai/post/segment-anything-model-and-friends",
    "first_paragraph": "Recent years have witnessed the emergence of language models pre-trained on enormous corpora of unlabeled data. These systems demonstrate the ability to perform new tasks with minimal or no specific training. Research shows that this behavior increases with model scale, dataset size, and training compute. These capabilities are often guided by engineered text prompts that provide the necessary guidance to direct the system\u2019s output toward desired results.Their vision counterparts, however, have been explored to a lesser extent (Segment Anything, 2023). Models such as CLIP (2021) and ALIGN (2021) provide strong baselines for aligning images and text with separate encoders pre-trained using a contrastive objective. While vision-language models have seen significant advancement, core computer vision tasks such as segmentation have yet to progress at the same pace. This discrepancy is likely due to the challenges in obtaining large-scale, high-quality annotated datasets for tasks like segm",
    "summary": "**Hot Take on \"Segment Anything Model and Friends (lightly.ai)\"**\n\nThe tech world unleashes yet another \"groundbreaking\" model, promising to <em>change everything</em> in the vision-language processing scene \u2013 this time with <i>Segment Anything Model (SAM)</i> and its entourage. Commenters, in a desperate search for clarity amidst the fog of model acronyms, argue over which SAM iteration will save us milliseconds or which will finally let us distinguish a cat from a catastrophic image segmentation fail. One user breathlessly hopes for an 'Efficient SAM 2', because if there's anything more exciting than version 1, it's a slightly faster version 2. \ud83d\ude80\ud83d\ude44 Meanwhile, the academic community continues to churn out URLs like cryptic runes, hoping someone, somewhere, might actually read them."
  },
  {
    "title": "Trolltech's Documentation Process (gulbrandsen.priv.no)",
    "points": 32,
    "submitter": "whatever3",
    "submit_time": "2024-08-11T19:27:39",
    "num_comments": 11,
    "comments_url": "https://news.ycombinator.com/item?id=41218696",
    "comments": [
      "> Our documentation process worked (we wrote documentation and it largely satisfied the readers)IIRC this is quite an understatement; Qt documentation is regarded as some of the best in GUI toolkits.\n \nreply",
      "I mainly work with Qt, so I don't have a ton of experience with other  projects' documentation, but I have to wonder if Qt's documentation is some of the best in all of programming.It certainly has many contenders (cppreference has exhaustive documentation of all things C++), but it's very, very good.\n \nreply",
      "Qt documentation is excellent, and so is cppreference. Definitely among the best. I also like many of the of the UNIX manpages, though it is uneven.I still often find myself reaching for the source code of Qt, which is also of great quality. Some details may be unclear, but mistakes are rare. I don't remember seeing documentation and code contradicting each othersThis, by the way, is one reason why I think open source is so important. There is no more accurate documentation than the source code.\n \nreply",
      "IMHO Java's official documentation is quite decent as well.\n \nreply",
      "Yeah it's really among the best. Microsoft's C++ documentation in the Visual Studio 6.0 days was also amazing, before they completely ruined it by pushing it all to the web and mixing it up with irrelevant stuff.Looking through the list of things on devdocs.io  the only other thing I can think of that is as good is MDN.\n \nreply",
      "Qts doc is good but REALLY lacks in the details. For example how things composit with each other is generally undocumented and the fact that their codebase is quite old and full of techdebt makes that part very annoying for advanced use.An example: how in QML the Repeater element works inside an ObjectModel.\n \nreply",
      "I first used Qt back in 2002-2003 timeframe IIRC. Its documentation was excellent for a burgeoning computer science student. We used Qt in my classes.\n \nreply",
      "I really enjoyed his blog!On-topic: Documentation is good, and I'm glad someone like him was able to get it going.We used Qt for internal tools, in my Day Job, but never shipped anything on it.\n \nreply",
      "Title should say 2012.\n \nreply",
      "[flagged]"
    ],
    "link": "https://rant.gulbrandsen.priv.no/udoc/trolltech-documentation-process",
    "first_paragraph": "When I arrived at Trolltech, there wasn't much documentation for Qt. Some good intentions, some outdated \u03a4\u03b5\u03c7 source, no plan for improvement. Having suffered from that (I was the world's first external Qt user and needed documentation) I set about writing a usable documentation tool and documentation. One of my jobs became Documentation Supremo. I wrote some/much documentation, wrote the tools, kept track of quality and gradually improved the way we produced our documentation.\nI did not write all of the documentation, far from it. While I wrote much and looked at the rest, I could not have written all. It was essential that everyone who wrote code, also wrote documentation.\nOur documentation process worked (we wrote documentation and it largely satisfied the readers), so in this post I attempt to document what we did and what made our process succeed.\nSufficient tools were critical. When Haavard and Eirik started out using \u03a4\u03b5\u03c7, the process did not work. The documentation quickly fell b",
    "summary": "In a thrilling twist only achievable by a hero named Documentation Supremo, <em>Trolltech's Documentation Process</em> reminisces about the harrowing early days of Qt with a fondness typically reserved for outdated \u03a4\u03b5\u03c7 sources. Our intrepid documentarian, wielding the mighty pen of clarification, scribes steadfast through modules and manuals, heroically uplifted by commenters who argue feverishly about Qt's supremacy in the ancient and noble art of being readable. Meanwhile, a silent cry in the wilderness questions the historical accuracy of a blog title, and one stoic commenter, flagged into oblivion, presumably uncovers the true conspiracy behind it all: that the real documentation was the friends we made along the way. \ud83d\udcdc\ud83d\ude31"
  },
  {
    "title": "Go structs are copied on assignment (and other things about Go I'd missed) (jvns.ca)",
    "points": 61,
    "submitter": "misonic",
    "submit_time": "2024-08-10T04:40:57",
    "num_comments": 39,
    "comments_url": "https://news.ycombinator.com/item?id=41207355",
    "comments": [
      "One of the many things I find inspiring about Julia is how quick she is to admit to mistakes she has made or things that she hasn't understood.If she didn't understand it, I can 100% guarantee that there are large numbers of people out there who also didn't understand it - many of whom were probably too embarrassed to ever admit it.I think this is a useful trait for senior software engineers generally. If you're a senior engineer you should have earned enough of a reputation that the risk involved in admitting \"I didn't know that\" can be offset by everything you provably DO know already. As such, you can help everyone else out by admitting to those gaps in your knowledge and helping emphasize that nobody knows everything and it's OK to take pride in filling those knowledge gaps when you come across them.\n \nreply",
      "This is what jumped out to me reading this article too - unashamedly admitting to having gaps in knowledge that some others might take for granted.Bucketing some of those gaps as \u201cprobably useful but not to me right now\u201d is also great. It shows a purpose to focus on what matters right now, with a hint to return to when it does pop up again later.Lots of folks I work with and respect sometimes get trapped in the weeds having to understand every little thing. It\u2019s good to be curious, but sometimes filing it away for later and shipping is more important now.\n \nreply",
      "Personally, I think that the idea that programmers should know everything is kinda bizarre.Programming is about finding the answer. If you already knew everything, you could just sit down and type any program from your knowledge.We all know that you can't know everything otherwise, why even write documentation or use git?Unfortunately, it's difficult to move past this idea, and it's so pervasive that stating \"I don't know\" can negatively affect your standing for some.\n \nreply",
      "Right! The best thing about our chosen career is that it's completely impossible to know everything - there's always a new corner of software engineering to dig into, be it how the Linux kernel works, or programming with Haskell, understanding Transformer LLM architectures, or how the Svelte compiler works or whatever.\n \nreply",
      "most of the time when people don't ask questions in industry, it isn't because they already know the answers, it's because they don't care what the answers areblogging is culturally different because there's way more exhibitionism involved\n \nreply",
      "Donovan and Kernighan's \"The Go Programming Language\" is one of the best pieces of technical writing I've ever read. Buy it and read it cover to cover.Then read the [Go Language Specification][1] cover to cover. It's dry but refreshingly not legalese.[1]: https://go.dev/ref/spec\n \nreply",
      "The language spec was so good I was able to make tangible contributions to an open source project just by using that and I don\u2019t consider myself a go programmer at all.\n I want to buy that book but it\u2019s technical and I feel like there might be a second edition around the corner?/edit I bought it after reading this thread: https://groups.google.com/g/golang-nuts/c/U99js3UYz-U\n \nreply",
      "Not understanding structs vs pointers is a pretty basic misconception in go.Does this trip anyone else up?  I found it unenlightening / unsurprising, and the linked \"100 mistakes\" piece also very basic and in some cases just plain wrong.\n \nreply",
      "\"Very basic\" is the entire point of this exercise. Just because things are basic doesn't mean people won't misunderstand them, and won't benefit from clarification.Which of those 100 mistakes were \"plain wrong\"? That would be useful feedback for the author.\n \nreply",
      "As she points out though, a lot of dynamic languages don\u2019t behave this way. A string after all points to a heap allocation; so it\u2019s not unreasonable to think of a string as a pointer.\n \nreply"
    ],
    "link": "https://jvns.ca/blog/2024/08/06/go-structs-copied-on-assignment/",
    "first_paragraph": "\n\nI\u2019ve been writing Go pretty casually for years \u2013 the backends for all of my\nplaygrounds (nginx, dns, memory, more DNS) are written in Go, but many of those projects are just a few hundred lines and I don\u2019t come back to those codebases much.I thought I more or less understood the basics of the language, but this week\nI\u2019ve been writing a lot more Go than usual while working on some upgrades to\nMess with DNS, and ran into a bug that revealed I\nwas missing a very basic concept!Then I posted about this on Mastodon and someone linked me to this very cool\nsite (and book) called 100 Go Mistakes and How To Avoid Them by Teiva Harsanyi. It just came out in 2022 so it\u2019s relatively new.I decided to read through the site to see what else I was missing, and found\na couple of other misconceptions I had about Go. I\u2019ll talk about some of the\nmistakes that jumped out to me the most, but really the whole\n100 Go Mistakes site is great and I\u2019d recommend reading it.Here\u2019s the initial mistake that started ",
    "summary": "**Go Gurus Grapple with Gaffes: a Casual Comedy**\n\nIn an exhilarating display of surprise and ignorance, a self-professed Go \"enthusiast\" confesses to just now learning that structs in Go are copied on assignment, something that could have been gleaned from a cursory glance at any Intro to Go pamphlet or perhaps from overhearing any conversation near the watercooler at tech conferences. \ud83d\ude44 Thankfully, the revelation triggered a cascade of admissions among the programming elite on the comments section, where tales of fundamental misunderstandings are worn like badges of honor. Amidst the self-help group vibes, suggestions to read the Go specification sprinkle the discussion like sage advice from those who\u2019ve transcended such earthly confusions. The commenters oscillate between humblebragging about their own gaps in understanding and pedantically explaining core programming concepts, ensuring the thread is as much a support group as it is a technical forum. \ud83e\udd13\ud83d\udcda"
  },
  {
    "title": "Introduction to Golang Preemption Mechanisms (unskilled.blog)",
    "points": 49,
    "submitter": "lcof",
    "submit_time": "2024-08-11T17:23:17",
    "num_comments": 9,
    "comments_url": "https://news.ycombinator.com/item?id=41217758",
    "comments": [
      "Are there any proposals to make the golang runtime cgroup aware? Last time I checked the go runtime will spawn a OS process for each cpu it can see even if it is running in a cgroup which only allows 1 CPU of usage.\nOn servers with 100+ cores I have seen scheduling time take over 10% of the program runtime.The fix is to inspect the cgroupfs to see how many CPU shares you can utilize and then set gomaxprocs to match that. I think other runtime like Java and .NET do this automatically.It is the same thing with GOMEMLIMIT, I don\u2019t see why the runtime does not inspect cgroupfs and set GOMEMLIMIT to 90% of the cgroup memory limit.\n \nreply",
      "On Linux, go uses sched_getaffinity to know how many cpu core it is allowed to run on:https://cs.opensource.google/go/go/+/master:src/runtime/os_l...\n \nreply",
      "I am guessing the API isn't stable enough for letting the runtime set maxprocs.  I use https://pkg.go.dev/go.uber.org/automaxprocs and have had to update it periodically because Redhat and Debian have different defaults.  (Should one even run k8s on Redhat?  I say no, but Redhat says yes.  That's how I know about this.)This, I think, is cgroups 1 vs. cgroups 2 and everyone should have cgroups 2 now, but ... it would feel weird for the Go runtime to decide on one.  To me, anyway.\n \nreply",
      "Which API is not stable? Cgroupfs?I would think that cgroupfs is considered an API to userspace and therefore it shouldn\u2019t break in the future? Hence creating cgroups v2?I have written code which handles both cgroups v1 and cgroups v2, it isn\u2019t terribly hard. Golang could also only support setting automatic parameters when running in cgroups v2 if that made things easier.For a language that prides itself in sane defaults I think they have missed the mark here. I could probably add support to the golang runtime in a few hundred lines of code and probably save millions of dollars and megawatts of energy because the go runtime is not spawning 50 processes to run a program which is constrained to 1 core.\n \nreply",
      "I\u2019m not 100% sold on the idea that Go\u2019s defaults are sane.They\u2019re highly opinionated and not really that intuitive.\n \nreply",
      "Could you elaborate?\n \nreply",
      "Interesting that it\u2019s temporal (according to the article, you have around 10 microseconds before the signal-based preempter kicks in). How bad is performance if the load on the host is so high that double-preempting is common, I wonder? Or am I missing something and that question is not meaningful?\n \nreply",
      "No it\u2019s an interesting comment. This is not really about load, but about control flow: if goroutine is just spinning wild without going through any function prologue, it won\u2019t even be aware of the synchronous preemption request. Asynchronous preemption (signal-based) is mainly (I say \u201cmainly\u201d because I am not sure I can say \u201conly\u201d) for this kind of situation.I don\u2019t have the link ready, but twitch had this kind of issue with base64 decoding in some kind of servers. The GC would try to STW, but there would always be one or a few goroutines decoding base64 in a tight loop for the time STW was attempted, delaying it again and again.Asynchronous preemption is a solution to this kind of issue. Load is not the issue here, as long as you go through the runtime often enough.\n \nreply",
      "Great post! One question that lingered for me is: what are asynchronous safe-points? The post goes into some detail about their synchronous counterparts\n \nreply"
    ],
    "link": "https://unskilled.blog/posts/preemption-in-go-an-introduction/",
    "first_paragraph": "",
    "summary": "Title: Devs Rediscover How Cpus Work, Go Lang Laughs\n\nIn a miraculous reenactment of discovering fire, a heroic blogger bravely attempts to demystify the elegant intricacies of Golang's preemption mechanisms, while inadvertently triggering a holy war in the comment section. Amidst the pixelated bloodshed, software savants argue with the fervor of toddlers over whether the Go runtime should be nanny or just let their precious binaries roam wild across CPU cores. A few enterprising souls pose **_profound_** queries like \"Will Go ever learn to count CPUs in a cgroup?\", while others wax poetic about apocalyptic scenarios where asynchronous preemption might save the last bytes of their performance-starved applications. Surely, this is what Turing dreamt of\u2014a room full of adults fervently debating how many GOMAXPROCS can dance on the head of a pin. \ud83e\udd13"
  },
  {
    "title": "Finite State Machine Designer (madebyevan.com)",
    "points": 66,
    "submitter": "gurjeet",
    "submit_time": "2024-08-11T14:48:26",
    "num_comments": 15,
    "comments_url": "https://news.ycombinator.com/item?id=41216560",
    "comments": [
      "This is a handy tool, but I wish it supported edge snapping. If you inspect the generated LaTeX it doesn't actually link up the FSM states, it just anchors them to raw TikZ coordinates.\n \nreply",
      "You might want to add graphviz/digraph export (and possibly import). It's a pretty decent format for this kind of task, supported by several IRL tools.Oh ... 2010. I guess it's not actively being maintained.\n \nreply",
      "Is there a way to subscript double-digit numbers? I tried S_{10} but it doesn't seem to work.Edit: Kinda hacky/unintuitive but you can type S_1_0\n \nreply",
      "I remember using this to submit FSM related assignments for my Theory of Computation classes back in the day. Fun times.\n \nreply",
      "Hmm doesn't appear on android mobile chrome. I just see a white square where the designer should appear.\n \nreply",
      "Not working on my iPad either. Might not be mobile friendly.\n \nreply",
      "Well it was made nearly 15 years ago.\n \nreply",
      "The white square is the designer. Try double clicking on it.\n \nreply",
      "(Double-)Tapping on the canvas doesn't seem to do anything in FF for Android.\n \nreply",
      "For me it dlightly zooms in, so maybe the browser captured that action\n \nreply"
    ],
    "link": "https://madebyevan.com/fsm/",
    "first_paragraph": "Export as: PNG | SVG | LaTeXThe big white box above is the FSM designer.\u00a0 Here's how to use it:This was made in HTML5 and JavaScript using the canvas element.Created by Evan Wallace in 2010",
    "summary": "**Finite State Machine Designer: A Decade-Old Relic Still In Use**\n\nAh, the glory of _ancient_ web tools! Meet the Finite State Machine Designer (FSMD): a web relic enshrined in the finest HTML5 and JavaScript of the *early 2010s*. Crafted by the legendary Evan Wallace, this tool not only lets you fail at aligning your states with LaTeX, but tantalizes with exports that clearly ignore your most basic spacing needs. Commenters, ever hopeful, clamor for updates like edge snapping and Graphviz support, clinging to the fantasy that anything will change after nearly 15 years. Meanwhile, mobile users experience the height of interactivity by staring at a blank white box\u2014truly, this is **peak** nostalgia. \ud83d\ude02"
  },
  {
    "title": "Show HN: Pixeltune, a nicer chiptune and VGM player (pixeltune.org)",
    "points": 29,
    "submitter": "tomaspollak",
    "submit_time": "2024-08-11T19:42:18",
    "num_comments": 5,
    "comments_url": "https://news.ycombinator.com/item?id=41218811",
    "comments": [
      "Is it possible to loop a song infinitely? This is a standard feature for chiptune emulation playback programs (vgmstream, GEP, foobar2000, Audacious, Droidsound-E, etc.).\n \nreply",
      "You're right! This is definitely doable, but... wouldn't you eventually want to listen to _other_ songs?There's currently a 2:30 min time limit on songs so that they don't loop forever. I plan to make this configurable, so I could allow setting it to a very long timeframe (something like 10 minutes or so).\n \nreply",
      "Hey Tom!\nThis is fantastic project, I see myself using it daily. But the best part of it all is your dedication to preserving the midi culture and the art form itself.(game) Music back then was truly on another level and I'm glad some people are archiving the songs and their chips.\n \nreply",
      "Thanks mate!\n \nreply",
      "There's also this which you can run on a Raspberry Pihttps://github.com/sasq64/chipmachine\n \nreply",
      "I didn't know about that one. Thanks!\n \nreply"
    ],
    "link": "https://pixeltune.org",
    "first_paragraph": "",
    "summary": "Welcome to the latest Hacker News circlejerk, \"Pixeltune: Because Old School Is Cool... Until It Loops Forever.\" Stardust-eyed nostalgists and armchair developers rejoice over yet another music player that no one asked for, promising to immortalize the haunting bleeps and bloops of yesteryear. Commenter #1 kicks off a gripping saga about *infinite looping*, because who wouldn't want to turn their life\u2019s soundtrack into a never-ending auditory Groundhog Day\ud83c\udfb5? Meanwhile, Tom from comment #2 is ready to make \"midi culture\" his personality trait, elevating ancient chiptunes to a cult status usually reserved for dead poets and wine. Somewhere, a Raspberry Pi quietly weeps at its inevitable fate as a $35 chiptune box."
  },
  {
    "title": "Another variable-length integer encoding (2021) (dcreager.net)",
    "points": 37,
    "submitter": "fanf2",
    "submit_time": "2024-08-11T17:42:05",
    "num_comments": 23,
    "comments_url": "https://news.ycombinator.com/item?id=41217903",
    "comments": [
      "xxx"
    ],
    "link": "https://dcreager.net/2021/03/a-better-varint/",
    "first_paragraph": "\u21932021-03-08Many binary file formats need to store integer values.  And often, those integer values are typically \u201csmall\u201d.  That is, while the field might technically be a 32-bit integer, that field will rarely hold values from that entire 32-bit range.  Instead, values will usually be small in magnitude, and a large number of their higher-order bits will be 0.  In those cases, it can be useful to try to save space by encoding the integer value in a smaller number of bytes.  Doing so can substantially reduce the size of your file, especially when there are lots of these small-magnitude integers to store.(Note that even though the goal, and end result, is that the file is smaller, this is not a compression scheme, since it only works when your values are distributed in one particular way.  Proper compression schemes are more sophisticated, so that they can find redundancies in many other patterns of data.)With this goal, our job is to figure out a coding scheme that lets us:This is not a",
    "summary": "Title: Brave New Wheels for Old Data Chariots\n\nIn an epoch-defining outstanding contribution to the thrilling world of binary file formats, one stalwart coder decides to reinvent the wheel\u2014\ud83c\udf89 yet again \ud83c\udf89\u2014by suggesting a revolutionary method to optimize integer storage. Oxygen, please! The field has never seen such groundbreaking work since yesterday's five-minute hallway discussion on variable-length encoding at the World Navel-Gazing Championships. Thankfully, the spirited comment section unites self-proclaimed experts armed with half-read Wikipedia articles and dog-eared copies of \"Computer Science for Absolute Beginners\" to dissect, dissect, and dissect the \"not-a-compression-scheme\" scheme. Amidst the chaos, consensus remains elusive, but everyone agrees on an urgent need to debate which Star Wars character best represents this encoding method\u2014because, priorities."
  },
  {
    "title": "Samsung's New EV Battery Tech: 600-Mile Ranges, and 9-Minute Charges? (pcmag.com)",
    "points": 17,
    "submitter": "m463",
    "submit_time": "2024-08-11T23:30:33",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.pcmag.com/how-to/what-is-solid-state-battery-for-electric-vehicles",
    "first_paragraph": "",
    "summary": "In a desperate bid to keep electrons hip and relevant, Samsung announces a new battery that somehow promises to warp the very fabric of physics: a 600-mile range with a 9-minute charge time. The tech literati, drooling over their keyboards, flood the comments section with their usual blend of unchecked optimism and blatant disregard for the laws of thermodynamics. Amidst the cacophony, one brave soul questions the impact on the power grid, only to be drowned out by a horde of fanboys planning their next cross-country Tesla hunt. \ud83d\ude97\ud83d\udca8\ud83d\udca1"
  }
]