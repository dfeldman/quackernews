[
  {
    "title": "Show HN: PgQueuer \u2013 Transform PostgreSQL into a Job Queue (github.com/janbjorge)",
    "points": 137,
    "submitter": "jeeybee",
    "submit_time": "2024-08-18T19:22:31",
    "num_comments": 45,
    "comments_url": "https://news.ycombinator.com/item?id=41284703",
    "comments": [
      "I am going to go the other direction on this... to anyone reading this, please consider using a backend-generic queueing system for your Python project.Why? Mainly because those systems offer good affordances for testing and running locally in an operationally simple way. They also tend to have decent default answers for various futzy questions around disconnects at various parts of the workflow.We all know Celery is a buggy pain in the butt, but rolling your own job queue likely ends up with you just writing a similary-buggy pain in the butt. We've already done \"Celery but simpler\", it's stuff like Dramatiq!If you have backend-specific needs, you won't listen to this advice. But think deeply how important your needs are. Computers are fast, and you can deal with a lot of events with most systems.Meanwhile if you use a backend-generic system... well you could write a backend using PgQueuer!\n \nreply",
      "> those systems offer good affordances for testing and running locally in an operationally simple wayDefine \"operationally simple\", most if not all of them need persistent anyway, on top of the queue itself. This eliminates the queue and uses a persistent you likely already have.\n \nreply",
      "Well for example, lots of queueing libraries have an \"eager task\" runtime option. What does that do? Instead of putting work into a backend queue, it just immediately runs the task in-process. You don't need any processing queue!How many times have you shipped some background task change, only to realize half your test suite doesn't do anything with background tasks, and you're not testing your business logic to the logical conclusion? Eager task execution catches bugs earlier on, and is close enough to the reality for things that matter, while removing the need for, say, multi-process cordination in most tests.And you can still test things the \"real way\" if you need to!And to your other point: you can use Dramatiq with Postgres, for example[0]. I've written custom backends that just use pg for these libs, it's usually straightforward because the broker classes tend to abstract the gnarly things.[0]: https://pypi.org/project/dramatiq-pg/\n \nreply",
      "I\u2019ve been thinking about the potential for PostgreSQL-backed job queue libraries to share a common schema. For instance, I\u2019m a big fan of Oban in Elixir: https://github.com/sorentwo/obanGiven that there are many Sidekiq-compatible libraries across various languages, it might be beneficial to have a similar approach for PostgreSQL-based job queues. This could allow for job processing in different languages while maintaining compatibility.Alternatively, we could consider developing a core job queue library in Rust, with language-specific bindings. This would provide a robust, cross-language solution while leveraging the performance and safety benefits of Rust.\n \nreply",
      "If you want a generic queue that can be consumed in any runtime, you can just build it directly into postgres via extensions like https://github.com/tembo-io/pgmq.\n \nreply",
      "This would be so immensely useful. I\u2019d estimate that there are so many cases where the producer is Node or Rails and the consumer is Python.\n \nreply",
      "This is the exact use case I'm running into right now. I've been looking at BullMQ some it has good typescript support, and is working towards a 1.0 for python. But, I have tried it out in a production stack yet\n \nreply",
      "I am building an SQS compatible queue for exactly that reason. Use with any language or framework. https://github.com/poundifdef/smoothmqIt is based on SQLite, but it\u2019s written in a modular way. It would be easy to add Postgres as a backend (in fact, it might \u201cjust work\u201d if I switch the ORM connection string.)\n \nreply",
      "Sounds like it wouldn't have immediate notification of new submissions due to no listen/notify support in SQLite?\n \nreply",
      "Does SmoothMQ support running multiple nodes for high availability? (I didn't see anything in the docs, but they seem unfinished)\n \nreply"
    ],
    "link": "https://github.com/janbjorge/PgQueuer",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        PgQueuer is a Python library leveraging PostgreSQL for efficient job queuing.\n      \n\n\n\ud83d\udcda Documentation: Explore the Docs \ud83d\udcd6\ud83d\udd0d Source Code: View on GitHub \ud83d\udcbe\ud83d\udcac Join the Discussion: Discord CommunityPgQueuer is a minimalist, high-performance job queue library for Python, leveraging the robustness of PostgreSQL. Designed for simplicity and efficiency, PgQueuer uses PostgreSQL's LISTEN/NOTIFY to manage job queues effortlessly.To install PgQueuer, simply install with pip the following command:Here's how you can use PgQueuer in a typical scenario processing incoming data messages:Start a long-lived consumer that will begin processing jobs as soon as they are enqueued by another process. In this case we want to be a bit more carefull as we want gracefull shutdowns, PgQueuer run will setup signals to\nensure this.Start a short-lived producer tha",
    "summary": "**Show HN: PgQueuer \u2013 because PostgreSQL wasn't complex enough already**\n\nToday on Hacker News, an intrepid developer decided that PostgreSQL should take on yet another duty: acting as a job queue. They proudly introduce PgQueuer, a Python library that turns your database server into something that vaguely resembles RabbitMQ, but with more SQL and less efficiency. Commenters, undeterred by the overlap with existing, well-optimized solutions like Celery, dive headfirst into theological wars about the sanctity of PostgreSQL\u2019s dual role. Because, why use the right tool for the job when you can shoehorn your favorite database into doing everything? After all, if you\u2019ve got a database, who even needs other software? \ud83d\udcda\ud83d\udcbe\ud83d\ude9c"
  },
  {
    "title": "Google took three months to remove scam app that stole over $5M (theblock.co)",
    "points": 131,
    "submitter": "svenfaw",
    "submit_time": "2024-08-18T22:25:59",
    "num_comments": 43,
    "comments_url": "https://news.ycombinator.com/item?id=41286045",
    "comments": [
      "That's amazing, it took them 3 months to kill a scam app, but they proactively shutdown smaller apps that break no rules constantly. I swear someone in Google's exec team is going out of their way to make Google products suck. They've all been getting worse for the past several years. Search gives bad results, search qualifiers only work in \"verbatim\" mode, GMail sucks at spam filtering now, Android is becoming a PITA, Chrome is shoving in new bad features while killing old good features, etc. There was even a big thing about Google Voice having some massive change where lots of features were going away, so I pulled GV out of my life expecting it to go away, and literally nothing changed.It's almost like Google is suicidal and these are calls for help.\n \nreply",
      "I have a lot to be thankful for personally because of google. In my bubble, Gmail gave me a solid free email client since the days my parents had AOL dialup. YouTube has been a literal magical experience for its video delivery service all these years, nothing came close to its reliability. Vimeo? (Please). Let's then talk about the first Android phone the G1 and the other early flagships like Nexus. They set the bar in so many ways (yes, Apple did too). The landscape has changed though, and Google has changed. I've always bought the latest phone direct from Google. I'm waiting on the P9 though. They to show they got what it takes still, like very much improving their spam detection in gmail. They have the capability, I believe. Google needs more than good leadership- they need to try to set the standard.\n \nreply",
      "Oh thank you for saying this about the spam I thought it was just me!I\u2019ve noticed a huge uptick in spam emails getting through to my mailbox over the last year\n \nreply",
      "There\u2019s a big uptick in one particular type of spam email for me. These ones have a huge amount of nonsense \u201cwords\u201d at the end of it, which appear to be random strings of letters of random length. Their purpose seems to be to trick the spam filters that have no idea how to classify \u201cwitwicshmniss\u201d as spam or not spam.\n \nreply",
      "It's almost as if both false positives and false negatives exist!\n \nreply",
      "Google also financially incentivized to be laxer with revenue generating apps and critical of low revenue noisemakers\n \nreply",
      "Exactly\n \nreply",
      "It still boggles my mind that you can build a fortune of several million, but then be naive enough to download a random crypto app off the app store, and expect it to be all sunshine and rainbows. Even several massive legalish crypto empires fell over due to fraud. Using a random one off the app store is a recipe for disaster.\n \nreply",
      "People who got wealthy in real estate are typically quite naive, the money came too easily for the past 15+ years and they aren't aware of how hard most businesses are.Turns out if you never actually earned the money you tend to think you are untouchable.I've worked with CEOs who were born into money, and those who have earned it, you can tell the difference immediately.\n \nreply",
      "> It still boggles my mind that you can build a fortune of several million, but then be naive enough to download a random crypto app off the app storeYou should never be surprised what Florida Man/Woman will do.As a former resident, there's an uncharacteristically high number of seemingly well-adjusted but actually batshit-crazy folks there.Look up Florida school board meetings on YouTube.\n \nreply"
    ],
    "link": "https://www.theblock.co/post/311707/google-took-three-months-to-remove-scam-app-that-stole-over-5-million-in-crypto-lawsuit",
    "first_paragraph": "",
    "summary": "<h1>In the high-stakes world of tech, Google plays the tardy sheriff</h1>\nIn a thrilling three-month saga, Google showcased its finely-tuned inertia by allowing a scam app to pilfer a mere $5M before springing into sloth-like action. Meanwhile, the Internet's armchair CEOs in the comments dissect Google\u2019s entire suite, from search to spam, lamenting the tragic downfall of what was once a Silicon Valley darling, now apparently intent on self-sabotage. \ud83e\udd26 Yet, amidst the noise, a solitary cheerleader reminisces about the golden days of Gmail and the enchantment of early Androids, clinging to nostalgia like a lifebuoy in the ocean of contemporary Google grievances. \ud83d\udc94 Could this be an elaborate plot twist where Google is just auditioning for a new reality show called \"Survivor: The Corporate Jungle\"? Stay tuned\u2014or don't, as the spectators might switch channels to a less infuriating provider. \ud83d\udcfa\ud83c\udf7f"
  },
  {
    "title": "Dasel: Select, put and delete data from JSON, TOML, YAML, XML and CSV (github.com/tomwright)",
    "points": 263,
    "submitter": "edward",
    "submit_time": "2024-08-18T14:11:50",
    "num_comments": 52,
    "comments_url": "https://news.ycombinator.com/item?id=41282495",
    "comments": [
      "I like the idea of using select/put/delete (sql-style syntax) to query non-rdb data storage. It sort of raises the question of, could there be 1 universal language to query relational databases, text file storage (json, csv, etc), and anything else.Or put another way, is there any data storage format that couldn\u2019t be queried by SQL?\n \nreply",
      "That's basically SQL. Many SQL systems have lots of built in connectivity to various data sources.DuckDB is a good example of a (literally) serverless SQL-based tool for data processing. It is designed to be able to treat the common data serialization formats as though they are tables in a schema [1], and you can export to many of the same formats. With extensions, you can also connect to relational databases as foreign tables.This connectivity is a big reason it has built a pretty avid following in the data science world.[1] https://duckdb.org/docs/data/overview[2] https://duckdb.org/docs/extensions/json#json-importexport[3] https://duckdb.org/docs/extensions/postgres\n \nreply",
      "> Or put another way, is there any data storage format that couldn\u2019t be queried by SQL?Is your SQL Turing-complete? If yes, then it could query anything. Whether or not you'd like the experience is another thing.Queries are programs. Querying data from a fixed schema, is easy. Hell, you could make an \"universal query language\" by just concatenating together this dasel, with SQL and Cypher, so you'd use the relevant facet when querying a specific data source. The real problem starts when your query structure isn't fixed - where what data you need depends on what the data says. When you're dealing with indirection. Once you start doing joins or conditionals or `foo[bar['baz']] if bar.hasProperty('baz') else 42` kind of indirection, you quickly land in the Turing tarpit[0] - whatever your query language is, some shapes of data will be super painful for it to deal with. Painful, but still possible.--[0] - https://en.wikipedia.org/wiki/Turing_tarpit\n \nreply",
      "> It sort of raises the question of, could there be 1 universal language to query relational databases, text file storage (json, csv, etc), and anything else.Sure there could be -- any turing-complete language (which SQL is) can query anything.But the reason we have different programming languages* is because they have different affordances and make it easy to express certain things at the cost of being less convenient for other things.  Thus APL/Prolog/Lisp/C/Python can all coexist.SQL is great for relational databases, but it's like commuting to work in a tank when it comes to key-value stores.* and of course because programmers love building tools, and a language is the ultimate tool.\n \nreply",
      "sounds like a nightmare to do logistically. it would be cool though.\n \nreply",
      "There are a lot of differences between storage formats. It would be incredibly difficult to create a universal query language. It would need to either a) change the storage formats so much that they're not really following their original standard, or b) create so many different versions of the query language that it's not really one standard.Off the top of my head, SQL can't do lists as values, and doesn't have simple key-value storage. Json doesn't have tables, or primary keys / foreign keys, and can have nested data\n \nreply",
      "SQL has both standard JSON and Array functions. What's the \"list as value\" feature you think is missing?\n \nreply",
      "From what I understand SQL is or at least can be made Turing complete so in that sense you should be able to query any data store using it. However, that doesn\u2019t mean it will be efficient to do so.I suspect for most data structures you could construct an index to make querying faster. But think about querying something like a linked list: it is not going to be too efficient without an index but you should still be able to write an engine that will do so.If you have something like a collection of arbitrary JSON objects without a set structure you should still be able to express what you are trying to do with SQL because Turing completeness means it can examine the object structure as well as contents before deciding what to do with it. But your SQL would look more like procedural code than you might be used to.\n \nreply",
      "> Or put another way, is there any data storage format that couldn\u2019t be queried by SQL?Depends on how keen you are on pure SQL. For example, postgres and sqlite have json-extensions, but they also enhance the syntax for it. Simliar can be done for all other formats too, but this means you need to learn special syntax and be aware of the storage-format for every query. This is far off from a real universal language.\n \nreply",
      "XML attributes come to mind\n \nreply"
    ],
    "link": "https://github.com/TomWright/dasel",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Select, put and delete data from JSON, TOML, YAML, XML and CSV files with a single tool. Supports conversion between formats and can be used as a Go package.\n      \n\n\n\n\n\n\n\n\n\nDasel (short for data-selector) allows you to query and modify data structures using selector strings.Comparable to jq / yq, but supports JSON, YAML, TOML, XML and CSV with zero runtime dependencies.Say good bye to learning new tools just to work with a different data format.Dasel uses a standard selector syntax no matter the data format. This means that once you learn how to use dasel you immediately have the ability to query/modify any of the supported data types without any additional tools or effort.Dasel is available on homebrew, ASDF, scoop, docker, Nix or as compiled binaries from the latest release.You can also install a development version with:For more",
    "summary": "Ah, Dasel, the Swiss Army knife of data manipulation for the chronically indecisive developer. Why bother learning multiple tools when a single, all-consuming blob of functionality can rot your brain with promises of universal selectors and zero dependencies? Hackernews is <em>ablaze</em> with armchair engineers theorizing about the cosmic potential of a unified query language. Meanwhile, closer to Earth, others are grappling with the realities of querying JSON arrays with SQL dreams. Welcome to the future, where \"it could work!\" meets \"but at what cost?\" \ud83d\udcbb\ud83d\udd27\ud83e\udd2f"
  },
  {
    "title": "Interposer to Fix the Symmetricom SyncServer S200 GPS Week Rollover Problem (tomverbeure.github.io)",
    "points": 28,
    "submitter": "zdw",
    "submit_time": "2024-08-18T21:31:10",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=41285665",
    "comments": [
      "I have a Symmetricom ExacTime ET6000 that had a Motorola Oncore M12+ mounted to an ACE-III interposer made by Synergy systems that hadn't suffered from a rollover yet, but instead had a 3 month leap second induced offset. I went the (mildly easier) route with a Furuno GT-8736D, then modifying the interposer with a level shifter for the serial lines as the ET6000 uses 5v TTL logic, and the Furuno chipset is only rated for 3.6v  maximum (and so was the M12+, for that matter!).\n \nreply",
      "Several years ago I fixed an MTK GPS module in a smartphone with the same problem by RE'ing the firmware and patching the date boundary in it. I wonder if that's possible with this module too.\n \nreply",
      "Seems this guy[0] could do just that if only he had access to a SyncServer S200? The very author of this blog post replied to the person and told them about his interposer solution, he\u2019s not unaware.> It may also be possible to build similar patches for other units, such\nas the S200/S250.  But currently I only have access to S350 and XLi.[0]: https://lists.febo.com/empathy/thread/UXOVZ2E4YGGNPSXLJSELLK...\n \nreply",
      "Alex\u2019s solution doesn\u2019t patch the module itself, but it patches the FW of the MCU in the SyncServer motherboard that drives the module.People have looked into patching the module itself, but I haven\u2019t seen any progress on that. It\u2019s possible that the M430 MCU doesn\u2019t allow dumping of the FW that is stored in on-chip flash.\n \nreply"
    ],
    "link": "https://tomverbeure.github.io/2024/08/18/Fixing-the-Symmetricom-S200-GPS-Week-Number-Rollover-Problem.html",
    "first_paragraph": "\nAug 18, 2024\n      In my earlier blog post,\nI wrote about how to set up a SyncServer S200 as a regular NTP server, and how to \ninstall the backside BNC connectors to bring out the 10 MHz and 1PPS outputs.The ultimate goal is to use the SyncServer as a lab timing reference, but at the end \nof that blog post, it\u2019s clear that using NTP alone is not good enough to get a precise 10 MHz clock: \nthe output frequency was off by almost 100Hz!To get a more accurate output clock, you need to synchronize the SyncServer to the\nGPS system so that it becomes a GPS disciplined oscillator (GPSDO) \nand a stratum 1 time keeping device.The S200 has a GPS antenna input and a GPS receiver module inside, so in theory this \nshould be a matter of connecting the right GPS antenna. But in practice it wasn\u2019t simple\nat all because the GPS module in the SyncServer S200 is so old that it suffers from the so-called \nWeek Number Roll-Over (WNRO) problem.In this blog post, I\u2019ll discuss what the WNRO problem is all abo",
    "summary": "**Hobbyists In Desperation: A Compass for the GPS-Impaired**\n\nIn a gripping expos\u00e9 that makes mountains out of microchip molehills, a lone tinkerer fights the tyranny of time with a plucky SyncServer S200, which rebels against something as trivial as a GPS Week Number Roll-Over. \ud83d\udd70\u2694\ufe0f Mere mortals in the comments unfold their own tales of battling obsolete technology, wielding soldering irons like swords against the omnipotent threat of an extra second every few millennia. \ud83d\udee0\ufe0f\ud83d\udc80 One commenter speculates about hacking the unhackable, while another treats 3.6v logic levels with the respect typically reserved for handling nitroglycerin. Everyone seems to forget that a simple watch might solve all their timing woes, but who needs simplicity when there's techno-drama to be had?"
  },
  {
    "title": "Debugging operating systems with time-traveling virtual machines [pdf] (usenix.org)",
    "points": 64,
    "submitter": "Intralexical",
    "submit_time": "2024-08-18T18:28:59",
    "num_comments": 11,
    "comments_url": "https://news.ycombinator.com/item?id=41284235",
    "comments": [
      "Microsoft has, or had, a similar technology they use internally, called TKO: https://www.microsoft.com/security/blog/2020/05/04/mitigatin...It's written in Rust and is based around a version of Bochs modified for deterministic execution. It's got time-travel debugging (with WinDbg), which works by replaying forward from the nearest snapshot to the point at which the user is asking to move backwards to.The primary author of this software wanted to open source it, but the higher-ups at MSFT refused. He's been working on similar projects in a personal capacity though, e.g. https://gamozolabs.github.io/fuzzing/2020/12/06/fuzzos.html\n \nreply",
      "The trick at Microsoft is to start working on your project in your spare time. Then incorporate it into your project at MSFT. You get the clout associated with having an open source project but then you also get to use it internally as a sanctioned tool\n \nreply",
      "Watched some of his streams a while back. One of the most talented/productive devs I have ever seen tbh.\n \nreply",
      "Wow I stumbled on Gamozolabs' youtube when looking into determinism and hypervisors. Didn't know he also worked on TKO for MSFT. Glad he is making a similar project!\n \nreply",
      "I wonder if this inspired the VMWare VM record-and-replay functionality that came out in 2008. They discontinued it in 2011, but it's important to me because we used it at Mozilla to great effect and that made it easier for me to get Mozilla to support the development of rr, which started in 2011.\n \nreply",
      "I don't get how rr isn't more popular.\n \nreply",
      "A history of other time traveling debugging papers and products (including this one):https://jakob.engbloms.se/archives/1554https://jakob.engbloms.se/archives/1564\n \nreply",
      "This needs a [2005] qualifier\n \nreply",
      "Debuggers have had history tracing functionality for a long time, but being extremely slow and consuming a lot of storage meant it was rarely used except for very specific cases. Now that CPUs are faster and the average machine has a lot more RAM, it becomes more feasible to do this.\n \nreply",
      "Abstract:   Operating systems are difficult to debug with traditional cyclic debugging. They are non-deterministic; they run for long periods of time; they interact directly with hard-ware devices; and their state is easily perturbed by the act of debugging. This paper describes a time-traveling virtual machine that overcomes many of the difficulties associated with debugging operating systems. Time travel enables a programmer to navigate backward and forward arbitrarily through the execution history of a particular run and to replay arbitrary segments of the past execution. We integrate time travel into a general-purpose debugger to enable a programmer to debug an OS in reverse, implementing commands such as reverse breakpoint, reverse watchpoint, and reverse single step. The space and time overheads needed to support time travel are reasonable for debugging, and movements in time are fast enough to support interactive debugging. We demonstrate the value of our time-traveling virtual machine by using it to understand and fix several OS bugs that are difficult to find with standard debugging tools. Reverse debugging is especially helpful in finding bugs that are fragile due to non-determinism, bugs in device drivers, bugs that require long runs to trigger, bugs that corrupt the stack, and bugs that are detected after the relevant stack frame is popped.\n\n\nRelated work:\"ConSnap: Taking continuous snapshots for running state protection of virtual machines\"https://web.archive.org/web/20151014000129id_/http://act.bua...    \u2026In this paper, we present ConSnap, a system designed to enable taking fine-grained continuous snapshots of virtual machines\u2026 decrease the snapshot interval to dozens of milliseconds. We have implemented ConSnap on QEMU/KVM\u2026. Compared with the stop-and-copy based incremental snapshots, ConSnap reduces the performance loss by 71.1% ~ 10.2% under Compilation workload, and 14.5% ~ 4.7% for the Ftp workload, when the interval varies from 1s to 60s.\n\n\n\"ReVirt: Enabling Intrusion Analysis Through Virtual-Machine Logging and Replay\"https://www.usenix.org/legacy/events/osdi02/tech/full_papers...    \u2026ReVirt logs enough information to replay a long-term execution of the virtual machine instruction-by-instruction. This enables it to provide arbitrarily detailed observations about what transpired on the system, even in the presence of non-deterministic attacks and executions. ReVirt adds reasonable time and space overhead. Overheads due to virtualization are imperceptible for interactive use and CPU-bound workloads, and 13-58% for kernel-intensive workloads. Logging adds 0-8% overhead, and logging traffic for our workloads can be stored on a single disk for several months.\n \nreply"
    ],
    "link": "https://www.usenix.org/legacy/events/usenix05/tech/general/king/king.pdf",
    "first_paragraph": "",
    "summary": "**Debugging operating systems with time-traveling virtual machines [pdf] (usenix.org)**\n\nToday in the land of redundant recoveries, a brave soul at Usenix describes their attempt to build a virtual DeLorean, allowing Operating Systems to zip back and forward through time, helping programmers chase bugs like Marty McFly chasing his future. Naturally, the internet chorus, bewildered by such dark sorcery, starts sharing links like trading cards, gleefully pointing out that Microsoft kinda, sorta thought of this pre-emptively\u2014with a tool steeped in the arcane arts of Rust and Bochs. Meanwhile, commenters\u2014clinging to their *vintage*'08 VMWare memories\u2014ponder why this isn't just *everywhere* already. \"Remember rr? \u2764\ufe0f\" one whispers into the void, tears streaming down their digital cheeks. Could this be nostalgia or just the collective realization that their debugging tools still can\u2019t fix their own lives? Re: re: re: relive those bugs, it\u2019s like high school reunion but with more memory leaks. \ud83d\udd04\ud83d\udee0\ufe0f\ud83d\ude2d"
  },
  {
    "title": "Animate.css: Seamless CSS Animations Across All Browsers (github.com/animate-css)",
    "points": 24,
    "submitter": "LaunchpadHacker",
    "submit_time": "2024-08-14T16:37:20",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=41247991",
    "comments": [
      "I am actually looking for something very similar to this for a project I'm working on right now. However the license is something that would not be compatible with almost anything I would ever release or work on. I can't release a project in any license I want because this license is incompatible with it, and likewise any company I work with can't use a license that has this vague interpretation.\n \nreply",
      "That's quite a license. This is effectively unlicensed and unusable. I applaud the effort, but the terms are too vague. If I accidentally violate the terms of this license there is no period to cure or remedy the violation, for instance.\n \nreply",
      "Do you take any stand at all with regard to the conflict surrounding Jerusalem, or do anything that might affect any of those parties in any way? Congratulations, you\u2019re arguably in violation of section 3.1.10.\n \nreply",
      "You know what happens if you violate this license? Nothing.\n \nreply",
      "I've almost used these in projects many times when I wanted to add basic animations quickly. Credits to the authors for making a library with a nice CSS API, good docs, and a nice demo website.... but I've always found the defaults too loud for my taste. Kind of like most Power Point animations --- only usable now to be satirical or intentionally corny. That, and the provided animation flavors are never quite what I want. Once I consider considering customizing them, I decide to just go with something else.\n \nreply"
    ],
    "link": "https://github.com/animate-css/animate.css",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        \ud83c\udf7f A cross-browser library of CSS animations. As easy to use as an easy thing.\n         If you need the old docs - v3.x.x and under - you can find it here.Install with npm:Install with yarn:You can find the Animate.css documentation on the website.Animate.css supports the prefers-reduced-motion media query so that users with motion sensitivity can opt out of animations. On supported platforms (currently all the majors browsers and OS), users can select \"reduce motion\" on their operating system preferences and it will turn off CSS transitions for them without any further work required.Animate.css is licensed under the Hippocratic License.This project and everyone participating in it is governed by the Contributor Covenant Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to an",
    "summary": "**Animate.css: The Savior of Web Animations or a Legal Minefield?**\n\nIn an internet era flush with libraries that promise to solve all of life\u2019s problems, Animate.css strides in, caped in CSS, vowing to make your static website twirl and wiggle across all browsers. Commentators gather to worship its \"easy as pie\" usability, only to recoil in horror at the beastly Hippocratic License - a specter vague enough to spook even the most daring of developers. One brave soul asks if the library causes international diplomatic incidents, highlighting just how treacherously wide this license casts its net. Meanwhile, design aficionados condemn the preset animations as louder than a retro Power Point, sending them scampering back to the drawing board. \ud83c\udfad\ud83d\udcdc\ud83d\udc83"
  },
  {
    "title": "Linux Memory Overcommit (2007) (opsmonkey.blogspot.com)",
    "points": 26,
    "submitter": "signa11",
    "submit_time": "2024-08-17T01:10:59",
    "num_comments": 15,
    "comments_url": "https://news.ycombinator.com/item?id=41271667",
    "comments": [
      "If you want to optimize for throughout one option is to overcommit resources (CPU/MEM/IO/NET) but utilize backpressure mechanisms to reduce load during times of saturation.Kubernetes does this through node pressure eviction but it is pretty easy to hook into the pressure stall information  and have the application handle this as well (for example, start returning 429 HTTP responses when PSI goes over a certain level).At the end of the day the optimal overcommit is workload dependent \u2014 good metrics and an iterative approach is needed.\n \nreply",
      "As then as now, you can manage it.vm.overcommit_memory == 0  heuristic overcommitvm.overcommit_memory == 1  (full overcommit) allows allocating more memory than there is ram + swap.vm.overcommit_memory == 2  never overcommit. There must be enough physical ram or virtual swap to allocate the memory.\n \nreply",
      "I like to run my development VM with overcommit_memory == 2, but I recently learned that the way it actually fails is pretty confusing. It's not an orderly 'abort: malloc failed' or process termination like I would've expected. Instead, you get weird intermittent failures that don't look like OOMs and your system appears to have plenty of free memory at the time.Still good for flushing out scenarios where i.e. your build process needs 64GB of memory for approximately 500ms and then drops back down to reasonable levels, due to parallelism\n \nreply",
      "Can this be set for a specific process (or process group/tree), or only globally?\n \nreply",
      "GloballyFor a process you can use setrlimit()   (ulimit command)\n \nreply",
      "Reminder: if overcommit as a concept seems distasteful, the real ire should be directed at the Unix fork syscall, an API that will always fail on a process using over 50% of the available memory without overcommit. Ideally apps would use vfork or posix_spawn instead, but that isn't the world we live in. Overcommit is a sensible way to help apps that use a lot of memory \"just work\". You can always turn it off if you don't need apps using a lot of memory to be able to fork.\n \nreply",
      "There are also legitimate uses of overcommit for reserving huge areas of virtual memory and relying on demand paging to allocate physical memory, although strictly speaking enabling overcommit isn\u2019t necessary if you separate the \u201creserve\u201d (mmap(PROT_NONE)) and \u201ccommit\u201d (mmap(MAP_FIXED, PROT_READ | PROT_WRITE)) stages (which is what Windows forces you to do).\n \nreply",
      "That explains why Windows, which has a process model based on spawning and not forking, never had overcommit.\n \nreply",
      "I\u2019m not sure how this works on Linux exactly but in principle you don\u2019t need to support overcommit to avoid that problem.  On illumos for example anonymous memory allocations come from swap, which is a virtual resource that includes both disk and memory.  You do still have this problem if something is using more than half of swap, but (1) that\u2019s much larger, and (2) you can augment it with more disk space, which won\u2019t actually be used unless stuff actually uses all the physical memory.  This has its own tradeoffs but it\u2019s useful to keep in mind that there are other ways to do things.\n \nreply",
      "If available memory means physical + swap then you're saying the same thing as pcwalton.\n \nreply"
    ],
    "link": "http://opsmonkey.blogspot.com/2007/01/linux-memory-overcommit.html",
    "first_paragraph": "My life as an ops monkey.  Research, clippings, technology.\nSee also this RedHat document on the topic.To quote their description of over_commit_memory setting 2:  \"The kernel fails requests for memory that add up to all of swap plus the percent of physical RAM specified in /proc/sys/vm/overcommit_ratio. This setting is best for those who desire less risk of memory overcommitment.\" And from their coverage of overcommit_ratio:  \"Specifies the percentage of physical RAM considered when /proc/sys/vm/overcommit_memory is set to 2. The default value is 50.\"They also suggest that overcommit_memory should only be set to 2 on systems with large swap space.  I suppose that's something to keep in mind if you're running an embedded system with no writeable hard drive, for instance.  Even in that case, though, I would prefer my malloc()s return failure immediately rather than lead me to believe the memory is available.\n\nplayed about with this, it appears that overcommit_ratio is 'percentage of FRE",
    "summary": "Welcome to the **2007 Memory Overcommit Fiesta**, where Linux aficionados and Kubernetes fanboys unite to share their profound affection\u2014or loathing\u2014for mysterious system crashes. \ud83d\ude35 Yet another brave soul attempts to demystify the enigmatic world of `vm.overcommit_memory`, hoping to prevent their ops from resembling a three-ring circus. \ud83d\udc68\u200d\ud83d\udcbb Commenters dive in with all the zeal of a Black Friday sale, energetically debating the virtues of overcommit settings like they're trading Pok\u00e9mon cards. Each one has a \"unique\" approach, desperately believing they're one tweak away from turning their swappy nightmare into nirvana. Meanwhile, an enlightened few remind everyone that RAM isn't just an expensive placeholder and maybe, just maybe, we should stop treating system resources like limitless buffet plates. \ud83c\udf7d\ufe0f"
  },
  {
    "title": "Renderings Created with Only a Pencil (core77.com)",
    "points": 15,
    "submitter": "surprisetalk",
    "submit_time": "2024-08-16T15:00:39",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=41267021",
    "comments": [
      "OMG! The most incredible thing I have seen in a long time. The casio watch I thought was an ad in the webpage!\n \nreply",
      "Strange title. It's equivalent to \"pencil drawings\" but trying to take the long way around to evoking a CAD model render, but not using the relevant parts of that term.\"Photorealistic pencil drawings\" is more clear description of the art.\n \nreply"
    ],
    "link": "https://www.core77.com/posts/133324/Fighting-Through-Mental-Struggles-Incredible-Renderings-Created-with-Only-a-Pencil",
    "first_paragraph": "From a young age, artist Kohei Omori was diagnosed with OCD and struggled in school. He has described his obsession with detail as a disadvantage that makes everyday life difficult; and while he was able to gain an equivalency diploma after dropping out of high school, he was not able to make it all the way through art school.After dropping out, he became obsessed with a nut and a bolt, and began drawing them. Using only a pencil, this is what he produced: His sister posted it to Twitter, and unsurprisingly it went viral.Other work Omori has produced: This one in particular blew me away, where he nails the fonts traveling over a curved surface: He posts process videos on his Instagram, like this one:The online attention hasn't always been helpful; Omori recounts someone commenting \"You should have just taken a photo.\" And as his symptoms worsened, he stopped drawing altogether and resolved to burn his drawings. Luckily Kazuomi Kishimoto, a supporter of Omori's work and the Director of ",
    "summary": "Title: A Pencil, a Nut, and the Infinite Abyss of Internet Validation\n\nIn a world where a pencil and obsessive attention to detail can masquerade as both a crippling disorder and a fast-track to social media fame, Kohei Omori sketches nuts and bolts with such excruciating precision that even the most mundane objects become a cry for help wrapped in graphite. Dive into the comments and witness the tragicomedic spectacle of internet denizens losing their collective minds over something you'd usually find in a high school art class, if the teacher was particularly sadistic. One luminary suggests a photograph might have sufficed, unwittingly highlighting the redundant nature of spending thousands of hours to create something a 12-megapixel camera can accomplish in a fraction of a second. Meanwhile, another commenter trips over themselves trying to redefine 'renderings' to mask their confusion, inadvertently inventing a new art category: \"Pencil-Generated Existential Despair.\""
  },
  {
    "title": "The Curious Case of QUEENCREEK (mobeigi.com)",
    "points": 4,
    "submitter": "mobeigi",
    "submit_time": "2024-08-19T00:21:54",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://mobeigi.com/blog/security/malware/the-curious-case-of-queencreek/",
    "first_paragraph": "A lot of software on our machines (whether it be home desktops or enterprise servers) is designed to run automatically without manual triggers.Great examples include:Unfortunately, software that runs automatically makes malware salivate uncontrollably.\nMalware often sets up automated executables that can re-trigger its malicious code in the hope of keeping itself alive and well on the system. Therefore, it is important to ensure systems do not have any suspicious automated scripts running that might be malicious (or otherwise unwanted).On my Windows machine, I sometimes explore executables that are set to automatically run using Microsoft\u2019s Sysinternals Autoruns. Autoruns is a nifty tool that will show you all the registry entries, services, and tasks that are configured to trigger automatically.During my inspection I managed to do some cleaning. I removed\u00a0BaiduYunDetect from starting automatically. I use this app when I am downloading various files from the Baidu Cloud (often malware ",
    "summary": "In the gripping thriller that is \"The Curious Case of QUEENCREEK,\" a brave keyboard warrior dives into the depths of their Windows registry to battle the evil malware overlords. \ud83e\uddb8\u200d\u2642\ufe0f\ud83d\udcbb Watch in awe as they wield the mighty Sysinternals Autoruns, slicing through suspicious auto-start services like a hot knife through butter. Commenters, in a heroic display of missing the point, debate the ethics of using Baidu Cloud for downloads while subtly bragging about their superior Linux setups. God save us all from automatic software \u2014 but mostly, from ourselves. \ud83e\udd26\u200d\u2642\ufe0f\ud83d\udc7e"
  },
  {
    "title": "Police Cannot Seize Property Indefinitely After an Arrest, Federal Court Rules (reason.com)",
    "points": 479,
    "submitter": "throwup238",
    "submit_time": "2024-08-18T16:28:12",
    "num_comments": 207,
    "comments_url": "https://news.ycombinator.com/item?id=41283310",
    "comments": [
      "This is a well-intentioned but largely useless ruling because it fails to define the maximum duration for which property can be held. As such, it's up to the police as to what qualifies as indefinite. If the ruling had capped it to 14 or 30 days, that would be a useful ruling.A hard time cap is essential because one's life too has a cap. The amount of time for which one can go without earning a livelihood also has a cap. Imagine if prison sentences didn't have a time cap.This illustrates a common problem with our laws. They're very often vaguely defined, needlessly so, in a way that keeps attorneys and judges very rich, and the police abusive, to the detriment of the individual. In a sensible world, the laws would all be rewritten for clarity and consistency, starting with the Constitution.\n \nreply",
      "I once had the cops seize $800 in cash I had on me to pay for motorcycle service (15% discount with cash) and hold it for 3 months.Eventually I got a letter saying I had to show up and prove I wasnt going to do drugs with it.  So I showed up with my invoice.Then I was told I had to submit fingerprints and sign a letter promising I wasnt going to do drugs and I refused.Finally a month later they sent me a letter saying I had forfeited the money and I showed up again (took a day off work) and they said I had to go to court.  So I went to court, and the judge spent ten minutes telling the cops that didnt show up I had to get my money back.Next month after that I got a call saying I had property to pick up and that I'd be fined daily if I didnt.  So I got the money back.\n \nreply",
      "They took my camera and then when I tried to get it back they claimed that nothing like that was in evidence.  So I filed a police report because the police stole my camera, but I never heard back about it.Glad you eventually got your money.\n \nreply",
      "Pretty common. This sort of mistrust is one reason people oppose red flag laws that require seizure (before even being tried, and without the protections of the criminal system).On a side note, how did they find the money? Or was this an expensive lesson in why not to consent to a search?\n \nreply",
      "If you don\u2019t consent to searches, cops that want to search you will either simply search you illegally anyway, or call out dogs that are trained to alert whenever the cops want them to.  There\u2019s a reason that K-9 units are called \u201cprobable cause on four legs\u201d.\n \nreply",
      "If they try make sure you assert that you do not consent to searches, and would like to be on your way.. Then when they try to hold you ask them if the detention is inline with `Rodriguez v. United States` which specifically forbids cops from delaying a driver so that they can get dogs to the scene.\n \nreply",
      "This sounds nice until a cop throws you against a car anyways. You're right to give the advice because this is what should happen but that's not the reality because the whole premise is based on what already should not be happening. You'd only need that line against a cop abusing their power. They're almost always going to continue abusing their power\n \nreply",
      "Many cops just try to trick you or are ignorant. Providing this info and asking for a supervisor is the best basis for any potential future legal recourse (especially if recording). Of course none of that matters in the moment, but it can make a big difference in getting that $800 back or not having it seized in the first place.\n \nreply",
      "Well in my experience (given in another comment) this is not the case. With a judge, sure, but a cop no. (Fwiw, I'm white)It's worth a shot, yes, but it's also unlikely to change the tables. Because again, the only time you would need to utilize such information is when you're encountering a cop who is actively abusing their power. My point is that in such situations, the information has a chance to de-escalate, be neutral, or escalate the situation.It's hard to tell on the Internet what the intent is because well intended seemingly good advice can also be noise. I'm just trying to convey that the picture isn't black and white. I mean if things happened they way they should, we wouldn't need to call a supervisor or remind a cop of the law, right?\n \nreply",
      "\"Because again, the only time you would need to utilize such information is when you're encountering a cop who is actively abusing their power.\"Again, this is not true. There are other situations where this info can be beneficial (ignorant cops or deceptive but not corrupt cops)."
    ],
    "link": "https://reason.com/2024/08/16/police-cannot-seize-property-indefinitely-after-an-arrest-federal-court-rules/",
    "first_paragraph": "\nPolice\n\n\nPatrick McDonald\n\n|\n8.16.2024 11:59 AM\nThe Fourth Amendment's protection against unreasonable searches and seizures extends to the length of a seizure, a federal court ruled last week, significantly restricting how long law enforcement can retain private property after an arrest.\"When the government seizes property incident to a lawful arrest, the Fourth Amendment requires that any continued possession of the property must be reasonable,\" wrote Judge Gregory Katsas of the U.S. Court of Appeals for the District of Columbia in a unanimous ruling.Most courts of appeal to pass judgment on the issue\u2014namely, the 1st, 2nd, 6th, 7th, and 11th circuits\u2014have held that, once an item is seized, law enforcement can retain the item indefinitely without violating the Fourth Amendment. These precedents have allowed police to retain personal property without clear legal grounds, effectively stripping people of their property rights merely because they were arrested. The D.C. Court of Appeals'",
    "summary": "**Federal Court Discovers Fourth Amendment, Comment Section Loses Mind**  \nIn a shocking twist that could only occur in the \"land of the free,\" a federal court has finally decided that the police maybe\u2014*just maybe*\u2014shouldn't hold onto your stuff until the sun explodes. Justice Gregory Katsas scribbles furiously that property seizures need to be \u201creasonable,\u201d a term which in legal jargon translates loosely to \u201cnot forever, or at least not until we forget where we put it.\u201d Meanwhile, the commenters spiral into Kafkaesque tales of missing cameras and legal battles over $800, inadvertently scripting the next season of \"Law & Order: SVU - Petty Cash Unit.\" If only the Fourth Amendment included the right not to have your day ruined by legal absurdity and forum advice that ranges from the cynical to the paranoid. \ud83d\udc6e\u200d\u2642\ufe0f\ud83d\udcbc\ud83d\udd70\ufe0f"
  },
  {
    "title": "How the instrument landing system at Antarctica's McMurdo Station works (flightradar24.com)",
    "points": 76,
    "submitter": "rmnwski",
    "submit_time": "2024-08-14T09:07:00",
    "num_comments": 16,
    "comments_url": "https://news.ycombinator.com/item?id=41244137",
    "comments": [
      "Wow that\u2019s badass. It\u2019s tempting to argue that a GPS based RNAV approach could have similar performance but this has several advantages:The ground based equipment dictates approach path with no updates to onboard approach databases on aircraft needed.RNAV can\u2019t do curved approaches on a glide slope as far as I know.ILS minimums are generally slightly lower than LPV which is the RNAV approach type with lowest minimums.This supports older aircraft with ILS (localizer with glide slope) that don\u2019t have a WAAS capable GPS.Edit: Also, using the Mode S transponder with precision approach radar instead of ADSB-out for the aircraft position means older planes without ADSB (because they don\u2019t fly under a mode C veil) can be supported and it also means the base is trusting their equipment for the aircraft position rather than trusting an aircraft that potentially doesn\u2019t have an SBAS GPS on board.\n \nreply",
      "Landing at McMurdo Station seems a lot like landing on a giant, slow-moving aircraft carrier.I wonder how similar their ILS is to the ILS used on navy aircraft carriers?\n \nreply",
      "Aircraft carriers have two systems.The Instrument Carrier Landing System (ICLS) is basically just an upgraded version of the civilian ILS which they squashed down onto a ship. It broadcasts a beam of radio waves into the air and any aircraft can pick it up and follow the glide slope.There is also the Automatic Carrier Landing System (ACLS), which is roughly equivalent to this system. Radar receivers on the carrier are fed into a computer, which calculates the aircraft's position and transmits back commands back to the aircraft's autopilot.The cool part about this Transponder Landing System is that it doesn't require any equipment upgrades to the aircraft. An aircraft equiped with original ILS equipment from the 60s can use it.\n \nreply",
      "Year round aviation access to Antartica. Well Done! Every step towards McMurdo becoming a normal city despite its location seems like such an incredible accomplishment.Can this work at pole station too? I realize there's a lot of other considerations landing there in the winter (fuel freeze temp?) but the less isolated it becomes, the more science we can get.\n \nreply",
      "There a couple companies that make a DILS where the localizer and glideslope can be temporarily deployed.  The intent is for emergency or short term use.\n \nreply",
      "How does the TLS work with multiple aircraft landing at once? With ILS, the signal broadcast is static but it seems like it will now be per aircraft.\n \nreply",
      "The entire fleet qualified for McMurdo seems to be six planes and three helicopters, if I'm reading this right.https://www.usap.gov/sciencesupport/scienceplanningsummaries...I would guess it to be pretty rare that multiple aircraft would be on approach at once, and if so, I'd imagine one could hold at a distance to allow approaches to be serialized.\n \nreply",
      "I've flown to/from McMurdo on a total of 4 types of planes... C-17, C130 (kiwi AF), L-100 (Safari, contracted by Italian antarctic program) and LC-130 (to/from pole).\n \nreply",
      "What an experience! Can I ask your role in visiting?\n \nreply",
      "Basically I work on experiments (balloons and in-ice) that are attempting to detect ultra high energy neutrinos interacting in ice sheets via radio.\n \nreply"
    ],
    "link": "https://www.flightradar24.com/blog/transponder-landing-system/",
    "first_paragraph": "",
    "summary": "<h1>Antarctica's McMurdo Station Upgrades to Fancy Beep-Boop Landing Tech</h1>\n<p>The wizards at McMurdo Station have rigged an <em>ancient</em> technology, known as the Instrument Landing System, to keep their prop planes from turning into expensive ice sculptures. Commenters, in an <i>adorable</i> display of one-upmanship, engage in technical tit-for-tats about GPS, RNAV, and assorted acronym soup that only 0.01% of the population cares about. Meanwhile, one brave soul wonders if this might make McMurdo Station the next major urban hub (spoiler: no). Meanwhile, debates on multi-plane landing capabilities confirm that the station\u2019s traffic resembles that of a rural airstrip on a slow Tuesday.</p>"
  },
  {
    "title": "Markov chains are funnier than LLMs (emnudge.dev)",
    "points": 10,
    "submitter": "todsacerdoti",
    "submit_time": "2024-08-18T22:52:37",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=41286203",
    "comments": [
      "> Asking an LLM for an \u201coriginal thought\u201d is almost oxymoronic, if not just moronic. It was built with the express purpose of not doing that.What a wonderful insight.\n \nreply",
      "I've been running IRC markov chain bots for ~20 years. In the last couple years I've been running local LLM alongside them. While there are people that still prefer the markov chain bots the majority invoke the LLMs. But maybe that's because I picked the most hallucinate'y, least refusing, most funny models I can (like mistral-7B fine tunes) instead of something smart, locked-down, and low temperature like chatgpt's LLM as a service.If anything seeing the LLM and markov bots side by side has really reinforced how much of the markov bot \"humor\" is human perception imposed on chance outputs. The markov's \"learning\" ability is still far superior though.\n \nreply",
      "https://en.wikipedia.org/wiki/Mark_V._Shaney\n \nreply"
    ],
    "link": "https://emnudge.dev/blog/markov-chains-are-funny/",
    "first_paragraph": "",
    "summary": "Welcome to another tech rodeo where hobbyists do the MIT Shuffle to distinguish Markov chains from LLMs like discerning vintage wine from boxed grape juice. Today's highlight features an \"eye-opening\" comparison that leaves the cognitive bar so low, a digital amoeba could limbo under it. Comments swiftly devolve into a nostalgia-drenched squabble boasting their LLM flunky setups on their grandpa's basement servers. Meanwhile, someone drops a Wikipedia link, perhaps as an attempt to inject some credibility into the discourse or maybe just to help lost readers find their way back to sanity. \ud83d\ude44\ud83d\ude02"
  },
  {
    "title": "Energy economics and rocket science with Casey Handmer (complexsystemspodcast.com)",
    "points": 40,
    "submitter": "vikrum",
    "submit_time": "2024-08-18T18:33:49",
    "num_comments": 22,
    "comments_url": "https://news.ycombinator.com/item?id=41284285",
    "comments": [
      "Casey Handmer's company is creating synthetic hydrocarbons from renewable energy. Here is a good video where he gives a tour of the company and talks about its goals: https://www.youtube.com/watch?v=NngCHTImH1g.Curious what people think about the idea of synthetic hydrocarbons? It is a seemingly obvious idea that I hadn't heard about until recently, as long as you can use energy efficiently to create the synthetic hydrocarbons.\n \nreply",
      "There are a few companies doing it.Prometheus Fuels is another, they have been on HN previously :https://news.ycombinator.com/item?id=31264388They have a cool website :https://prometheusfuels.com/There are some companies that want to use nuclear power , Valar Atomics is one :https://www.valaratomics.com/The cost estimates seem to be 4-10 times as expensive as fossil fuels.\n \nreply",
      "> The cost estimates seem to be 4-10 times as expensive as fossil fuels.Importantly, this cost is expected to decrease precipitously as the cost of solar energy declines exponentially and as the the conversion technology continues to improve through iteration and economies of scale.\n \nreply",
      "That's very true.Also, over the next century the cost of fossil fuel extraction will increase and the price of synthetic and fossil fuels will get much closer at least.If there was a tax reduction for carbon neutral fuels they could become cost competitive even more rapidly.Kerosene for aviation and diesel for ships, trucks and mining are good candidates for synthetic fuels.\n \nreply",
      "The problem with synthetic hydrocarbons isn\u2019t energy abstractly its capital vs energy costs.  The more hours per month of electricity you want the more you end up paying on a per kWh basis.So if you\u2019re fine turning all the equipment off most the of time you can get really cheap power, but having a 1 billion dollar facility including its workforce doing nothing 70% of the time is expensive.  On the flip side if you want 24/7 operation you end up with much higher per kWh rates.\n \nreply",
      "> having a 1 billion dollar facility including its workforce doing nothing 70% of the time is expensiveWe work normally only about 33% of a day.\n \nreply",
      "Very expensive industrial facilities don't.\n \nreply",
      "Synthetic hydrocarbons will likely fail, simply because of the same reasons vertical farming failed. Once you're spending money on infrastructure to capture solar energy, losing 80% to inefficiency, before piping into your vertical farm via LEDs (losing another 50% to 80%), a farmer who draws free sunshine will outcompete you because he's using free energy while you're spending millions to power a small factory sized farm; energy isn't free.Likewise, Casey's idea (Terraform Industries) requires solar energy to convert air and water to natural gas. It'll cost 10x the price of the gas Qatar & Saudi Arabia pump out of the ground essentially for free. These technologies won't be viable until humanity is pressed harder and prices (for food or fuel) climb.\n \nreply",
      "Their thesis is probably that solar electricity will soon be (as an example) 1/10th the price of natural gas electricity and that they believe they can get 10-30% storage/conversion efficiency. Therefore, the price of synthetic natural gas will be cheaper than current natural gas.There are a number of acknowledged assumptions in that model and other potential problems that may make their thesis incorrect, but you have raised none of them so far nor directly refuted the thesis.\n \nreply",
      "You seem very confident in your position, and I am reminded of the confidence of people exclaiming solar power would never take off back when commercially available PV efficiencies were in the single digit percentages. Going from 8% to 24% effectively tripled PV panel output on a per area basis, even though it sounds like just a 16% increase.Given your confidence, I assume you are aware of efficiency bottlenecks and their associated fundamental thermodynamic limits.What do you believe is the bottleneck, and what thermodynamic principle limits it?At renewable farm scale everyone has read about negative pricing etc, so it seems there will always be a niche to profit from.How can you predict in advance the capex investment cost in advance of future developments?Pumping up fossil fuel certainly comes with costs (even when excluding moral and future costs), think of employees, securing facilities against attack, etc.Given Western divestment from Russian fossil fuels, on non-economic grounds, why couldn't we similarly some day divest from fossil fuels?> It'll cost 10x the price of the gas Qatar & Saudi Arabia pump out of the ground essentially for free.What a bizarre statement, 10x 0 = 0.If you want to educate people how you believe electroreduction of CO2 to be a dead end, please give scientific and economic evidence that renewable fuels could never become cheaper than sourcing and or distributing fossil fuels.\n \nreply"
    ],
    "link": "https://www.complexsystemspodcast.com/episodes/solar-economics/",
    "first_paragraph": "I'm joined this week by my buddy Casey Handmer of Terraform Industries. The conversation starts with catching up non-specialists to the exciting revolution in solar energy which happened over the last 15 years (and continues to make almost incredible progress), and then touches on space, organizational design, and the moral case for increasing energy consumption.[Patrick notes: I add commentary to transcripts, set out from the rest of the text in this fashion.]Sponsor: This podcast is sponsored by Check, the leading payroll infrastructure provider and pioneer of embedded payroll. Check makes it easy for any SaaS platform to build a payroll business, and already powers 60+ popular platforms. Head to checkhq.com/complex and tell them patio11 sent you.Timestamps(00:00) Intro\n(00:25) Casey\u2019s startup: Terraform Industries\n(00:48) The rise of solar power\n(02:19) Solar power vs. traditional energy sources\n(05:18) Economic and industrial impacts of solar\n(09:02) Challenges in aviation and ener",
    "summary": "In this riveting episode of \"Futile Efforts with Casey Handmer,\" we dive headfirst into a solar energy rabbit hole that's presumably unseen by anyone but Casey and his friend from Terraform Industries. Prepare to experience the thrill of rehashed solar energy revelations posing as cutting-edge disruptors, served with a side of moral pontification on why burning more energy is actually good for polar bears, or something. Our comment section becomes a mishmash of amateur economists and weekend engineers debating the economics of synthetic hydrocarbons \u2013 a concept so obvious, even Casey's dog probably thought of it first. If you crave a regurgitate of armchair expertise and unchallenged enthusiasm for expensive eco-alchemy, look no further; and don't forget to stick around for paychecks from our sponsors at Check, because someone's got to fund this eco-circus! \ud83c\udf0d\ud83d\ude80\ud83d\udcb8"
  },
  {
    "title": "Leaving Neovim for Zed (stevedylan.dev)",
    "points": 204,
    "submitter": "mxstbr",
    "submit_time": "2024-08-18T18:37:10",
    "num_comments": 146,
    "comments_url": "https://news.ycombinator.com/item?id=41284322",
    "comments": [
      "xxx"
    ],
    "link": "https://stevedylan.dev/posts/leaving-neovim-for-zed/",
    "first_paragraph": "A journey through text editors and how I landed on Zed after years of NeovimI think every developer has their own text editor journey and how they landed on the tool they use today. Perhaps I\u2019m a geek but I love those stories. I have a great appreciation for developer tools and the work that goes into them. This post is for the other geeks out there that also care, and I hope my journey and perspective can prompt others to experiment and try developer tools outside their comfort zones. You never know what you might land on and how much you might enjoy it!My text editor journey starts with a faint memory of Atom. I was learning the true fundamentals of HTML CSS and Javascript, and I honestly can\u2019t tell you how I landed on Atom as a text editor. I do remember using it for a few weeks, and I kept seeing other people use or mention VSCode, so of course I gave it a shot and used it for a while. However this didn\u2019t last long. At the time my wife needed my laptop for her photo editing job, so",
    "summary": "Title: Yet Another Developer Swaps Text Chisels\n\nAt <em>stevedylan.dev</em>, another brave soul details their harrowing odyssey from the forgotten lands of Neovim to the glittering shores of Zed, thus continuing the eternal cycle of text editor monogamy until the next shiny thing arrives. Our hero mysteriously transitioned through Atom because, why not follow the crowd to VSCode, only to bail (shockingly, not for Emacs) when domestic necessity reared its ugly head! Meanwhile, in the comments, developers engage in the sacred ritual of asserting their text editor's superiority, as if their choice of code-scribbling tool bestows upon them the eldritch secrets of the universe. Indeed, the great Editor War trundles on, leaving no victor \u2013 only casualties armed with hefty config files and smug blog posts."
  },
  {
    "title": "Getting back into C programming for CP/M (kevinboone.me)",
    "points": 157,
    "submitter": "AlexeyBrin",
    "submit_time": "2024-08-18T11:24:02",
    "num_comments": 70,
    "comments_url": "https://news.ycombinator.com/item?id=41281665",
    "comments": [
      "I put together a simple CP/M emulator here:https://github.com/skx/cpmulator/Alongside that there is a collection of CP/M binaries, including the Aztec C compiler:https://github.com/skx/cpm-dist/So you can easily have a stab at compiling code.  I added a simple file-manager, in C, along with other sources, to give a useful demo.  (Of course I spend more time writing code in Z80 assembler, or Turbo Pascal, rather than C).The author has a followup post here for thos interested:* Getting back into C programming for CP/M -- part 2\n* https://kevinboone.me/cpm-c2.html\n \nreply",
      "I remember using Aztec after using Software Toolworks C for a a few years. It was incredibly advanced in terms of standard C at the time. It was the first time I could just type code from the \"C Programming Language\" in and it would work unchanged.\n \nreply",
      ">The Aztec C compiler would have originally be distributed on floppy disks, and is very small by moden standards.If I remember correctly, Aztec C was from Mark Williams.  It was also the basis for the c Compiler that came with Coherent OS.But yes, things were far easier in the 80s, even on Minis which I worked on back then.  These days development is just a series of Meetings, Agile Points, Scrums with maybe 2 hours of real work per week.  Many people now tend to do their real work off-hours, a sad situation.But I am looking for 1 more piece of hardware, then I can set up a DOS Machine to play with myself :)>The Aztec compiler pre-dates ANSI C, and follows the archaic Kernigan & Ritchie syntaxI still do not like ANSI C standards after all these years.\n \nreply",
      "While we're ranting don't forget developers in the 80's didn't sit in a noisy open space!This was totally me ~15 years ago in a Scrum place with an open floor plan, doing most of my work after everyone left in the evening or on holidays because it was quiet and I could finally get some stuff done. I wrote big pieces of the product by myself.My first C compiler was on a VAX. I did have some C compiler for my ZX Spectrum at some much later point but I don't remember doing much with it. Then a series of compilers for PCs. One random memory is some sort of REPL C, maybe Interactive-C or something? But pretty quickly it was Microsoft and Borland.EDIT: On a more serious note re: meetings and such. Part of the difference is that working in much larger teams and projects becomes less efficient and requires more communication. Mature projects also require less of the builder thing and more of the maintainer thing. Software lasts a long time and inevitably maintenance becomes the work most people end up doing.\n \nreply",
      "That sounds familiar so I looked it up[0]. I used Mark Williams C compiler on the Atari ST--eventually settling on Megamax C as it ran better on my small floppy-based machine.Computing was a smaller world back then, the company was founded by Robert Swartz (father of Aaron Swartz) and named after his father William Mark Swartz.[0] https://en.wikipedia.org/wiki/Mark_Williams_Company\n \nreply",
      "> If I remember correctly, Aztec C was from Mark Williams. It was also the basis for the c Compiler that came with Coherent OS.That would have been \"Mark Williams C\", also marketed as \"Let's C\" for MDSOS.\n \nreply",
      "Yup. Let's C was the cut-down version of MWC86, with no large-model support. This limited you to 64K code and 64K data. I got a copy of it one Christmas, but never used it much because of this limitation.\n \nreply",
      "Correct, that was it, \"Lets C\".\n \nreply",
      "Back in the early 90's, before Linux took off, I ran Coherent. It came with incredible documentation, and I still remember the huge book with the shell on it.And you're absolutely right about all the agile bull...\n \nreply",
      "These days development is just a series of Meetings, Agile Points, Scrums with maybe 2 hours of real work per week.Think about early video game development at large companies: One person (maybe two), six months.  The company gave them room to practice their art, and the result sold a million copies.These days everyone wants to cosplay Big Tech and worship abstraction layers, so you can't get all of the \"stakeholders\" in the same meeting in six months.\n \nreply"
    ],
    "link": "https://kevinboone.me/cpm-c.html",
    "first_paragraph": "\n\nFor reasons I've discussed elsewhere, I've\nrecently become interested in using, and programming, CP/M again,\nafter an interval of 40 years. I've even bought a real,\nZ80-based, CP/M machine to experiment with. There's a small, but\ngrowing, market for these machines among retrocomputing enthusiasts. \n\nI've implemented a number of new utilities for CP/M in C --\nsee, for example, KCalc-CPM, cpmbox,\nand cpmlife.\n\ncpmlife was implemented using a modern Z80 cross-compiler,\nbut I feel that somehow this is cheating. If I'm going to develop for\nCP/M, I really ought to use CP/M tools. I might not do all the development\nor testing on CP/M -- because it's rather time-consuming -- but\nI like to know that it would be possible to maintain my code\nentirely under CP/M. \n\nThis article is about developing in C for CP/M, using a 40-year-old\nC compiler, and how this differs from modern C development.\nThe compiler I'm using is the 1982 release of Manx Software Systems'\n\"Aztec C\". The compiler is freely, an",
    "summary": "**Old Man Yells at Cloud Compiler**\n\nIn a quixotic twist of software necromancy, Kevin Boone dusts off a 40-year-old Z80 CP/M machine, because nothing says \"cutting-edge\" like a platform old enough to be your dad. Diving back into C programming with the fossilized Aztec C compiler, he asserts a touching yet futile resistance against modern programming conveniences. Commenters, swooning over their dusty memories, vie in an obsolete tech one-upmanship while casually lamenting the 'good-old days' of software dev, when you could code in peace without the tyranny of Agile meetings. Because clearly, nostalgia-compiling on an OS that pre-dates the internet is the hill we all want to die on in 2023. \ud83e\udd95\ud83d\udcbe"
  },
  {
    "title": "Mike Magee, founder of the Register, has died (fudzilla.com)",
    "points": 144,
    "submitter": "dannyobrien",
    "submit_time": "2024-08-18T21:56:26",
    "num_comments": 21,
    "comments_url": "https://news.ycombinator.com/item?id=41285851",
    "comments": [
      "\"This brought him into contact with Led Zeppelin guitarist Jimmy Page. Despite his fame, his accountant did not allow Page to have much money, so he approached Magee for a loan to buy an esoteric bookstore. The loan was never repaid.\"I hope to have one paragraph in my obit as cool as that.\n \nreply",
      "The Register is one of the few websites on the internet which makes tech articles worth reading. They make the reader realize the significance of tech, who might otherwise pass it off as nuances which only nerds should be aware of.\n \nreply",
      "I don't necessarily disagree, but it should be noted that, after a few years, Magee very publicly disagreed with the direction taken by The Register, and started its own separate thing (the Inquirer).\n \nreply",
      "Very true. Their journalists understand the technology they are writing about and explain it clearly. They also provide background and a bigger picture. One can view them as sceptical, perhaps even jaded hacks, but what they write generally stands the test of time.In my opinion, it is the best tech news website.\n \nreply",
      "Ultimately they drove me away by using too many \"cute\" names for tech companies.\n \nreply",
      "I understand where you are coming from but silly stuff like that is one way to encourage what I am now going to call: \"harmless tribalism\".You may not be familiar with the extensive campaign to find a suitable name for Microsoft.  The winner was Micros~1.  It took quite a lot of discussion and once the winner was declared, most people hated it but it became the standard.  That's the nature of proper, decent, discourse.  People riffing on all sorts of stuff and basically having a laugh.  No one was hurt and a lot of fruitful chat was had.Perhaps you are not familiar with this: https://www.theregister.com/Design/page/reg-standards-conver...  That too was the result of a lot of banter and some quite scientific and mathematical digressions ensued.el Reg has changed.  It is rather more \"professional\" these days or as we say in the trade \"boring\".  However, it is still there and you never know, vestigil thingies can re-grow.  It is certainly more alive than /. but it is bordering on lumbering around with its arms outstretched looking for brainzzzz.\n \nreply",
      "I\u2019ve read the register throughout the years but I never thought much about the folks behind it. The obituary tells a wild story that was heartwarmingly written by a friend. Now I\u2019m waiting for the biopic!\n \nreply",
      "I love El Reg, and have really appreciated that it has aged gracefully, unlike most of its contemporaries. The staff are really knowledgable, and that isn't always apparent, from their casual approach. I learn a lot from that redtop.His story is pretty much classic.The Inquirer was also quite enjoyable.I like that Simon Travaglia is still penning his BOFH series. I have followed him since the 1980s.\n \nreply",
      "Well, he was very, very indirectly a managing director over BOFH.  It was just a matter of time.Cheekiness aside, I love what he did for IT and the Internet.  I'm sorry to see him go.\n \nreply",
      "The fate of journals wax and wane, and for me the apex of el Reg was in the era of Andrew Orlowski and (RIP) Lester Haines (they overlapped).  Orlowski knows his computing history and writes really well.  Haines wrote not just knowledgeably but with a carefree humour that made you feel like he was smiling with you as you read his work.  His loss was a real blow.I still read it regularly, but some of the spirit has gone.  But you never know -- someone new could show up and revive that joi deivivre je ne sais quoi.  Haines definitely did that when he joined.\n \nreply"
    ],
    "link": "https://fudzilla.com/news/59503-mike-mageek-is-dead",
    "first_paragraph": "Industry gadfly and mate died yesterdayOne of the legends of the IT industry, tantric guru, and the inventor of the cynical red-top tech tabloid, Mike Magee, has died at the age of 74.Magee started his career as a printer before working for VNU Business Publications on PC Dealer and then at their IT news venture, VNU Newswire. This was where I met him; his effective method proved a handful for his editors.His technique was simple: He would disappear for most of the day and somehow write the lead story. If needed, he could be found in one of Soho\u2019s nearby waterholes. If you were a good editor you learnt not to interfere.He left the Newswire and co-founded The Register, the UK's first Internet-based IT tabloid, with John Lettice in 1994. Magee focused on computer chip reporting in the newsletter, and Lettice covered software.\"We realised the chip industry was worth about $200bn a year then, and we were down the pub one day and said, \u2018Why don't we do a newsletter because we can and this i",
    "summary": "<b>Internet Weeps Programmatically: Saga of a Tech Satirist</b>\n\nThe tech world loses one of its <em>grandmasters of snark</em>, Mike Magee, and promptly the squad of greasy commentators type out *heartfelt* testaments like they're debugging emotional support software. They wax nostalgic over \"the days of true tech journalism,\" in between arguments on which unofficial nickname for Microsoft was the funniest\u2014computed nostalgia with a side of trivia. Heaven forbid we stick to the sob-fest without a nod to their prowess in understanding tech deeper than your average Facebook memory reminder. Meanwhile, some lament the decline of The Register into \"professionalism,\" as if journalism isn't supposed to be professional, mourning for the golden age when slamming a keyboard produced Pulitzer-worthy sarcasm. \ud83c\udfc6\ud83d\ude22\ud83d\udc68\u200d\ud83d\udcbb"
  },
  {
    "title": "Bold Edit: An editor written by power users (bold-edit.com)",
    "points": 72,
    "submitter": "thunderbong",
    "submit_time": "2024-08-18T16:36:19",
    "num_comments": 34,
    "comments_url": "https://news.ycombinator.com/item?id=41283367",
    "comments": [
      "Given the size of the undertaking, it seems likely that all (decent) editors are written by power users.\n \nreply",
      "The blog seems to have some more details and features: https://bold-edit.com/blog/wrote-my-own.html. The feature set does seem nice, will keep an eye for this, but likely that you will have to pry Emacs out of my dead hands :)\n \nreply",
      "Yeah. Text editors constantly come and go. And that's no bad thing, but for those of us just wanting to edit some text: what do we do? The design goal of these projects is always to be better than what's currently available, which sounds great, and then, 5 years later, development has stalled, and the community is gone. Meanwhile Emacs is still going.The features of this thing all sound decent enough, but there's no source code, and it doesn't run on Windows, and it doesn't run on macOS, and scripting is \"coming soon\" - I wonder if that scripting will end up even half as good as Emacs's programmability. I bet it won't.I have been here before. And that is exactly why I continue to use Emacs, even though it is a bit weird. I bet I will still be using Emacs in 2035, and I bet this thing will be long dead.(I bet based on the odds. Time will tell.)\n \nreply",
      "No source code, \u201cprivate use only\u201d EULA, whatever that means.\n \nreply",
      "It's probably written in a programming language with the same terms, too. (Bolin)\n \nreply",
      "My take: first uses are free. Then we gonna getcha.\n \nreply",
      "Less cynical take: \"I wrote this for me but it turns out it might be good for many. Maybe one day it could pay for a few pizzas.\"It's a solo developer, not a startup.\n \nreply",
      "The site does not seem to have much on what advantages I get by using it.  Maybe the debugging is better(?)>Fast 4K: Bold doesn't drop a frame on a 144hz 4K monitor, using <1 CPU coreI would think this would be owned by the whatever GUI environment you are in.\n \nreply",
      "> Unique Debugging\n\nThat caught my eye. How do you people debug C (on Linux) ? I'm tired of switching constantly between Sublime and GDB. I know there's a GDB plugin for Sublime but it's a pain to configure.I need to edit my code AND set breaks in the same GUI window. There is DDD but it's old and odd looking. Tried Kate also but for some reason didn't like it.\n \nreply",
      "Have you tried setting up a build command in Sublime Text to run gdb? I find it a bit easier for cli stuff that depending on a plugin. The json config is rather simple.\n \nreply"
    ],
    "link": "https://bold-edit.com",
    "first_paragraph": "",
    "summary": "Welcome to the latest distraction for developers, the **Bold Edit**\u2014a text editor that purports to reinvent the wheel with a secret recipe likely sourced directly from wishful thinking and unicorn tears. In a realm where Emacs reigns as the stubborn immortal, Bold Edit plays the sprightly upstart promising everything and running nowhere fast (at least not on your operating system of choice). Armchair coders revel in prophesizing its quick demise against the eternal Emacs, while others crow about <i>\"unique debugging\"</i> that seems as elusive as a straightforward Terms of Service. Can't wait for the five-year reunion when we find this quirky editor in the forgotten GitHub repositories graveyard. \ud83c\udf89\ud83d\udcbb\ud83d\udc7b"
  },
  {
    "title": "How the OCaml type checker works (2022) (okmij.org)",
    "points": 154,
    "submitter": "mooreds",
    "submit_time": "2024-08-18T10:52:38",
    "num_comments": 32,
    "comments_url": "https://news.ycombinator.com/item?id=41281555",
    "comments": [
      "Before opening the article, my first thought was \"wdym, it's HM and Algorithm W\"The very first sentence was:\n> There is more to Hindley-Milner type inference than the Algorithm W.I guess congratulations to the author for knowing the audience well enough\n \nreply",
      "That remark is actually more interesting than you think. As groundbreaking as it was, algorithm W iss far too slow for non-toy languages. All modern HM languages (that I know of) use some form of union-find trickeries, as pioneered by the one presented in the blog post (but also present in resolution-by-constraints approaches employed by Haskell and Scala).So, in fact, it's actually never algorithm W in non-toy languages. ;)Side note: this article is originally from 2013 and is considered a must-read by any would-be hackers trying to modify the OCaml typechecker (it's cited in the documentation).\n \nreply",
      "In fact, those union-find trickeries come from the same paper that presented algorithm W, where they were named algorithm J. W was known from the start to be more useful for proofs than implementation:> As it stands, W is hardly an efficient algorithm; substitutions are applied too often. It was formulated to aid the proof of soundness. We now present a simpler algorithm J which simulates W in a precise sense.https://doi.org/10.1016/0022-0000(78)90014-4\n \nreply",
      "The Wikipedia articles claims that W is efficient, but only for a core language without highly desirable features like recursion, polymorphism, and subtyping.https://en.m.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_...\n \nreply",
      "The subtitle, \"or what polymorphism and garbage collection have in common\", is another hint there may be more to TFA than its HN submission title indicates.\n \nreply",
      "> OCaml generalization is based on tracking of so-called levels of a type.The level tracking reminds me of a recent paper exploring SimpleSub[0], a simpler alternative of adding subtyping to ML-style type systems. It also gets rid of the algorithm W's repeated generalization (introducing foralls and turning a type into a polytype) and instantiation (changing the universally quantified type variables to fresh type variables). They have slightly different operations on levels, e.g. extrude. I wonder if this level tracking is independently invented again.[0]: https://dl.acm.org/doi/pdf/10.1145/3409006\n \nreply",
      "Not independently invented again. Lionel is fully aware of the level tracking in the OCaml type-checker; in fact the OP is cited in the Simple-sub paper (section 3.5.1, page 15).\n \nreply",
      "Say whatever you want, but this is how websites should be designed.\n \nreply",
      "OT: how come there are so many OCaml posts recently? Genuinely curious!\n \nreply",
      "Some popular streamers have dabbled in OCaml this year, sometimes calling it \"the Go of functional programming\", which probably set off a small wave of people tinkering with the language. OCaml has also gotten gradually better in recent years in terms of tooling, documentation, standard library, etc.\n \nreply"
    ],
    "link": "https://okmij.org/ftp/ML/generalization.html",
    "first_paragraph": "Alas, both the algorithm and its implementation in the OCaml type\nchecker are little known and little documented. This page is to\nexplain and popularize R\u00e9my's algorithm, and to decipher \na part of the OCaml type checker. The page\nalso aims to preserve the history of R\u00e9my's algorithm.\nThe attraction of the algorithm is its insight into type\ngeneralization as dependency tracking -- the same sort of tracking\nused in automated memory management such as regions and generational\ngarbage collection. Generalization can be viewed as finding dominators\nin the type-annotated abstract syntax tree with edges for shared\ntypes.  Fluet and Morrisett's type system for regions \nuse the generalization of a type variable as a\ncriterion of region containment. Uncannily, R\u00e9my's algorithm views the\nregion containment as a test if a type variable is generalizable.\nThe attraction of the algorithm is its insight into type\ngeneralization as dependency tracking -- the same sort of tracking\nused in automated memo",
    "summary": "Welcome to another day of type-checker esoterica on Hacker News, where the mention of OCaml, R\u00e9my's Algorithm, and various other arcane sorceries coalesce to woo the unsuspecting newbie and scare off the sane. Brushing aside the notion that \"it's just HM and Algorithm W,\" our daring blogger takes a deep dive into dependency tracking, region containment, and probably a dozen other things that 99.9% of programmers will never need to know. Commenters quickly engage in an arms race of obscure knowledge, trying to out-pedant each other with insights about union-find trickeries and the inefficiencies of Algorithm W\u2014it's like the Olympics, but for people who love compiler internals instead of sports. <em>Finally, rejoice</em>, as someone nearby attempts to validate their Saturday afternoon reading choice by declaring this article a \"must-read\" for changes to the OCaml typechecker, as though it were the hot new Netflix series everyone's guilt-binging. \ud83c\udf7f\ud83e\udd13"
  },
  {
    "title": "Ashby (YC W19) Is Hiring Engineers Who Can Design (ashbyhq.com)",
    "points": 0,
    "submitter": "",
    "submit_time": "2024-08-18T17:01:09",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.ashbyhq.com/careers?utm_source=hn&ashby_jid=145ff46b-1441-4773-bcd3-c8c90baa598a",
    "first_paragraph": "\u00a9 2024 Ashby, Inc.",
    "summary": "At Ashby, a company somehow still in existence since Y Combinator's Winter '19 batch, there is desperately hope-laden news: they are hiring! The startup, a bastion of originality in an industry that definitely needs more job boards masquerading as tech revolutions, seeks engineers who can \"design\". This can only mean they've made the groundbreaking discovery that their product actually requires building. In the comments, assorted tech bros oscillate between salivating over stock options and mistaking complexity for innovation, while debating whether a ping-pong table qualifies as a \"design challenge\". \ud83c\udfd3\ud83d\udcbc"
  },
  {
    "title": "`noexcept` affects libstdc++'s `unordered_set` (quuxplusone.github.io)",
    "points": 74,
    "submitter": "signa11",
    "submit_time": "2024-08-18T15:40:39",
    "num_comments": 55,
    "comments_url": "https://news.ycombinator.com/item?id=41283018",
    "comments": [
      "xxx"
    ],
    "link": "https://quuxplusone.github.io/blog/2024/08/16/libstdcxx-noexcept-hash/",
    "first_paragraph": "Arthur O\u2019DwyerStuff mostly about C++\nStuff mostly about C++noexcept affects libstdc++\u2019s unordered_setThe other day I learned a new place where adding or removing noexcept can\nchange the performance of your program: GNU libstdc++\u2019s\nhash-based associative containers change the struct layout of their nodes\ndepending on the noexceptness of your hash function.\nThis is laid out fairly clearly\nin the docs;\nit\u2019s simply bizarre enough that I\u2019d never thought to look for such a thing in the docs!In C++, a std::unordered_set is basically a vector of \u201cbuckets,\u201d where each bucket is\na linked list of \u201cnodes,\u201d and each node stores a single element of the unordered_set.\n(This makes unordered_set a \u201cnode-based container\u201d; it supports the full\nC++17 node-handle API.)\nErasing an element from the unordered_set goes something like this:(Some details omitted, e.g. the Allocator parameter and the return type of erase.)Above, the for-loop is iterating over everything in the bucket \u2014 that is, every item\nt such ",
    "summary": "**Hacker News Discovers C++ Again**\n\nIn today's \"old news as new insights\" feature, Arthur O'Dwyer has dazzlingly uncovered that the `noexcept` keyword does, in fact, affect performance in GNU's C++ standard library collections. Shockingly, this <em>revelation</em> is actually documented, albeit hidden in plain sight where practically no programmer has ever thought to tread: the **documentation**. In an exciting twist, the comment section quickly fills with armchair experts who apparently missed their calling as language architects, decrying or defending the noexcept semantics with the intensity usually reserved for debating tabs vs spaces. Can't wait for next week's episode where we discover that compilers do, indeed, compile code. \ud83c\udf89"
  }
]