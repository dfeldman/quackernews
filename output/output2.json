[
  {
    "title": "Slack AI Training with Customer Data (slack.com)",
    "points": 189,
    "submitter": "mlhpdx",
    "submit_time": "2024-05-16T22:16:01",
    "num_comments": 80,
    "comments_url": "https://news.ycombinator.com/item?id=40383978",
    "comments": [
      "> For any model that will be used broadly across all of our customers, we do not build or train these models in such a way that they could learn, memorise, or be able to reproduce some part of Customer DataThis feels so full of subtle qualifiers and weasel words that it generates far more distrust than trust.It only refers to models used \"broadly across all\" customers - so if it's (a) not used \"broadly\" or (b) only used for some subset of customers, the whole statement doesn't apply. Which actually sounds really bad because the logical implication is that data CAN leak outside those circumstances.They need to reword this. Whoever wrote it is a liability.",
      "> They need to reword this. Whoever wrote it is a liabilitySounds like it\u2019s been written specifically to avoid liability.",
      "- Create a Slack account for your 95-year-old grandpa- Exclude that one account from using the models, he's never going to use Slack anyway- Now you can learn, memorise, or reproduce all the Customer Data you like",
      "The incentive for first party tool providers to do this is going to be huge, whether its Slack, Google, Microsoft, or really any other SaaS tool. Ultimately, if business want to avoid getting commoditized by their vendors, they need be in control of their data, and their AI strategy. And that probably ultimately means turning off all of these small-utility-very-expensive-and-might-ruin-your-business features, and actually creating a centralized, access controlled, well governed knowledge base which you can plug any open source or black box LLM, from any provider.",
      "In summary, you must opt-out if you want to exclude your data from global models.Incredibly confusing language since they also vaguely state that \"data will not leak across workspaces\".Use tools that cannot leak data not \"will not\".",
      "what is the difference between \"will not\" and \"cannot\" in legalese?",
      "Story time.I was at a VC conference last year and if I learned nothing else there, I learned how to spell \"AI\".  Every single exhibitor just about had their signage proudly proclaiming their capabilities in this area, but one in particular struck me.They were touting the API integrations they could offer to train their \"Enterprise AI\"/LLM, and among those integrations were things like M365, Slack, etc.It struck me because of the garbage in, garbage out problem.  I'd like to think that the amount of shitposting I do on Slack personally will poison that particular well of training data, but this seems to point to a larger problem to me.LLM's don't have a concept of truth or reality, or awareness of any sort.  If the training data they are fed is poorly quality checked/unsanitized by human intelligence, the outputs will be as useless/noisy as the original data set.  It feels to me that in the frothy rush to capture market buzz and VC, this is being forgotten.Am I missing something, here?",
      "The sheer scale of data on the long tail. Sure, the head is already a trash pile and has been for decades now, but there is plenty of non-monetized information all over the internet that is barely linked to or otherwise discoverable.",
      "Yes, consider an existing LLM being given \u201cshitpost-y\u201d messages and asking it if there is anything interesting in there. It could probably summarize it well and that could then be used for training another LLM.etc etc",
      "This assumes everything in the training data set is accurate.  Sometimes people are wrong, obtuse, sarcastic, etc.  LLM's don't have any way of detecting or accounting for this, do they?That output, then being used to train other LLM's, just creates an ouroboros of AI generated dogshit."
    ],
    "link": "https://slack.com/trust/data-management/privacy-principles?nojsmode=1",
    "first_paragraph": "Our mission is to build a product that makes work life simpler, more pleasant and more productive. Our guiding principle as we build this product is that the privacy and security of Customer Data is sacrosanct, as detailed in our Privacy Policy, Security Documentation and SPARC and the Slack Terms.",
    "summary": "Ah, Slack, the beacon of workplace \u201csimplicity\u201d and \u201cproductivity,\u201d now introduces a subtly convoluted tale of AI training with your precious customer data, wrapped tightly in the vaguest of legal-speak guaranteeing the sanctity of your personal chats\u2014unless it's inconvenient. Cue the theatre of comments where tech pundits dissect terms with the surgical precision of a drunk toddler, unveiling a Pandora's box of loopholes wide enough to drive your deleted messages through. Be amazed as they argue semantics, from what it means for data to be secure \"broadly\" versus in mysterious, exclusive subsets they couldn't possibly comment on. For extra fun, check your privacy at the door and let's pretend the promise of \"not leaking data\" is as ironclad as a chocolate teapot. \ud83c\udfad\ud83d\udd0d\ud83d\udeaa"
  },
  {
    "title": "The Forged Apple Employee Badge (cabel.com)",
    "points": 94,
    "submitter": "ecliptik",
    "submit_time": "2024-05-16T22:19:06",
    "num_comments": 14,
    "comments_url": "https://news.ycombinator.com/item?id=40384013",
    "comments": [
      "I'm not going to speculate the truth of allegations of fraud here, but two side points:* A few times skimming this, I didn't understand some of the assertions and logic.  For example, I couldn't say just by glancing at the photos that the card wasn't filled out on an IBM Selectric II (introduced in 1971, before Apple was founded).  For another example, I see people commenting on VAT tax missing on the receipt from the German Red Cross, and also the confusion over whether it was bought on eBay or from the German Red Cross, but no mention of whether that invoice might be something that the German Red Cross adapted to work with early eBay doing the payments (at least in the US, sales tax for online purchases was very murky, and eBay punted).  Also, the author seems to be ignoring cross-cultural differences, in their psychoanalytic speculation about subtleties of seller's behavior, such as their earnestness in composing a photo.* This article is going out of its way to publicly defame someone.  If they have strong evidence of the counterfeiting and fraud that they allege, they should be going to a legal authority.  Given that they decided to get Internet Points out of it, they'd better hope that their allegations are correct, and also that they can prove it sufficiently if sued in some jurisdiction.  I would guess that glomming onto mob behavior (\"We did it, Reddit!\") won't be a good defense.",
      "Cabel, the post\u2019s author, tells a similar story about someone trying to jump the line for a Playdate console preorder during this GDC talk.http://gdcvault.com/play/1034707/The-Playdate-Story-What-Was?",
      "The detective work was fun I'm sure but ultimately unnecessary. The burden of proof lies on the seller. Stuff like this is fake by default unless it comes with a certificate of authenticity issued by some trusted party. There's a reason that entire industry exists. Believe me there are much, much better fakes than this one sold online for pretty much every collectable in existence.",
      "Cmon, he had an invoice and everything!",
      "Why people will pay much to buy those kinds of thing that can't identify?",
      "They implicitly trust the facilitator of the transaction. It's a variation on the \"greater fool\" scam. They think it's the old days where the auction house had any skin in the game, they're not wise to the old (in this case almost 30 year old) silicon valley grift: we profit off a scam, but [ its such small amounts/backed by enormous VC capital/\"safe\" (for the scammer) harbor/ done across state lines/authorized by predatory ToS (with arbitration clause) ] that the victim is powerless. Thanks for playing, better luck next time :D",
      "Here's the thing, I don't think the purchaser of that listing was worried it was fake.Though it's weird that Chris's typewriter part looks more fake than the faked card (it's supposed to be an IBM printer rather than a typewriter it seems)",
      "This post will ensure a better fake is up on eBay tomorrow.",
      "Interesting but I wasn't entirely convinced that it's fake. There might be more to this story. Maybe the seller is the one who got scammed when they bought it 20 years ago.",
      "Maybe they did. Do you suppose they got scammed on eBay - which they \"perfectly\" remember buying it from - or from the Red Cross, which they have an invoice for?"
    ],
    "link": "https://cabel.com/2024/05/16/the-forged-apple-employee-badge/",
    "first_paragraph": "A Blog by Cabel Sasser",
    "summary": "In a valiant bout of blogistic ineptitude, Cabel Sasser lunges straight into the heart of what could have been not much of an issue: the riveting controversy of a **potentially fake** Apple employee badge. The Internet amateur sleuths rush in to crack the case wide open with a deep analysis of typewriters, tax evasion, and the subtleties of cross-cultural scam artistry. Commenters juggle their keyboards with delight, firing off shots about eBay scams, VAT inconsistencies, and the philosophical musings on the ancient nature of fraud, boldly ignoring any coherence. Truly, the digital landscape is **bereft** without such hard-hitting expos\u00e9s and the consequential storm of uninformed opinions. Maybe tomorrow\u2019s fake will be better! \ud83d\ude02\ud83d\ude02"
  },
  {
    "title": "Improvements to Data Analysis in ChatGPT (openai.com)",
    "points": 132,
    "submitter": "tosh",
    "submit_time": "2024-05-16T22:06:28",
    "num_comments": 100,
    "comments_url": "https://news.ycombinator.com/item?id=40383886",
    "comments": [
      "I like the concept, but I'm not sure I like the implementation.The demo they show has an excel sheet source being transformed into another sheet by grouping by a specific column. I don't like how it does a transformation step, sends a new transformed file and then switches the display to this new file. I worry that this loses the history of what exactly has happened to the file, so you're letting a black box run an unknown transformation and trusting the result to be correct.A better implementation would require a custom UI for this, similar to existing data wrangling tools where every action is logged so that it's clear what has happened to the file and the steps can be checked transparently and rolled back if needed. As it exists now I would find it hard to trust it",
      "The way ChatGPT Data Analysis works is that ChatGPT generates python code that does the transformation step. Because python code is static and deterministic, you can always re-run the code to get the exact output over and over again. If you want it rolled back, just re-run the code, but run fewer lines of it.In fact, this is probably more accurate than custom UIs that log actions you take, since to build that UI, engineers need to make sure each action is logged (and it's easy to forget to log one!).",
      "Going to turn out like every other no code / low code tools, works great for a demo of something you'd never do, customizing to a real application is just as much work as coding it",
      "To collaborate with LLMs with text editors and spreadsheets, yeah I do think we will need deterministic declarative primitives that both users and LLMs can use. Getting those primitives right would also get us generalized autocomplete for apps.",
      "V0 by Vercel does essentially this using the RadixUI components as the declarative primitives to generate components",
      "For a generative and collaborative web app, you would have to hook up those declarative components to function calls which are also declaratively written and perhaps use OT/CRDTs to mutate state.",
      "File lineage doesn\u2019t seem like a complex feature addition here.",
      "Yes and no, apart from the UI for it it really depends on how they've implemented the transformations. For example, if it's writing and running python behind the scenes which I suspect is what is happening here as that's what the old ChatGPT data analysis did that would not work very well without having to read the code which defeats the point of it being no-code...You'd want deterministic steps, like it would need to have a limited list of functions to choose from that do specific things eg \"group_by()\" \"filter()\" etc so that the code it runs is always the same for it.",
      "Might make sense for them to anchor to ibis for the code part (since it compiles down to SQL or Pandas) - and, being inspired by tidyverse, could easily translate to R",
      "It starts to feel like a trend where OpenAI is integrating features that were previously implemented by GPT-wrapper startups into ChatGPT. While these startups have added value by enhancing user experience, the trajectory is leading towards an ecosystem where these functionalities seamlessly integrate. The future will be challenging for those startups."
    ],
    "link": "https://openai.com/index/improvements-to-data-analysis-in-chatgpt/",
    "first_paragraph": "",
    "summary": "OpenAI decides to jazz up ChatGPT with a sprinkle of <em>Data Analysis</em>, presumably to make your spreadsheets slightly less dull\u2014because everyone knows AI and Excel are a match made in heaven. Cue the audience: one part cautiously intrigued, two parts buzzing with undiluted techno-angst. Commenters perform a passionate keyboard dance, debating the ghost in the machine\u2014trust issues galore because, let\u2019s face it, watching Python scripts do the Cha-Cha with your data isn\u2019t exactly peak transparency. Meanwhile, the digerati prophesy the end of boutique GPT startups, crushed under the heal of OpenAI's relentless \u2018innovation\u2019. Will our Excel sheets survive the AI apocalypse? Stay tuned. \ud83d\udcca\ud83d\udc83\ud83e\udd16"
  },
  {
    "title": "The Perl and Raku Conference 2024 is looking for sponsors (perl.com)",
    "points": 10,
    "submitter": "oalders",
    "submit_time": "2024-05-17T00:09:27",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=40384911",
    "comments": [
      "It's neat to know perl is still going.. I don't have any intention of using it again. But still cool",
      "Perhaps a mirror company can help sponsor them, as the wall writing company seemed ineffective.Or maybe what's needed is an optometrist.",
      "They certainly had the company of Larry Wall in the past ..."
    ],
    "link": "https://www.perl.com/article/this-is-your-opportunity-to-sponsor-the-perl-and-raku-conference-2024/",
    "first_paragraph": "May 16, 2024 by\n              \n              \n                \n                \n                Olaf Alders",
    "summary": "In an exhilarating display of nostalgia, the Perl and Raku Conference 2024 bravely ignores the relentless march of technology by still existing and begging, yet again, for sponsors. Our beloved commenter recommends a mirror company, humorously implying attendees might finally see the writing on the wall \u2014 or lack thereof. Meanwhile, another insightful soul suggests an optometrist sponsor to help current enthusiasts see what they\u2019ve been missing all these years (spoiler: it\u2019s just about every development in modern coding). Attendees can look forward to reliving the 90s, together in blissful denial, as Larry Wall\u2019s ghost looms judgmentally over the event. \ud83d\udcbe\ud83d\udc53\ud83d\udd2e"
  },
  {
    "title": "Llama 3 implemented in pure NumPy (likejazz.com)",
    "points": 341,
    "submitter": "orixilus",
    "submit_time": "2024-05-16T13:53:22",
    "num_comments": 41,
    "comments_url": "https://news.ycombinator.com/item?id=40378499",
    "comments": [
      "It's also worth mentioning that the original implementation by Meta is only 300 lines of very readable code [1].[1]: https://github.com/meta-llama/llama3/blob/main/llama/model.p...",
      "Why is max_seq_len set to 2048 [1] when the model card says the context size is 8k [2]?[1] https://github.com/meta-llama/llama3/blob/14aab0428d3ec3a959...[2] https://github.com/meta-llama/llama3/blob/14aab0428d3ec3a959...",
      "From the readme [0]:> All models support sequence length up to 8192 tokens, but we pre-allocate the cache according to max_seq_len and max_batch_size values. So set those according to your hardware.[0] https://github.com/meta-llama/llama3/tree/14aab0428d3ec3a959...",
      "On line 59, there is a less-than-or-equals comparison between 0 and 1. Curious\nhttps://github.com/meta-llama/llama3/blob/main/llama/model.p...",
      "I am a reasonably competent python coder, yet when I see stuff like this I regard it with the same suspicion as a switch in the \"more magic\" position.https://www.catb.org/jargon/html/magic-story.html",
      "What's the operator precedence in python?Is it `assert(0 <= (1 < ndim))` or `assert((0 <= 1) < ndim)`, or something even stranger like `assert(0 <= 1) < ndim`?",
      "Python actually does something pretty neat: it chains comparisons so that `x < y <= z` is like `x < y and y <= z` except y is only evaluated onceIn linked code we can be confident that `0 <= 1`, so only `1 < ndim` should matter. In fact I'd expect peephole optimization to remove most of the code for `0 <= 1`",
      "Do you know why these are so short? What is the algorithm/magic in all of these?I tried to make sense of it but cannot",
      "Architecturally, LLMs are very simple compared to many software projects.The crux of their behavior comes from their learned weights which are gigabytes and can cost millions to obtain via training.",
      "The magic is in the billions of learned weights (~synapses). This is just the scaffolding that runs them."
    ],
    "link": "https://docs.likejazz.com/llama3.np/",
    "first_paragraph": "\u300e\uc790\ubc14 \uc54c\uace0\ub9ac\uc998 \uc778\ud130\ubdf0 with \ucf54\ud2c0\ub9b0\u300f \uc548\ub0b4",
    "summary": "Today in the digital playground of innocuous overachievements, someone decided to reimplement the <i>Llama 3</i> language model in <em>pure NumPy</em>, because why harness optimized, industry-standard tools when you can pedal your bike backwards uphill in the snow? Peer commenters dive into the essential minutiae, like disputing sequence lengths and marveling over Python\u2019s comparison operators as if discovering fire. Same folks probably scratch their heads over why their \"more magic\" light-switch doesn\u2019t accelerate code compilation. In essence, we\u2019ve assembled the brightest to ponder over the syntactic sugar coating of what\u2019s essentially a language model that, just like us, doesn\u2019t get out much. \ud83e\udd99\ud83d\udcbb"
  },
  {
    "title": "Egypt's pyramids may have been built on a long-lost branch of the Nile (nature.com)",
    "points": 215,
    "submitter": "gumby",
    "submit_time": "2024-05-16T15:20:45",
    "num_comments": 276,
    "comments_url": "https://news.ycombinator.com/item?id=40379488",
    "comments": [
      "It makes a lot of sense because obviously having a river there makes the transport of materials a lot easier, but i do wonder how nobody noticed this before.",
      "I am an Egyptian, I read about this years ago. But maybe they didn't have a solid proof back then.",
      "Thank you. I too remember reading about this years ago. I even checked the date of the paper to see if it was from years ago.",
      "Well the pyramids in question are right next to a flood plain so I don't think this idea is out of the blue entirely.",
      "IIRC it's been well-known for a while how they moved the vast majority of materials by land (similar to how the Stonehenge megaliths were moved, highly dissimilar to how the Rapa Nui moai were).",
      "How? Last I heard, it seemed either \"rolling logs\" or \"powerful aliens\" were equally plausible...",
      "It was the logs, friend. Though the maoi moves beat both.https://www.youtube.com/watch?v=yvvES47OdmY",
      "> \u201cThe pyramids seem like pretty monumental work\u201dYou don't say...",
      "\u201cCutting-edge psychological research suggests that pharaohs may have suffered from megalomania\u201d",
      "Megalomania is characterized by delusion."
    ],
    "link": "https://www.nature.com/articles/d41586-024-01449-y",
    "first_paragraph": "Thank you for visiting nature.com. You are using a browser version with limited support for CSS. To obtain\n            the best experience, we recommend you use a more up to date browser (or turn off compatibility mode in\n            Internet Explorer). In the meantime, to ensure continued support, we are displaying the site without styles\n            and JavaScript.",
    "summary": "The latest groundbreaking discovery at nature.com suggests that Egypt\u2019s pyramids were conveniently built next to a Nile offshoot, stunning everyone who thought they were built in a desert because, obviously, photos and prior archeological studies reveal nothing. Commenters chime in with Sherlock-level deductions, marveling how a river could indeed aid in moving heavy stones\u2014a theory so novel it clearly has never been contemplated before this revelation. One deeply insightful user, recalling their vast expertise from a kindergarten history book, outs themselves as truly ahead of their time for having \"known this years ago.\" Yet another does a quick sanity check, verifying indeed that time travel hasn't been involved and it\u2019s still 2023. The internet, as always, remains undefeated in its capacity to boldly congratulate itself for stating the obvious. \ud83c\udffa\ud83e\udd26\u200d\u2642\ufe0f"
  },
  {
    "title": "The Tragic Downfall of the Internet's Art Gallery (slate.com)",
    "points": 83,
    "submitter": "jfryusef",
    "submit_time": "2024-05-16T17:12:22",
    "num_comments": 39,
    "comments_url": "https://news.ycombinator.com/item?id=40380744",
    "comments": [
      "So much of the DeviantArt story reads like Tumblr. Two platforms appealing to amateur and small artists grow to great relevance among a patchwork of subcultures. Then, they start trying to turn a profit and end up alienating the entire userbase that carried them to that point. DeviantArt is much further down that road than Tumblr is, though. It's sad to see. Both platforms were key to the WWW of my childhood.I wish the artists well in their AI copyright legal pursuits.",
      "Part of Tumblr's downfall also comes from their change of stance on NSFW contents.",
      "Quite an understatement.",
      "I think it's just not possible for a centralized social media service to avoid enshittification long-term, at least not if it has to make money directly. It remains to be seen whether decentralized options can provide a long-term alternative at scale.",
      "I don't think decentralisation is the solution because the problem is as much the lack of central authority as the presence of it. Enshittification happens fastest on platforms that are run by committees, who know they need revenue so take the path of least resistance, without a single clear owner who can resist it. Look at Google's decline since its founders left, compare to Facebook which - say what you like about it - is much the same user experience that it always was. (Hell, look at MySpace for an even more dramatic turndown than Google)Social media sites that are still founder-owned or have strong individual leaders can continue fine (consider e.g. Dreamwidth). Though I guess whether you can sustain that past one person's lifetime is another question.",
      "This comment discusses only centralized services. Decentralized services run on protocols such that no one service provider or software project can dictate the experience for all users.ActivityPub, used by Mastodon, Misskey, Lemmy, and Pixelfed among others is an example of such a protocol. BlueSky's ATProto is another, though it's in an earlier stage without mature third-party implementations and service providers. Email, too is decentralized, though it may serve as a cautionary tale; spam, attempts to block spam, and feature stagnation have all degraded the user experience considerably.",
      "Compare to Craigslist, or for a period of five or ten years after its inception, Google Search.",
      "Just a regular story of capitalism and platform enshittification.Whenever a platform is owned by shareholders who then need to extract rents from the ecosystem, this will happen. Whether it\u2019s couchsurfing or twitter.Expect it to happen to Reddit etc.There is a direct line from the profit motive to platforms becoming enshittified, promoting the most outrageous content and making people emotional and angry.The AI is just another level of appropriating human work. Whether it\u2019s google\u2019s disruption of publishers through AI-generated answers, or OpenAI training on artists\u2019 work.",
      "Is \"profit motive\" that different than \"survival motive\"?These platforms need money to survive. Automattic, the latest owner of Tumblr wrote a great post on all the things they've tried and how Tumblr is still losing $20MM a year IIRC.",
      "Even if they make money, the next quarter must always be better than the previous one.At a certain point, people seem to start looking at self destructive options to make that happen."
    ],
    "link": "https://slate.com/technology/2024/05/deviantart-what-happened-ai-decline-lawsuit-stability.html",
    "first_paragraph": "On March 27, a large group of artists and creators from across the web noticed the frightening extent to which a once-beloved, highly influential community platform of theirs had, like so many others, fallen prey to the artificial intelligence juggernauts plundering the internet.",
    "summary": "**The Internet's Art Gallery Hammered by Progress**\n\nIn what is now a routine saga of digital degradation, DeviantArt takes its turn to become the next dumpster fire in the series, courtesy of those soul-hungry AI juggernauts. Old-guard web users emit their *collective groans* across forums, recalling the \"good ol' days\" of hand-drawn fanfic and less corporate puppeteering. Comment sections erupt in nostalgia and misplaced hopes for decentralized saviors to protect their pixel-art sanctuaries. Wishful thinking meets the harsh light of capitalist reality- brace for an inexorable march towards *enshittification*. \ud83c\udfa8\ud83d\udc94\ud83d\udcb8"
  },
  {
    "title": "Exit Strategy: The Case for Single-Stair Egress (architecturalrecord.com)",
    "points": 56,
    "submitter": "ayanai",
    "submit_time": "2024-05-16T19:29:18",
    "num_comments": 27,
    "comments_url": "https://news.ycombinator.com/item?id=40382163",
    "comments": [
      "It's a thought-provoking article. I have mixed feelings about the idea: on one hand, visiting a friend's Weimar-era home in the DDR side of Berlin really impressed me. It was slightly different from those depicted in the article (it was part of a longer row of connected buildings), but the green space afforded by the courtyard was wonderful and the opportunities for community building palpable.Yet, on the other hand, the safety doctrine unnerves me:> American approaches aim to make combustible light wood-frame buildings easier to escape by providing multiple paths of egress; European codes, by contrast, require fire-resistant materials and compartmentation to prevent fires from spreading in the first place.Why can't we have both multiple staircases and fire-retardant construction? The Grenfell Tower disaster was horrific, and although the subsequent building regulations that limit height were clearly reactionary in nature, I can't see people being comfortable with the 'stay in your room' safety advice after this kind of event. People are going to follow their instincts and head for the stairs, and things are not going to be pleasant if there's A: only one and B: it's blocked.One idea that comes to mind is building entirely fire-resistant steel and glass bridges between medium high-rise buildings. If you're too high up to use the emergency out-door stairs, but the (single) interior staircase is blocked, you could move sideways to your neighbours. Security and privacy concerns about having easy access to neighbouring properties could be mitigated by having safety-glass dividing doors with emergency hammers next to the lock. The lock could itself be opened by mutual agreement of both sides in non-emergencies.",
      "> Why can't we have both multiple staircases and fire-retardant construction?If your goal is to save lives, there are other things you can regulate that are orders of magnitude more cost-effective. Where the expected price of each saved life is just millions instead of billions.When there was another discussion on this topic a while ago, I spent some time reading about fire deaths in Finland. Finland is a country with more fire deaths per capita than most Western countries. Partly due to attitudes, and partly because of the prevalence of saunas, which are almost as big fire hazards as kitchens.What I found was that fire deaths that could have been prevented by a second staircase are extremely rare. When people die in a fire in an apartment building, it's almost always in the unit the fire started. Either the people didn't notice it quickly enough, or the fire blocked the front door.",
      "> Why can't we have both multiple staircases and fire-retardant construction?Because that1) that costs more money (if you object, \"How dare we value money more than human lives?\", replace \"costs money\" with \"requires a greater amount of the limited quantity of human labor\"), which means fewer homes are built, which means it costs more to purchase/rent a home.2) Means buildings have to deal with the inherent topological constraints of double-loaded corridors (ie, apartments can't \"cross-cut\" the building, allowing cross-ventilation/greater number of windows.",
      "I live in a former yugoslav socialist building, and our external walls are made from reinforced concrete. Our internal walls are reinforced concrete. Our bathroom walls are reinforced concrete. Drilling a hole to pull a network cable from one room to another is a pain.On the other hand... this are the results of a rather large gas explosion: https://novice.svet24.si/clanek/novice/crna-kronika/5be30a53... and another one: https://www.24ur.com/novice/crna-kronika/v-stanovanju-eksplo...Fires usually stay contained to one unit for quite a lot of time, especially if the firefighters water everything from both sides (windows and doors).",
      "I caught a YouTube about this recently that I really enjoyed. \"Why North America Can't Build Nice Apartments (Because of One Rule)\" https://www.youtube.com/watch?v=iRdwXQb7CfM",
      "My 30+ story building has two concrete stairwells wrapped around each other, which seems like a super efficient way to achieve the current legislation",
      "They are called scissor stairs and it's very common here in newer buildings in NYC as well. Though I believe it's only permitted in buildings 12 stories are less? It always seemed very space efficient -- separated by concrete fireproof walls and taking up the same vertical space.",
      "Sounds like a death trap.",
      "I suspect the 6 story and shorter buildings will end up having an alternative design where the stairwell and possibly certain walls are concrete, poured around the same time as the foundation, but the remaining structure is engineered timber.The challenge is going to be convincing fire departments and insurance agencies that theyre safe enough to not prevent.",
      "Ascent building in Milwaukee, Wisconsin is doing a lot to challenge the attitudes against Timber: https://www.dezeen.com/2022/08/03/ascent-tower-milwaukee-wor...There's a fantastic article about the challenges here: https://www.enr.com/articles/50905-milwaukees-25-story-ascen...tl;dr: Insurance companies might be hesitant but it's often a matter of getting the right signoffs. Change may well be on the horizon, however."
    ],
    "link": "https://www.architecturalrecord.com/articles/16880-exit-strategy-the-case-for-single-stair-egress",
    "first_paragraph": "",
    "summary": "**Hurdling Over Common Sense: The Case for Single-Stair Egress**\n\nIn a dazzling display of architectural hubris, <em>architecturalrecord.com</em> presents **\"Exit Strategy: The Case for Single-Stair Egress\"**, a thrilling saga where the thrill comes solely from the potentially lethal game of Russian Roulette each tenant plays during a fire. Commenters, infused with the wisdom of armchair fire marshals, engage in a Olympic-level mental gymnastics to somehow justify merging cost-cutting with life-saving. One proposes fire-resistant steel bridges for when that single, solitary staircase inevitably turns into a death funnel. Another injects some classic internet expertise by comparing Finnish fire statistics with sauna habits, because apparently this is crucial for staircase policies now. \ud83e\udd2f\ud83d\udd25\ud83d\ude92"
  },
  {
    "title": "Google Gemini: Context Caching (ai.google.dev)",
    "points": 157,
    "submitter": "tosh",
    "submit_time": "2024-05-15T07:56:22",
    "num_comments": 37,
    "comments_url": "https://news.ycombinator.com/item?id=40364220",
    "comments": [
      "We envisioned a system like this over a year ago, but since we lacked technical capabilities in this area, we couldn't solve it. To me, it is clear that a lot of information is being transmitted needlessly. There is no need to send an entire book every single time an interaction occurs. Instead, you can start from a checkpoint, remap from memory, and continue from there. Perhaps none of the current LLM service providers have an architecture that allows this, but it seems like something that should be possible and is likely to emerge in the near future.",
      "The size of the cached internal state of the network processing the book is much larger than the size of the book. The resource that is preserved with caching is the compute required to recreate that state.",
      ">The size of the cached internal state of the network processing the book is much larger than the size of the bookIt's funny that sometimes people consider LLMs as compression engines. While a lot of information gets lost in each direction (through the neural net)",
      "Why is that funny?  Sometimes compression is lossy, like JPEG and H.265",
      "And the internal state of a JPEG decoder can be an order of magnitude larger than the JPEG file (especially progressive JPEG that can't stream its output).",
      "I don't lose anything with gzip or rar.",
      "And just as fast? The issue here is how do you do these things both accurately and while maintaining reasonable speeds.",
      "You can make any lossy compression scheme into a lossless scheme by appending the diff between the original and the compressed. In many cases, this still results in a size savings over the original.You can think of this as a more detailed form of \"I before E, except after C, except for species and science and...\" Or, if you prefer, as continued terms of a Taylor-series expansion. The more terms you add, the more closely you approximate the original.",
      "Sure, but a direct forwards pass of the book would surely require more compute than simply loading and setting the hidden state?The second doesn't require any matrix operations, it's just setting some values.",
      "> it's just setting some valuesBut it may very well be slower than just recompute it. At least for ordinary MHA and even GQA.So, either a model arch woodoo significantly reducing kv cache size (while keeping roughly the same compute cost), or some really careful implementation moving kv cache of upcoming requests to devices in background [0].[0] My back of envelop calc shows that even then it still does not make sense for, say, Llama 3 70B on H100s. Time to stare at TPU spec harder trying to make sense of it I guess."
    ],
    "link": "https://ai.google.dev/gemini-api/docs/caching",
    "first_paragraph": "",
    "summary": "**Google Gemini: An Exercise in Rebranding Old Wine in New Bottles**\n\nGoogle once again breaks new ground by announcing they've figured out <i>\"context caching\"</i> - a mystical tech spell to essentially save your spot in a digital textbook, which armchair engineers on the forums convincingly argue was definitely their idea first. Commenters, deep in a techno-babble duel, pit lossy JPEGs against progressive memory theories, all while missing the true compression artifact right in front of their eyes: their own understanding of the subject. Surely, by iterating on someone else\u2019s breakthrough, we get closer to reinventing the same wheel, but with more buzzwords. Who needs efficient algorithms when you can have a heated debate about theoretical efficiencies lost in forum noise? \ud83e\udd16\ud83d\udcbe"
  },
  {
    "title": "Wind farms can offset their emissions within two years, new study shows (taylorandfrancisgroup.com)",
    "points": 121,
    "submitter": "geox",
    "submit_time": "2024-05-16T17:48:04",
    "num_comments": 113,
    "comments_url": "https://news.ycombinator.com/item?id=40381166",
    "comments": [
      "A conversation about second order effects against first order deliverables. This is proof of the obvious because very few people seriously believed their emission cost inputs exceeded their energy production, it's been necessary to prove it because of politics, not serious scientific questions to their aggregate burden.During early years on lower efficiency sure, it's possible wind and solar had higher input costs and lifetime burdens than they produced. We're well beyond that phase now.If you don't think this, ask yourself if the gas wastage, consumption and fugitive emission at production and supply chain facilities in aggregate is ever costed against the energy returns through the use of the product. I never see serious analysis of things like fugitive gas emissions on the cost side of gas production overall. CCS had no solution for this.  It's huge.",
      "And to your point, albeit with a more frivolous example, wind power has been subject to tests for aesthetic satisfaction that never have to be passed with such regularity by, say, telephone wires, roads or sidewalks, other forms of electricity infrastructure, big box stores, oil and gas infrastructure, gas stations, etc.In some cases if you even ask the question you might be dismissed as a crank because, well, roads and sidewalks can crumble and fall into disrepair, but obviously we're not going to just get rid of sidewalks and roads. There's kind of an unspoken and shared understanding that the necessity of those forms of infrastructure trumps aesthetic concerns.Status quo extremism might be summed up by the demand that new things have to pass novel and specific tests that would never be applied to the status quo.",
      "The thing I would be worried about is noise in otherwise serene areas. But I'm yet to see a wind farm in an area and think \"bah, what a waste!\" I'm usually pretty pleased by the sight of them. And if I'm going to be totally fair, I hate the noise from freeways, but I also don't like living that far away from them.",
      "I love driving by the actual farms that are also wind farms. There are a bunch of them driving between San Jose and LA - just endless huge fields of cabbage or whatever overseen by giant wind turbines.Also seeing rows of them along ridgelines feels very cool.",
      "Same. They are quite stunning and beautiful in northern Maine, and I make a point of driving by them if I can.",
      "I don't think it's fair to dismiss the aesthetic argument entirely though.As your yourself said, some aesthetic concerns are dismissed because of utility, but not all of them can be. It's not a fiction that a large scale solar or wind farm will occupy more land than an equivalent gas or coal plant. So perhaps some of the concerns aren't quite so \"status quo extremism\" (lovely phrasing though, I'm going to be stealing that) as just realizing that we missed some things prior that actually mattered.",
      "They might occupy more space but I still think most people would opt to live X miles from the center of a wind/solar farm than a coal plant. Mildly bad aesthetics vs breathing in heavy metals...",
      "These aren't built in a city, where most people will be staring at them. They are in remote areas.I'd also argue that they are awesome, quietly spinning giants in the distance. Although maybe that wears off if you constantly live near one.Cell towers and oil wells are allowed to be built wherever by a landowner and are both eyesores, yet were built anyway.",
      "> These aren't built in a city, where most people will be staring at themNo, we reserve our cities for these lovelies [1].[1] https://www.nytimes.com/2022/11/05/nyregion/nyc-5g-towers.ht...",
      "That looks better than a transformer or a bunch of phone lines IMO."
    ],
    "link": "https://newsroom.taylorandfrancisgroup.com/wind-farms-can-offset-their-emissions-within-two-years-new-study-shows/",
    "first_paragraph": "",
    "summary": "In a breathtaking display of *shocking revelation*, a new study grandly unveils that wind farms might just break even on their emissions faster than your uncle can forward you an email chain about climate conspiracies. Commenters dive into an Olympic-level mental gymnastics competition, applauding the findings while simultaneously wondering if wind turbines make the sky less pretty. Others wax poetic about the majesty of turbines on ridgelines, apparently ready to nominate them for the next national beauty pageant. Amidst this profound dialogue, the timeless art of comparing everything to roads and sidewalks persists, because nothing says \"relevant comparison\" like contrasting energy infrastructure with concrete. \ud83c\udf2c\ufe0f\ud83d\udca8"
  },
  {
    "title": "Build WebGPU Apps Today with PlayCanvas (playcanvas.com)",
    "points": 117,
    "submitter": "pjmlp",
    "submit_time": "2024-05-16T16:04:47",
    "num_comments": 36,
    "comments_url": "https://news.ycombinator.com/item?id=40379982",
    "comments": [],
    "link": "https://blog.playcanvas.com/build-webgpu-apps-today-with-playcanvas/",
    "first_paragraph": "It's here! \ud83e\udd73 Today, we're excited to announce that WebGPU support has officially arrived in the PlayCanvas Editor.",
    "summary": "In an earth-shattering development that will surely disrupt your grandma's knitting blog, PlayCanvas heralds the epoch of WebGPU support like it's the second coming of <i>Clippy</i>. Developers, or rather, the three hobbyists and a bored teenager who've heard of PlayCanvas, frothed on the blog announcing that they can now make their spinning cubes marginally shinier. The comments section, a veritable bastion of misplaced enthusiasm, quickly turned into a swamp of confusion about WebGPUs versus regular GPUs, peppered with the customary off-topic rants about why \"everything was better in the days of Flash.\" Godspeed, WebGL warriors, godspeed. \ud83e\udd13"
  },
  {
    "title": "Using Llamafiles for Embeddings in Local RAG Applications (future.mozilla.org)",
    "points": 93,
    "submitter": "tosh",
    "submit_time": "2024-05-16T16:20:03",
    "num_comments": 19,
    "comments_url": "https://news.ycombinator.com/item?id=40380158",
    "comments": [
      "I\u2019d love if Firefox would feed the text content of each website I visit locally and would allow me to RAG search this database. So often do I want to re-visit a website I visited weeks earlier but can\u2019t find it again.",
      "You might not want them to have that information, but I think Google's history search now supports that for Chrome users: https://myactivity.google.com/myactivity",
      "You could use archivebox with the archivebox web extension. And then use a separate offline / batch process to embed and RAG your archive.",
      "I'm working on something like this! It's simple in concept, but there are lots of fiddly bits. A big one is performance (at least, without spending $$$$$ on GPUs.) I haven't found that much in terms of how to tune/deploy LLMs on commodity cloud hardware, which is what I'm trying this out on.",
      "You can use ONXX versions of embedding models. Those run faster on CPU.Also, don\u2019t discount plain old BM25 and fastText. For many queries, keyword or bag-of-words based search works just as well as fancy 1536 dim vectors.You can also do things like tokenize your text using the tokenizer that GPT-4 uses (via tiktoken for instance) and then index those tokens instead of words in BM25.",
      "Thanks! I should have been clearer -- embeddings are pretty fast (relatively) -- it's inference that's slow (I'm at 5 tokens/second on AKS).",
      "Could you sidestep inference altogether? Just return the top N results by cosine similarity (or full text search) and let the user find what they need?https://ollama.com models also works really well on most modern hardware",
      "I'm running ollama, but it's still slow (it's actually quite fast on my M2). My working theory is that with standard cloud VMs, memory <-> CPU bandwidth is an issue. I'm looking into vLLM.And as to sidestepping inference, I can totally do that. But I think it's so much better to be able to ask the LLM a question, run a vector similarity search to pull relevant content, and then have the LLM summarize this all in a way that answers my question.",
      "Oh yeah! What I meant is having Ollama run on the user's machine. Might not work for the use case you're trying to build for though :)",
      "This style of embeddings could be quite lightweight/cheap/efficient https://github.com/cohere-ai/BinaryVectorDB"
    ],
    "link": "https://future.mozilla.org/news/llamafiles-for-embeddings-in-local-rag-applications/",
    "first_paragraph": "May 15, 2024 | Kate Silverstein",
    "summary": "In a riveting leap towards unnecessary complexity, <em>Kate Silverstein</em> dazzles the tech community by proposing \"Llamafiles for Embeddings in Local RAG Applications.\" \ud83e\udd99 Tech hobbyists everywhere rejoice, envisioning a future where they too can over-engineer simple problems into oblivion. Commenters leap into action, trading tips on how to further bloat their already clunky setups, while occasionally lapsing into mystic reverence for GPU spending sprees. Oh, and don't forget the classic fallback\u2014suggesting Google solutions on a Mozilla blog. Peak irony! \ud83d\udcbb\ud83d\udd25"
  },
  {
    "title": "F* \u2013 A Proof-Oriented Programming Language (fstar-lang.org)",
    "points": 195,
    "submitter": "montyanderson",
    "submit_time": "2024-05-16T12:47:07",
    "num_comments": 73,
    "comments_url": "https://news.ycombinator.com/item?id=40377685",
    "comments": [
      "Man, back when I did F# for a living, I really really wanted to use this for production, but I could never quite get sign-off.  I was a big fan of Idris at the time, and F* seemed like it could more or less satisfy that itch while still being compatible with F#. One thing is that there didn't really appear to be any kind of IDE support, and while I'm alright just hacking up everything in Vim, I think the rest of my team was not.I never really got to use it, and all I've ever done with it is a few of the toy examples on their website, but I haven't completely given up on it either. I think it's a much more approachable system than Coq or Agda, but still gives you sexy dependent types.My PhD stuff is in Isabelle, and I do really like Isabelle, but I find that dependent types translate a bit more directly to \"real code\" than Isabelle's higher-order logic, so I would really like to utilize it for something, particularly with its .NET integration.",
      "I remember reading (~10 years ago) that F* was created as part of a \"Project Everest\" a long time back, with the goal of creating a provable TLS implementation. I never saw that anything came out of that though. If it's that hard to create something as well-defined as a TLS implementation, it seems futile to think this could ever be used for hand-wavy things we encounter in day-to-day work, no? Or are there real-world use cases where this could really be applied?",
      "F* existed before Project Everest, but Everest did power a lot of its development.We have built verified systems and components in the TLS ecosystem, including parts of TLS, QUIC and related protocols, and continue to do so: https://project-everest.github.io/Some of it is deployed in production systems:* Verified parsers in the Windows kernel and elsewhere: https://www.microsoft.com/en-us/research/blog/everparse-hard...* Verified crypto in Linux, Firefox, Python, ... https://github.com/hacl-star/hacl-star",
      "The Everest project did publish a proved TLS implementation: https://mitls.org.\nAnd at least the EverCrypt* cryptographic primitives has been used outside of academia.",
      "After C#, I learned F#, I loved language structure, but I was not able to run it on production effectively.A language isn't enough, a language recognized from its support in ide/production and community",
      "I didn't find F# so hard to run in production, particularly after JetBrains released Rider, but even before that I didn't think it was so bad.At Jet we managed to get to pretty decent scale with F#, and for the most part got pretty ok performance.  Often I would use the C# versions of libraries simply because they were updated more frequently. Everyone says that the C# interop is clunky and I think that's just not true, I found it relatively easy to work with C# libraries and utilize the .NET Framework.  I used ConcurrentDictionary and SemaphoreSlim pretty heavily, for example.  For the stuff was a little cludgy, I found it pretty straightforward to simply make wrapper functions that did what I needed.I even found the object-oriented support in F# to be pleasant, though I didn't use it a lot.  The syntax was really terse but easy to read, so in the rare cases where I had to extend a class or something, it wasn't hard.  If I needed to implement an interface, it was also pretty easy to write an anonymous interface and plop that into a wrapper function.One thing that I didn't like about F# was the kind of unpredictable performance with the async monad.  It was hard to measure, and it didn't seem to work completely deterministically due to some kind of laziness that I never completely understood.  The task monad released a bit later seemed to fix that, but that was integrated a bit later than my time at Jet.Still, I found it a pretty decent language, to a point where if I started a company I would genuinely consider utilizing F#.",
      "Ionide, The F# language server, is excellent.I use F# in .NET Interactive Jupyter notebooks daily at work and it works quite well.The community around the language is very helpful and the Discord is great for all sorts of issues ranging from beginner to advanced.I love the Fable compiler which targets JS, TS, Python and Rust and makes for a wonderful way to share a domain design across multiple code bases.",
      "Have you seen https://github.com/FStarLang/fstar-vscode-assistant? Copilot & F* works pretty nicely.We've also had a pretty nice emacs mode for a while: https://github.com/FStarLang/fstar-mode.el",
      "I have not tried the VSCode stuff, but I did try the Emacs thing.  Looking at the repo you linked, it looks like the first commit was last year and I left Jet in 2018.The Emacs mode was fine, I didn't think it was bad, but it was still a tough sell to my team; none of them wanted to install Emacs, they wanted a Visual Studio or JetBrains experience. I'm aware that's an uphill battle, and maybe it would be a different story if the VSCode extension existed in 2018.",
      "Where do you even find orgs that let you program in those fun langs?University jobs?"
    ],
    "link": "https://www.fstar-lang.org/",
    "first_paragraph": "F* (pronounced F star) is a general-purpose proof-oriented\n  programming language, supporting both purely functional and\n  effectful programming. It combines the expressive power of dependent\n  types with proof automation based on SMT solving and tactic-based\n  interactive theorem proving.\n  \n  F* programs compile, by default, to OCaml. Various fragments of F*\n  can also be extracted to F#, to C or Wasm by a tool\n  called KaRaMeL,\n  or to assembly using\n  the Vale\n  toolchain. F* is implemented in F* and bootstrapped using OCaml. \n  \n  F* is open source on GitHub and is under \n  active development by Microsoft Research, \n  Inria, and by the community.",
    "summary": "The world quakes as F* (not to be confused with F-bomb), a programming language that sounds like a superhero sidekick designed by a committee of mathematicians, makes yet another attempt to seize the throne of geekdom. In a shattering display of academic machismo, F* gives you \"proof-oriented\" programming, combining the approachability of quantum physics with the exhilarating fun of filing taxes. Meanwhile, in the comments section, battle-scarred veterans of F# reminisce about the glory days of unapproved projects and IDE disasters, while academically inclined wizards discuss implementing theoretical constructs IRL\u2014a fierce debate likely being held at approximately two locations worldwide. In an era desperate for the next shiny thing, F* advocates seem committed to proving that their language can, indeed, solve all problems known to mankind, minus its adoption rate. \ud83e\uddd9\u200d\u2642\ufe0f\u2728"
  },
  {
    "title": "D3 in Depth (d3indepth.com)",
    "points": 231,
    "submitter": "lobo_tuerto",
    "submit_time": "2024-05-16T14:18:07",
    "num_comments": 63,
    "comments_url": "https://news.ycombinator.com/item?id=40378791",
    "comments": [
      "If you like the idea of using D3 for data visualization but you want something a bit higher level, check out Observable Plot[1], a library by the D3 team that adds a lot of conventions and conveniences on top of D3, specifically for building plots, charts and graphs.And even beyond that, there's Observable Framework[2], a static site generator for building visualization dashboards (that supports Plot, D3 and lots of other libraries).1: https://observablehq.com/plot/2: https://observablehq.com/framework/",
      "Observable Plot is amazing. It is very flexible and intuitive to use. I now prefer it over Plotly.js which I used to use before.The docs are pretty OK, the only thing missing is a usable API reference section, so discoverability is not great.",
      "Plot and Framework are locked into the Observable ecosystem, which has its own learning curve. Learning D3 offers the best flexibility and control.",
      "In what way are these free open-source tools \u201clocked-in\u201d to Observable? Observable Plot is a vanilla JavaScript library that is released under the ISC license and can be used with any style of web development (e.g., React, Svelte, whatever). And likewise Observable Framework is released under the ISC license and you\u2019re able to self-host projects anywhere and develop locally?",
      "Can you add the library as a html link.Anything else would be unwise to invest time in learning.",
      "Yes? Examples here: https://observablehq.com/plot/getting-started",
      "Plot isn't locked into the Observable ecosystem at all - it's a JavaScript library that you can use independently of everything else there.",
      "I'll ignore the part where you're wrong about the lock-in, but to the rest of what you said...Yes?   I guess I didn't think it needed to be said so explicitly, but if you are opting into Plot and Framework, you are accepting convention over configuration as they say.And for some situations, that is what you want.If you value flexibility and control above all else, then I agree they may not be for you.But if you value other things, like speed of iteration, or just getting some good data visualizations built without a deep investment in learning underlying concepts, then Plot and/or Framework have definite advantages over doing it all with D3.",
      "Yeah, I can say from experience of D3 at least, it's very far from locked in. In fact I would ask what library you're thinking of could be less.The community also has helped with some bizarre integrations I was trying to do, into libraries like highcharts for strange reasons etc.",
      "This is like saying that a computer without an operating system offers the best flexibility, or that a pile of sand is more flexible than an assembled computer."
    ],
    "link": "https://www.d3indepth.com/",
    "first_paragraph": "D3 in Depth covers versions 6 and 7 of D3",
    "summary": "In the latest bout of JavaScript library one-upmanship, *D3 in Depth* delves into the arcane arts of D3 versions 6 and 7 for those who find pleasure in torturing themselves with low-level APIs. Cue the internet chorus hero-worshipping Observable Plot and Observable Framework, as they promise to shield the masses from the big bad world of manual graphing while keeping you *\u201cnot-locked-in\u201d* but sort of gently nudged into the Observable padded room. One enlightening commenter triumphantly proves it\u2019s not actually \u2018locked-in\u2019 by linking a \u2018getting started\u2019 page, clearly solving all conceivable use-case constraints in a single web stroke. Others maintain allegiance to the raw power of D3, akin to preferring a stick shift over an automatic while sliding down Mount Everest backwards. \ud83d\ude44"
  },
  {
    "title": "\u0160tar: an iteration construct for Common Lisp (tfeb.org)",
    "points": 42,
    "submitter": "Tomte",
    "submit_time": "2024-05-15T12:03:20",
    "num_comments": 13,
    "comments_url": "https://news.ycombinator.com/item?id=40365777",
    "comments": [
      "A couple of years ago I finally started to understand the Waters series facility [1], which was offered as an alternative to Loop.  It's a bit finicky, and the error messages are often mystifying, but I have come to quite like it for some more complicated looping situations.  The thing that finally made it accessible to me was a blog post by Joe Marshall, Series tips and tricks [2]Ironically enough, once my use of it advanced enough, I found myself writing producing forms which are just a restricted form of Loop invocation - Series turns out to compile down to Loop.  It's just that I (and others, apparently) find Series expressions more pleasant to deal with than Loop expressions.[1] https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node347.html#...[2] http://funcall.blogspot.com/2022/07/series-tips-and-tricks.h...",
      "Loop works well, is widely used, also available in Emacs Lisp and comes with zero dependencies. For these reasons, I don't see this gaining much traction.Anecdote: In almost 20 years of CL usage, I've never needed an extensible iteration construct. I also find 'loop' a lot more readable than 'iterate' [1], another fad that has come and gone.[1] https://iterate.common-lisp.dev",
      "TIL that there is a whole package for \u201cCommon Lisp Emulation\u201d[1] in Emacs that adds functions and control structures from CL \u201cto make Emacs Lisp programming significantly more convenient\u201d. Never developed a package for Emacs myself, but I feel like this can be of great help if I ever wanted to.I know that there are projects like Lem[2] that try to build some kind of editor (Emacs-like, I guess) on top of CL, which made me wonder if we would have a CL-based Emacs today if it would have been standardized by the time and if this would have been a better choice than creating a custom dialect.[1]: https://www.gnu.org/software/emacs/manual/html_node/cl/ (C-h R \"cl\" in Emacs)[2]: https://lem-project.github.io",
      "Nice! Looks like most modern list-comprehension syntaxes.> iteration and value accumulation are orthogonal problems which should be solved by orthogonal constructsThis is also covered to an extent by \"Why Functional Programming Matters\" in the discussion of laziness: https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.p...For a direct comparison of combining this syntax with \"accumulation\" into a lazy sequence, see Clojure's `for` macro:https://clojuredocs.org/clojure.core/for",
      "I shared the urge to avoid loop until I read Pascal Costanza's Highly Opinionated Guide to Lisp[1]>> Seemingly, the intended way to use the LOOP facility is to just \"guess\" a way to express an iteration and see if it works. If it doesn't you can either look up the specifics ...Since then, I do just guess at the syntax and it strangely does what I want most of the time.It seems that a library like this has a lot to prove because a) it doesn't provide a new capability, b) it adds a project dependency, and c) creates yet another way to do a standard task. If you really don't like the loop macro, you probably don't need much persuading, but I would have liked to have seen more discussion on the these trade-offs.[1] http://www.p-cos.net/lisp/guide-v1.html",
      "Huh, this is such an unusual design goal in programming languages \"just try something and it'll probably work\"Only css is done this way... but not even intentionally",
      "That's not the design goal, it's more a \"haha but kind a true\" thing.https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node235.htmlThe grammar for what's accepted by Loop is well specified, but the results also read very clearly. Once you learn a few of them, you start to understand how the rest would be written and can guess, but the design is not that you would guess.",
      "Haskell works like this: if you can manage to make it compile, it'll work the first time.  Might leak gigs of space too, but it'll work.",
      "```\nIt also has no inherent knowledge about how to iterate over any particular structure: it doesn\u2019t know how to iterate over lists, or ranges of numbers. Rather it knows that iterating has to answer two questions:    is there more?\n    what is the next thing?\n\nIn addition it knows how to ask another question:    is there any information I can use to make asking the first two questions faster?\n```This approach sounds so good. Focus on what is needed to solve the main task. Don't do less, but please don't do more. And... Do Not Assume.",
      "Yes, and that's why Java and C# use pretty much this exact approach (without the acceleration part, to be fair) for their Iterator/IEnumerator that power their for-each loops."
    ],
    "link": "https://www.tfeb.org/fragments/2024/05/15/an-iteration-construct-for-common-lisp/",
    "first_paragraph": "2024-05-15 :: programming, lisp",
    "summary": "In the latest episode of \"Lisp Gets Even More Obscure,\" a brave soul at tfeb.org introduces \u0160tar, a looping construct that revolutionizes nothing but excels in complicating the already arcane. While it aspires to be different from the universally dreaded Loop, it ironically just compiles down to being its lesser-known cousin. Commenters, eager to show off their exclusive club of Lisp knowledge, dive into nostalgic tales about Emacs Lisp and obscure references to defunct iteration methods. It's a wonderful circus of obscurity and elitism, where practicality is just an afterthought! Most users, however, seem content with their '80s-style Loop macro, effortlessly looping in blissful ignorance as the rest debate constructs no one asked for. \ud83c\udfaa\ud83e\udd13"
  },
  {
    "title": "Raspberry Pi prepares for London listing (ft.com)",
    "points": 78,
    "submitter": "denotational",
    "submit_time": "2024-05-15T07:36:36",
    "num_comments": 25,
    "comments_url": "https://news.ycombinator.com/item?id=40364108",
    "comments": [],
    "link": "https://www.ft.com/content/6d846a93-030a-4106-b045-d74a216493b0",
    "first_paragraph": "Try unlimited accessOnly $1 for 4 weeks",
    "summary": "In a thrilling development that absolutely nobody outside of a niche tech bubble cares about, Raspberry Pi, the maker of tiny computers your nerdy friend won\u2019t shut up about, is pondering a listing in London. Comment sections are buzzing with unbridled excitement, as hundreds of tech enthusiasts speculate in joyous ignorance about stock prices and market impacts\u2014because, obviously, reading a couple of WIRED articles makes you a financial expert. Watch as the Raspberry Pi attempts to conquer not just the classrooms and dusty workbenches, but the lofty peaks of the London Stock Exchange. Popcorn not included, but highly recommended. \ud83c\udf7f\ud83d\udcc9"
  },
  {
    "title": "The Sweet Spot: Maximizing Llama Energy Efficiency (jacquesmattheij.com)",
    "points": 15,
    "submitter": "jacquesm",
    "submit_time": "2024-05-15T02:46:44",
    "num_comments": 0,
    "comments_url": "",
    "comments": [],
    "link": "https://jacquesmattheij.com/llama-energy-efficiency/",
    "first_paragraph": "April 2, 2024",
    "summary": "In an astonishing feat of intellectual gymnastics, a blogger bravely sacrifices common sense to argue that llamas could, in theory, power the next generation of eco-friendly vehicles if we just played to their \"sweet spot\" of laziness mixed with sporadic bursts of energy. The comment section transforms into a startling revelation of human psychology, as scores of armchair zoologists and wannabe engineers convene to solve crises that don\u2019t exist. Here, a spectacular display of the Dunning-Kruger effect is in full bloom, with suggestions ranging from llama treadmills to spit-powered turbines. Truly, a breakthrough in both renewable energy and online comedy."
  },
  {
    "title": "JEP Draft: Support HTTP/3 in the HttpClient (openjdk.org)",
    "points": 86,
    "submitter": "mfiguiere",
    "submit_time": "2024-05-16T19:35:21",
    "num_comments": 20,
    "comments_url": "https://news.ycombinator.com/item?id=40382246",
    "comments": [
      "What's the point of not supporting the TLS changes? A lot of the HTTP/3 holdup in other libraries has been the TLS situation, so not supporting that means you're getting basically minimal value for the work you're putting in.",
      "Can you elaborate for those of us who aren't up to speed on the TLS + HTTP/3 situation? Is there a problem somewhere?Also - are people still doing TLS in their app directly? Modern setups often terminate TLS at the gateway/edge/ingress instead of at the app level. If you use something like k8s, you can even do m2m TLS within your cluster via sidecars - with your app knowing absolutely nothing about TLS.",
      "As defense in depth becomes more and more important, in-app TLS is becoming more, not less common. Especially as Zero Trust Network Access (ZTNA) is being mandated by the US federal government for contracts, the idea that you would terminate TLS at the edge and send unencrypted network traffic inside the server network is becoming a thing of the past.This remains true even inside of a Kubernetes cluster. You shouldn't trust the network there any more than you should trust your enterprise network. I'm less sure about the implications of sending unencrypted traffic between a container and its sidecar, but certainly pods should be talking to each other over TLS.",
      "The sidecar and the main container run in the same network namespace. They can reach eachother over the loopback interface. It's \"safe\".However I'm also of the opinion you should just be mounting tls certs in your container and use your TLS stack of whatever language you're using directly instead. It's a lot simpler",
      "> but certainly pods should be talking to each other over TLSThey do under that scheme. TLS is terminated at the gateway, but k8s/sidecars handle m2m TLS. This provides some advantages for automating short-lived certs, makes deployments more simple, etc and helps your pods remain unaware they are pods (kind of the holy grail of \"cloud\").A lot of your edge/serverless stuff will be similar from my understanding.",
      "How about on one machine internally, for example, using NGINX to handle HTTPS then doing an HTTP proxy pass to another process on localhost?",
      "It's up to you how much you trust the traffic on that machine and how you've set up access rights etc. In principle, a process with the right capabilities could snoop on the unencrypted traffic but might not be able to snoop on encrypted traffic. However, given how common local privilege escalations bugs are, if an attacker process is running on the same system, you have probably already lost (especially one that has enough privileges to capture network traffic).",
      "QUIC has no unencrypted mode as one of its more controversial decisions, and nobody has braved the backlash to propose it despite obvious use cases.",
      "Awesome. We use a java connector for one of our services, would be interesting to see if he would speed it up by keeping that connection state up.I've been running a few h3 sites with Nginx 1.25 for a few months, so far no problems and nice when I disconnect WiFi to cell that it keeps the connection. We have a use case for that so been trying to get that in production.",
      "Node is starting to land WebTransport, intending for it to be the js API for quic. Still a rung down from http/3 but happy seeing things inching along. https://github.com/nodejs/node/pull/52628"
    ],
    "link": "https://openjdk.org/jeps/8291976",
    "first_paragraph": "Update the HTTP Client to support the HTTP/3 protocol.",
    "summary": "In a revolutionary move that catches the Java HttpClient up to last year's technologies, a bold draft proposes implementing <em>HTTP/3</em> because, apparently, reinventing the wheel at a snail\u2019s pace is the Java way. As the internet\u2019s elite gather in the comments to squabble over TLS intricacies\u2014as if anyone outside their echo chamber really cares\u2014most are blissfully unaware that their precious application layers are just as exposed with or without their cryptographic bickering. Meanwhile, tech enthusiasts tirelessly preach the gospel of Kubernetes and sidecars like tech-evangelists on a dystopian pilgrimage, promising salvation through complex configurations that even they don\u2019t fully understand. Oh, and if you temporally disconnect from WiFi\u2014the 'holy grail'\u2014don\u2019t worry, HTTP/3 has your back, theoretically."
  },
  {
    "title": "Smart Pointers in (GNU) C (snai.pe)",
    "points": 46,
    "submitter": "indigoabstract",
    "submit_time": "2024-05-16T18:56:55",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=40381841",
    "comments": [
      "It is time to reply to the issues that were posted since these years...",
      "(2015) or earlier",
      "it's great when the ratio of cmake to C is close to 3..."
    ],
    "link": "https://snai.pe/posts/c-smart-pointers",
    "first_paragraph": "",
    "summary": "In an astonishing feat of technological necromancy, a brave soul decides to breathe life back into the carcass of (GNU) C by grappling with the undead concept of smart pointers. The article, a thrilling saga set in the esoteric world of memory management, intends to remind us that no matter how many layers of abstraction we wrap around C, it\u2019s still just C. Commenters, emerging from their stone-aged caves, are either stuck in awe or busy comparing the ratio of cmake to actual C code, because apparently measuring toolchain bloat is now an X-sport. Strap in, folks, as we witness the heroic attempt to teach an old language new tricks, watch out for segfaults! \ud83d\ude31\ud83e\uddd9\u200d\u2642\ufe0f\ud83d\udca5"
  }
]