[
  {
    "title": "Crushing Jira tickets is a party trick, not a path to impact (seangoedecke.com)",
    "points": 40,
    "submitter": "scarface_74",
    "submit_time": "2025-01-25T00:06:30 1737763590",
    "num_comments": 22,
    "comments_url": "https://news.ycombinator.com/item?id=42818169",
    "comments": [
      "I was given high impact projects precisely because I crushed tickets as a junior. I demonstrated repeated mini-competencies (crushing tickets), gained credibility, then got to demonstrate macro-competency (deliver projects).Definitely agree that \"crushed many tickets\" is less effective in performance review than \"delivered critical project\". I'm not sure how one gets to be responsible for a project without first crushing tickets, though.Just my experience, curious what other folks have seen/experienced.\n \nreply",
      "> I'm not sure how one gets to be responsible for a project without first crushing tickets, thoughI skipped the whole junior developer thing. I was hired at a company as a computer operator based on a prior years internship.  I was the only one that knew how to code and they got a contract where they needed to build an entire connected double entry verification data entry system with about 10 screens and a management console.  I wrote the entire thing in C in the mid 90s.Unfortunately, after working at another company for 9 years after that, I became an expert beginner by 2008 and didn\u2019t start learning best practices until 2012-2014 at my 4th company.So in other words - \u201cdon\u2019t do that\u201d.\n \nreply",
      "I suspect this is a very common experience.I don't think that 'crushing tickets' is a good metric of developer competency, but it's a very visible metric regardless and is therefore probably a good way to progress in many organisations.\n \nreply",
      "It's not about crushing tickets. It's about crushing the right tickets.\n \nreply",
      "> If you ship a project and your management chain begins talking about the next thing, stop improving that project.and this type of advice is precisely why the whole industry completely lost its ability to produce usable things.\n \nreply",
      "Or in the case of Google at one point had 5 messaging apps shipping simultaneously and talked about three of them at one Google event.  Shipping new products shows \u201cimpact\u201d.  Maintaining and improving existing products don\u2019t.\n \nreply",
      "Surely there's a balance to be found. Personally, I allow myself some not-explicitly-requested improvement work when I see what I view as low hanging fruit.I know the code and effort involved, and sometimes just doing the thing is fast enough it's not worth working it into planning. It also keeps me motivated on whatever \"next thing\" I'm working on when I allow myself some non-next-thing work.However, there's definitely wisdom in aligning priorities with the business. If \"next thing\" is deemed more important by the people who pay you, you should probably be focused on that.\n \nreply",
      "How does that work in organizations where everything has to be tied to a ticket and you have to do pull requests?\n \nreply",
      "You know what killed the dinosaurs, right?Impact.\n \nreply",
      "I first thought the headline was about crushing Jira itself. Many days it could be very tempting.\n \nreply"
    ],
    "link": "https://www.seangoedecke.com/party-tricks/",
    "first_paragraph": "Don\u2019t be a JIRA ticket zombie! I think a common experience among ambitious juniors - certainly I did this once - is to get frustrated at the slow pace of a team and decide \u201cscrew it, I\u2019ll just burn through all these tickets\u201d. On many teams, it\u2019s not that hard to do 2x or 3x more tickets than the next most productive person. But this is a dead end. You\u2019ll get a pat on the head, told \u201cnice work, don\u2019t burn yourself out\u201d, and no progress towards a senior promotion.Everything you could want from a company - promotions, bonuses, internal respect - comes from shipping projects, not from closing out tickets. It can still be useful to go through a stage of churning out tickets: to learn how fast you can work, to get rapid familiarity with the codebase, and to build some credit with your colleagues. But at some point you need to transition from doing whatever work is in front of you to prioritizing the work you think is the most important.What determines importance? Importance at a tech company"
  },
  {
    "title": "Trying out Zed after more than a decade of Vim/Neovim (sgoel.dev)",
    "points": 103,
    "submitter": "siddhant",
    "submit_time": "2025-01-24T21:53:00 1737755580",
    "num_comments": 60,
    "comments_url": "https://news.ycombinator.com/item?id=42817277",
    "comments": [
      "> It's only been a day since I really started using Zed instead of NeovimPlease update in 1 year\n \nreply",
      "> my workflow consists of switching back and forth between a terminal window and an editor window.Same! I run neovim in tmux together with stuff I hack on. I switch beteen tmux windows with shift-arrows and it works so well. I run this full screen in Ghostty. No distractions.I try Zed and VSCode and I always come back to this setup. It works so well for me personally.\n \nreply",
      "> I try Zed and VSCode and I always come back to this setup.I have Ctrl+` set to switch focus between the editor and the terminal panes in VSCode, so I can toggle between them pretty easily as this is also my workflow\n \nreply",
      "i had the same workflow but now i use zed w/ tmux (tmux inside the zed terminal)\n \nreply",
      "Yeah the tmux / vim combo is so hard for me to beat with other editors still. I used Zed exclusively last month thinking the LLM integrations would be a compelling enough reason to finally switch. Like the post author, I'm a little fatigued with config / plugin churn since I switch languages frequently and it always takes some customizing to make vim work well when I do that.As the author describes though, I found myself copy-pasting a lot between LLM chat and editing buffers. In tmux, I have a really simple function that copies select panes (using tmux capture-pane) into my prompt, or I can give it full files for context.  Most of the time though, I can do something like `llm -t 0 -t 1 'what is this libSSL error indicating? here's my code', where -t 0 gives it my vim pane and -t 1 gives it the terminal I'm running things in. I've been surprised that this somewhat rudimentary approach has felt far more effective than the more sophisticated editors I've been trying.Is this just me? Does it seem to others that the LLM-enabled editors coming out these days still require a lot of copy-pasting of context that can be easily provided with just a dump of tmux output?Everything-is-just-text might be crude but dang does it make quick and dirty LLM integrations a snap!\n \nreply",
      "I use tmux and neovim along with the copilot plugin[0]. I prefer it over the VSCode copilot integration, to me it feels less obtrusive and out of the way, which is what I want. You're also not dealing with API costs since it uses the regular Copilot subscription.[0] https://github.com/github/copilot.vim\n \nreply",
      "codecompanion.nvim has some pretty nice ways to get context into the llm chat without copying and pasting.\n \nreply",
      "Zed has the least uncanny valley of any vim emulation that I've tried.Switching is not feasible for me until they get mini.surround[0] and Flash.nvim[1], particularly Flash's treesitter mode (see screenshot of [1] to get an idea).They work particularly well together to select semantically meaningful chunks of code and add/remove/change surrounding parens/braces/curlies/etc.0: https://github.com/echasnovski/mini.surround1: https://github.com/folke/flash.nvim\n \nreply",
      "I switched recently from vscode, and it's now my daily driver. I mainly edit rust & typescript, experience has been great. I did need two critical keybindings for toggling the terminal: https://gist.github.com/b5/8a03cee3cf6321ee65ffcb28899c4362 , and documentation was a little thin on how to set it up\n \nreply",
      "Zed is the only GUI editor I've used as my daily driver after 15+ years of development (hardcore vim fan). Vim Mode is wonderful, the terminal pane works well, UI is butter-smooth, LSP integration beats VS Code's IMHO, and the LLM-powered autocomplete works well (haven't tried chat/generation). Nice themes, too.The lack of debugger support will put some off, but I bet they'll get to it someday. It's already progressed so much in the four or five months I've used it (esp. Vim Mode).\n \nreply"
    ],
    "link": "https://sgoel.dev/posts/trying-out-zed-after-more-than-a-decade-of-vim-neovim/",
    "first_paragraph": "\n\n\n\n\nIdea\n\n\n                Looking for a developer-friendly way to\n                \n                        Track your Personal Finances using Python\n                    ?\n            \nI'm currently drafting this blog post in Zed. After using Vim/Neovim for more than 15\nyears, I recently decided to try out something new. I don't know if this little\nexperiment will work, or if I'll run back to my trusty Neovim, but hey, what I do know\nis that I'd like to find out.Why though? If you've used a specific tool for that long, why (try to) switch to\nsomething else anyway? Everyone has their own reasons. I have two.Lately, I've been drifting towards things that \"just work\".I love (Neo)Vim. Like I wrote earlier, it's been my primary editor for the past 15\nyears. What I don't love is all the configuration that goes into it before I can use it\nto start writing code.When I first started using Vim (in 2009!), my configuration was a tiny .vimrc file\nthat was handed over to me by my internship superv"
  },
  {
    "title": "Vic-20 Elite (vic20elite.wordpress.com)",
    "points": 31,
    "submitter": "todsacerdoti",
    "submit_time": "2025-01-24T23:04:13 1737759853",
    "num_comments": 8,
    "comments_url": "https://news.ycombinator.com/item?id=42817802",
    "comments": [
      "The Vic-20 was my first computer, so it has a special place in my heart. It was a hand-me-down from an aunt at the time when the C64 was the star of the show, and I only had 2 games for it. My only option was to learn how to program. It was so crude, that the thought of running something like Elite on it never even crossed my mind. I'm shocked someone actually went on and did that. Wow!\n \nreply",
      "It does require a 32k expansion which almost nobody had - I don\u2019t remember pricing from the era but I would guess 32k of static ram (the VIC did not have a DRAM controller) would get you more than halfway to a c64\n \nreply",
      "I was happy I had a tape drive. 32K was rich-kid stuff. \nHowever, restriction was a great enabler of creativity, and I'm grateful for it.\n \nreply",
      "Is Elite conceptually similar to Escape Velocity?I was so obsessed with this game as a kid, and the mods were super cool too!  Would love to learn the backstory behind the publisher, Ambrosia Software, about how they made so many great games in the 1990's.https://en.wikipedia.org/wiki/Escape_Velocity_(video_game)\n \nreply",
      "Sure, it's the original \"space trader\". Unlike EV, which owes its top-down interface to an even older game (Asteroids, 1979) it is however 3D. Fighting pirates is a mild test of hand-eye coordination, 3D orientation and nerve. Docking with a space station (until you buy the auto-dock device) is a severe test. Imagine you have to insert a slice of bread into a slowly rotating toaster, and if the bread touches the sides you die. Also your eyes are located in the leading edge of the bread. (This was presumably inspired by Kubrick's 2001.)\n \nreply",
      "Very very distantly.The more direct ancestor of Escape Velocity was Star Control 2.\n \nreply",
      "Yes. You have a ship and can explore the galaxy, trade goods, fight off pirate raids, etc. It was one of the deepest games available for any system during its time. There was a NES port only available in Europe; its CHR ROM was actually RAM, allowing the game's vector graphics to be drawn into it in framebuffer-like fashion for an experience that matched the computer ports.\n \nreply",
      "Elite is a masterpiece.Just going to plug my little galos project here for fun: https://github.com/nixpulvis/galos/tree/master/galos_map. It's built for the latest version of the game, Elite: Dangerous.\n \nreply"
    ],
    "link": "https://vic20elite.wordpress.com/",
    "first_paragraph": "Elite for VIC 20Unofficial Port by Aleksi Eeben in 2025VIC 20 version of the genre-defining 1984 classic and one of the first open-world space trading games if not the first, featuring exploration, combat, and a dynamic economyVIC 20 Elite is based on the C-64 source. VIC 20 specific graphics, text, keyboard & joystick input, and sound routines were written from scratch to replace the corresponding C-64 code.Of course, the complete enhanced Elite won\u2019t fit within the VIC 20\u2019s limited memory, so some features had to be left out. Following the original 1984 BBC Cassette and Acorn Electron version, the VIC 20 version omits extended planet descriptions, planetary details (craters and meridians), and the missions that appear further on in the game. The pause mode options are dropped, and there is no Find Planet option in Galactic Chart (that would be only really useful during missions).Three ship blueprints have been removed: Moray, that never spawns due to a bug; Constrictor, that only app"
  },
  {
    "title": "Show HN: Lightpanda, an open-source headless browser in Zig (github.com/lightpanda-io)",
    "points": 84,
    "submitter": "fbouvier",
    "submit_time": "2025-01-24T22:15:32 1737756932",
    "num_comments": 72,
    "comments_url": "https://news.ycombinator.com/item?id=42817439",
    "comments": [
      "Author here. The browser is made from scratch (not based on Chromium/Webkit), in Zig, using v8 as a JS engine.Our idea is to build a lightweight browser optimized for AI use cases like LLM training and agent workflows. And more generally any type of web automation.It's a work in progress, there are hundreds of Web APIs, and for now we just support some of them (DOM, XHR, Fetch). So expect most websites to fail or crash. The plan is to increase coverage over time.Happy to answer any questions.\n \nreply",
      "When I've talked to people running this kind of ai scraping/agent workflow, the costs of the AI parts dwarf that of the web browser parts. This causes computational cost of the browser to become irrelevant. I'm curious what situation you got yourself in where optimizing the browser results in meaningful savings. I'd also like to be in that place!I think your ram usage benchmark is deceptive. I'd expect a minimal browser to have much lower peak memory usage than chrome on a minimal website. But it should even out or get worse as the websites get richer. The nature of web scraping is that the worst sites take up the vast majority of your cpu cycles. I don't think lowering the ram usage of the browser process will have much real world impact.\n \nreply",
      "The cost of the browser part is still a problem. In our previous startup, we were scraping >20 millions of webpages per day, with thousands of instances of Chrome headless in parallel.Regarding the RAM usage, it's still ~10x better than Chrome :) It seems to be coming mostly from v8, I guess that we could do better with a lightweight JS engine alternative.\n \nreply",
      "> there are hundreds of Web APIs, and for now we just support some of them (DOM, XHR, Fetch)> it's still ~10x better than ChromeDo you expect it to stay that way once you've reached parity?\n \nreply",
      "Playwright can run webkit very easily and it's dramatically less resource-intensive than Chrome.\n \nreply",
      "Yes but WebKit is not a browser per se, it's a rendering engine.It's less resource-intensive than Chrome, but here we are talking orders of magnitude between Lightpanda and Chrome. If you are ~10x faster while using ~10x less RAM you are using ~100x less resources.\n \nreply",
      "You may reduce ram, but also performance. A good JIT costs ram.\n \nreply",
      "Yes, that's true. It's a balance to find between RAM and speed.I was thinking more on use cases that require to disable JIT anyway (WASM, iOS integration, security).\n \nreply",
      "Yeah, could be nice to allow the user to select the type of ECMAScript engine that fits their use-case / performance requirements (balancing the resources available).\n \nreply",
      "Generally, for consumer use cases, it's best to A) do it locally, preserving some of the original web contract B) run JS to get actual content C) post-process to reduce inference cost D) get latency as low as possibleThen, as the article points out, the Big Guns making the LLMs are a big use case for this because they get a 10x speedup and can begin contemplating running JS.It sounds like the people you've talked to are in a messy middle: no incentive to improve efficiency of loading pages, simply because there's something else in the system that has a fixed cost to it.I'm not sure why that would rule out improving anything else, it doesn't seem they should be stuck doing nothing other than flailing around for cheaper LLM inference.> I think your ram usage benchmark is deceptive. I'd expect a minimal browser to have much lower peak memory usage than chrome on a minimal website.I'm a bit lost, the ram usage benchmark says its ~10x less, and you feel its deceptive because you'd expect ram usage to be less? Steelmanning: 10% of Chrome's usage is still too high?\n \nreply"
    ],
    "link": "https://github.com/lightpanda-io/browser",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Lightpanda: the headless browser designed for AI and automation\n      \n\nlightpanda.io\n\n\nLightpanda is the open-source browser made for headless usage:Fast web automation for AI agents, LLM training, scraping and testing with minimal memory footprint:See benchmark details.You can download the last binary from the nightly\nbuilds for\nLinux x86_64 and MacOS aarch64.Once the CDP server started, you can run a Puppeteer script by configuring the\nbrowserWSEndpoint.Lightpanda is written with Zig 0.13.0. You have to\ninstall it with the right version in order to build the project.Lightpanda also depends on\nzig-js-runtime (with v8),\nNetsurf libs and\nMimalloc.To be able to build the v8 engine for zig-js-runtime, you have to install some libs:For Debian/Ubuntu based Linux:For MacOS, you only need cmake:You can run make install to install deps all"
  },
  {
    "title": "Show HN: Cs16.css \u2013 CSS library based on Counter Strike 1.6 UI (samke.me)",
    "points": 410,
    "submitter": "samke-",
    "submit_time": "2025-01-24T15:37:07 1737733027",
    "num_comments": 94,
    "comments_url": "https://news.ycombinator.com/item?id=42814110",
    "comments": [
      "I've been eagerly awaiting the opportunity to expand my collection!https://alexbsoft.github.io/win95.css/ windows 95https://botoxparty.github.io/XP.css/ windows xphttps://cs16.samke.me/ counter strike 1.6https://edwardtufte.github.io/tufte-css/ edward tuftehttps://jdan.github.io/98.css/ windows 98https://khang-nd.github.io/7.css/ windows 7https://micah5.github.io/PSone.css/ playstation onehttps://nostalgic-css.github.io/NES.css/ neshttps://sakofchit.github.io/system.css/ apple systemhttps://thesimscss.inbn.dev/ the sims\n \nreply",
      "I can smell that windows 98 theme, the gray plastic and the rubber mouse ball that used to get schmootz in it.\n \nreply",
      "Gotta scratch the schmootz off those little rollers too.\n \nreply",
      "Belongs here:\nhttps://code.divshot.com/geo-bootstrap/\n \nreply",
      "I like it! But how would you describe this one? This collection is meant more for tight/inspired themes. But I also included https://bootstra386.com/ which is on the edge too so I'm not against including this\n \nreply",
      "Geocities is infamous.\n \nreply",
      "ohhh that's what the geo is in reference to. Awesome, thanks!Still a bit of a gray area because there's not set \"geocities\" or \"myspace\" style, but I'll include stuff like this for now\n \nreply",
      "That 95 theme is terrible. May as well use the 98 theme.\n \nreply",
      "You forgot snes! https://snes-css.sadlative.com/\n \nreply",
      "Thanks! I'll add this next time I post this list :)\n \nreply"
    ],
    "link": "https://cs16.samke.me",
    "first_paragraph": "CSS library based on Counter Strike 1.6 UI.\n        You can install cs16.css simply by pasting this to your html `head` tag:\n      DarkLightOptionsTab content...Tab content...Tab content..."
  },
  {
    "title": "Show HN: Onit \u2013 open-source ChatGPT Desktop with local mode, Claude, Gemini (github.com/synth-inc)",
    "points": 57,
    "submitter": "telenardo",
    "submit_time": "2025-01-24T22:15:16 1737756916",
    "num_comments": 20,
    "comments_url": "https://news.ycombinator.com/item?id=42817438",
    "comments": [
      "I was so so excited to read this, then I saw the headline is deceptive. It's not Open Source; it uses a Creative Common \"Non-Commercial\" license.CC licenses are not meant for software. They explicitly say so on their FAQ: https://creativecommons.org/faq/#can-i-apply-a-creative-comm...And non-commercial licenses are not Open Source, period. This has been well established since the 1990s, both by the FSF and the OSI.It's such a promising piece of software, but deceptive advertising is a bad way to start off a relationship of any sort.\n \nreply",
      "As someone developing CC0-licensed software, this had me a bit shook, so let me highlight that your link does clarify that CC0 licenses are fine for software and are entirely separate from other CC licenses.Relevant sub-link (from OP's link): https://wiki.creativecommons.org/wiki/CC0_FAQ#May_I_apply_CC...\n \nreply",
      "I would like to add that this is probably not deceptive advertising. At least not intentional deceptive as many people including me didn't know that CC licenses are not meant for software and is not considered open source. I don't know if it is common misunderstanding or not but I think there is strong case to say that some people intuitively would think so.\n \nreply",
      "It might not be, but I can't understand how someone who has written such advanced software, and includes a monetization plan, and then posts about it on HN also doesn't take the time to choose a license.Even if they didn't know CC wasn't suitable for software, everyone knows that non-commercial isn't Open Source.I didn't dig into the software, but I wonder if the licenses for the dependencies allow this either, eg if any are GPL or similar.\n \nreply",
      "> CC wasn't suitable for softwareThis is wrong. CC is perfectly fine for software in some cases, such as here.Ok, CC is not tailored specifically for software, thus the general advice \"you should use something else\" but I do not see why CC would not be suitable here to achieve OP's goals.Can someone explain?\n \nreply",
      "Creative Commons' FAQ addresses this    Unlike software-specific licenses, CC licenses do \n    not contain specific terms about the distribution \n    of source code, which is often important to ensuring \n    the free reuse and modifiability of software. \n    Many software licenses also address patent rights, \n    which are important to software but may not be \n    applicable to other copyrightable works. Additionally,\n    our licenses are currently not compatible with the \n    major software licenses, so it would be difficult to \n    integrate CC-licensed work with other free software. \n    Existing software licenses were designed specifically\n    for use with software and offer a similar set of \n    rights to the Creative Commons licenses.\n \nreply",
      "Software licenses, especially the more \"advanced\" licences such as the GPL, MPL, and others include very specific language around the issue of what is use, what is distribution, what is is connecting to, derived works, and importantly, around patents.The CC licenses do an amazing job when it comes to artistic work such as books, movies, music, etc. but you don't have the same issues there, and that's why even CC says that they don't recommend using them for software.\n \nreply",
      "Yes, that's right. This was definitely not intentional and we are very open to changing it to something more appropriate!\n \nreply",
      "I think the license choice is great. It allows noncommercial use, modification, and redistribution. It\u2019s not \u201copen source\u201d according to the champions of the term (since it violates the use-for-any-purpose requirement) but I\u2019m a huge fan of this license and license several of my projects CC-NC-BY where AGPL would be too heavy-handed.\n \nreply",
      "I think your choice is very appropriate.And it is open source.Probably not OSI-open source or FSF-open source but it is open source, period.\n \nreply"
    ],
    "link": "https://github.com/synth-inc/onit",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Onit iOS client\n      Onit is an open-source AI chat assistant that lives in your desktop!It's like ChatGPT Desktop, but with local mode and support for other model providers (Anthropic, GoogleAI, xAI, etc). It's also like Cursor Chat, but everywhere on your computer - not just in your IDE!We are building Onit based on these core beliefs:Onit V1 is released under a Creative Commons Non-Commercial license. We believe in:V1 is completely free. Future versions may include paid premium features, but:We are Synth, Inc., a small team of developers in San Francisco building at the edge of AI progress. Other projects include:We'd love to hear from you! Reach out at contact@getonit.aiQ: Why not Linux or Windows?\nA: We're starting with macOS. Based on reception, we'll expand platform support.Q: How can I contribute?\nA: We welcome PRs! Feel fr"
  },
  {
    "title": "Wild \u2013 A fast linker for Linux (github.com/davidlattimore)",
    "points": 260,
    "submitter": "hkalbasi",
    "submit_time": "2025-01-24T16:25:53 1737735953",
    "num_comments": 116,
    "comments_url": "https://news.ycombinator.com/item?id=42814683",
    "comments": [
      "Ever since mold relicensed from AGPL to MIT (as part of mold 2.0 release), the worldwide need for making another fast linker has been greatly reduced, so I wasn't expecting a project like this to appear. And definitely wasn't expecting it to already be 2x faster than mold in some cases. Will keep an eye on this project to see how it evolves, best of luck to the author.\n \nreply",
      "Note that Mold has no interest in becoming incremental, so there is a big reason there for another linker to exist. I find it kind of embarrassing that MS' linker has been incremental by default for decades, yet there's no production ready incremental linker on Linux yet.\n \nreply",
      "OTOH even lld, fast but fairly slower than mold, is already incredibly faster than MS's linker even without the incrmeentality. Like, I'm routinely linking hundreds of megabytes in less than a second anyways, not sure incrementality is that much worth it\n \nreply",
      "Additionally the way precompiled headers are handled in Visual C++ and C++ Builder have always been much better than traditional UNIX compilers, and now we have modules as well.\n \nreply",
      "It has to be a candidate for the longest biggest gap in build tooling ever.\n \nreply",
      "[flagged]",
      "\"Please respond to the strongest plausible interpretation of what someone says, not a weaker one that's easier to criticize. Assume good faith.\"https://news.ycombinator.com/newsguidelines.html\n \nreply",
      "Yes, I missed a word. And I believe pretty much everybody else realized what I meant to say.Feel free to point me in the direction of a production grade incremental compiler that can run on Linux, GNU or otherwise.\n \nreply",
      "I'm pretty sure that's a typo, and \"incremental\" was meant to be included in that sentence.\n \nreply",
      "Yes, indeed I accidentally forgot about incremental there.\n \nreply"
    ],
    "link": "https://github.com/davidlattimore/wild",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        A very fast linker for Linux\n      Wild is a linker with the goal of being very fast for iterative development.The plan is to eventually make it incremental, however that isn't yet implemented. It is however\nalready pretty fast even without incremental linking.For production builds, its recommended to use a more mature linker like GNU ld or LLD.During development, if you'd like faster warm build times, then you could give Wild a try. It's at\nthe point now where it should be usable for development purposes provided you're developing on\nx86-64 Linux. If you hit any issues, please file a bug report.To install a pre-built binary, you can copy and paste the command from the releases\npage. Alternatively, you can download the tarball\nand manually copy the wild binary somewhere on your path.To build and install, you can run:If you'd like to"
  },
  {
    "title": "Show HN: Trolling SMS spammers with Ollama (widloski.com)",
    "points": 62,
    "submitter": "Evidlo",
    "submit_time": "2025-01-22T19:23:48 1737573828",
    "num_comments": 22,
    "comments_url": "https://news.ycombinator.com/item?id=42796496",
    "comments": [
      "Nice work and thank you for the write up! Part of me is wondering if your bot is talking to actual humans or other bots (albeit not as advanced) because it seems like they just continue pushing forward with their script as opposed to getting wary.However, I watch a lot of scam baiting and I've seen a lot of them - even on a live phonecall - be told ridiculously outlandish statements that the scammer will gloss over and return to their script, so I'm not ruling out that it's still a real human...\n \nreply",
      "I do this a lot. Basically there are some initial steps that are obviously done programmatically no matter what you say, and then I guess if your responses pass enough gates you pierce the veil and get a real person. I\u2019ve gotten scammers so worked up they started cursing in all caps for long periods of time, but even those start with \u201cHello is this Anna?\u201d or \u201cMake sure you get the props to the stage by 7pm.\u201d\n \nreply",
      "The most essential part of \"trolling spammers\" is to use considerably less effort/resources to string them along than it costs them to proceed. Otherwise, it kind of raises a question of who's trolling who.Even forgiving the work you put in to set all this up (a fun Saturday, for sure), do you imagine you're doing that here?\n \nreply",
      "I totally disagree. For one, for every minute the spammers spend on someone trolling them, that is real harm not being done to people in the world. That\u2019s high value. Second, this is a fun side project that this person would have been investing time in regardless (I assume), so it might as well be a side project that adds real value to the world.\n \nreply",
      "What if the spammer\u2019s alternative to interacting with you/the LLM is to sit around chit chatting with their friends waiting for a call/chat queue?\nI don\u2019t think it\u2019s necessarily a given that a spammer spends with a troll is one minute the spammer isn\u2019t spamming to someone else\n \nreply",
      "So you believe it's a human on the other end. In that case, an LLM might meet the efficiency criteria, sure.More likely, though it's using an even more cost efficient technique and isn't consuming much or any human attention at all here.\n \nreply",
      "It\u2019s a human on the other end. My suspicion of how it works is that the first several messages are scripted no matter the response, and then upon passing some gates you get a human in the loop. Makes sense too, them not wasting a human on the first several messages.\n \nreply",
      "It\u2019s little to no value. These SMS operations are very efficient and horizontally scalable, running thousands of conversations in parallel, even one human can be talking to multiple people.\n \nreply",
      "Good work brodude123 ha! How quickly does the system respond to the real estate messages?\n \nreply",
      "Takes about 5 seconds to generate the response, plus another 10-15 seconds for the gateway app to be woken up and forward the message.\n \nreply"
    ],
    "link": "https://evan.widloski.com/software/sms_llm/",
    "first_paragraph": "Project FilesI occasionally get unsolicited texts from real estate brokers looking to buy specific properties in my hometown where I own no property and don't even live.  I assume they scrape cell phone numbers from WhitePages and just spray-and-pray hoping to get a response.\nTypical spam message\n\nMy parents own some undeveloped land in the middle of town which lies mostly in a flood zone and the usable acreage is much less than it appears on paper.  Of course the brokers don't know this, so the prospect of buying up a big plot which has been vacant for decades for cheap probably gets their mouths watering.Over Christmas break I worked on a system for controlling my phone's SMS application over MQTT from a remote workstation running Ollama.  Below is an overview of the system:The first step is to forward text messages somehow to the LLM workstation.  There are several SMS forwarding tools on both F-Droid and the Play store, but most of them only supported one-way forwarding received SM"
  },
  {
    "title": "A phishing attack involving g.co, Google's URL shortener (gist.github.com)",
    "points": 194,
    "submitter": "zachlatta",
    "submit_time": "2025-01-24T03:38:46 1737689926",
    "num_comments": 80,
    "comments_url": "https://news.ycombinator.com/item?id=42810252",
    "comments": [
      "The biggest scare I've gotten is somehow ending up on \"colnbase.com\" (instead of \"coinbase.com\").It's defunct now, but at the time it was a 1:1 replica of Coinbase. And the only reason I noticed was because 1Password didn't offer to fill in my credentials.While knowing someone's email/password combo might not be enough for an attacker to do anything malicious on Coinbase itself (due to email re-verification maybe), the point is that even the smartest of us Hacker News users can fall for it. And that should scare the rest of us.\n \nreply",
      "So so true. 1Password refusing to auto fill a password has saved me multiple times in the past! Also, one of my friends has a PhD in literally rocket science (aeronautical engineering from MIT) and got scammed by someone who stole his brother's SIM card and did some shenanigans. No one is safe, no matter how smart or tech savvy you think you are! For the less tech savvy folks, I understand why they are scared, it's hard to give them even general tips to not lose the farm to fraudsters.\n \nreply",
      "The general advice I give is:Don't trust incoming calls, text messages or emails.Don't trust caller ID on your phone.If someone calls you asking for information or to do something, ask for a case id or reference number. Hang up, call back on a number you get from a previous bill, back of your credit card, or by googling the company.If anyone is pushing for something to be done urgently, stop. Hang up, don't take any action. Call a trusted other person and talk to them about it.\n \nreply",
      ">by googling the companyAnd remember it's going to be the 4th or 5th link down, not the first.\n \nreply",
      "I really wish phones would change the UI to make it more obvious that caller ID shouldn't be trusted.\n \nreply",
      "I know that \"rocket scientist\" has been a standin for \"smart person\" or \"genius\", but in this case, I would be more surprised if a computer security expert (various job titles) had been scammed, because it's their job to be up on this stuff.How often does a rocket scientist deal with computer viruses, or phishing emails, etc compared to a security expert? Most of the time, their IT security expert (ideally) stops it before it gets to them..\n \nreply",
      "I may be more qualified then, I work in fraud. I accidentally called a fake airline number to get a refund for a Delta ticket and happily gave the guy my credit card for some such fee. If requiring a credit card fee to get a refund isn't a red flag, I don't know a better one. To be fair, my sister had found the number and three way joined me in because I was helping her buy the ticket. So an extra rule: don't even trust a phone number someone you know found because /they/ might have been the first victim and passing compromised information to you.\n \nreply",
      ">  that even the smartest of us Hacker News usersWell, ok then.\n \nreply",
      "I'm not sure if it's good thing or not but I've come to consider that any notification about a password being reset or a fraudulent charge is phishing unless I initiate some action.I always verify that I'm actually fucked and then take action. This seems counter-intuitive but the deluge of phishing emails makes me feel this is the safest option. I'd rather wait to notice a fraudulent charge and dispute it, than leak info to a random SMS number that claims (possibly truthfully) that someone in Japan spent $9000 at the gucci store.\n \nreply",
      "Agreed. I do not follow any links, accept calls, etc. I go to the site of origin and do what I need. Also be careful if you search for the sites name on Google, still might click a fraud site!\n \nreply"
    ],
    "link": "https://gist.github.com/zachlatta/f86317493654b550c689dc6509973aa4",
    "first_paragraph": "\n        Instantly share code, notes, and snippets.\n      g.co, Google's official URL shortcut (update: or Google Workspace's domain verification, see bottom), is compromised. People are actively having their Google accounts stolen.Someone just tried the most sophisticated phishing attack I've ever seen. I almost fell for it. My mind is a little blown.Someone named \"Chloe\" called me from 650-203-0000 with Caller ID saying \"Google\". She sounded like a real engineer, the connection was super clear, and she had an American accent. Screenshot.They said that they were from Google Workspace and someone had recently gained access to my account, which they had blocked. They asked me if I had recently logged in from Frankfurt, Germany and I said no.I asked if they can confirm this is Google calling by emailing me from a Google email and they said sure and sent me this email and told me to look for a case number in it, which I saw in the email string. I asked why it said important.g.co and she s"
  },
  {
    "title": "Her dad, the 10k records he left behind and a viral lesson in grief (washingtonpost.com)",
    "points": 36,
    "submitter": "pseudolus",
    "submit_time": "2025-01-22T12:24:13 1737548653",
    "num_comments": 13,
    "comments_url": "https://news.ycombinator.com/item?id=42791994",
    "comments": [
      "https://archive.ph/5sJTY",
      "I inherited 600+ jazz CDs and a couple of hundreds of LPs from my dad, who died 10 years ago - and like TFA, music is what we often connected over.Most (but not all!) of that music is available online.   But I listen to them now and then, in part for the linear experience that they offer, but also because they were his and meant a lot to him.  And they were physical items - if he had left me his Spotify account, I'd get no value out of it.Time to go put on some Grant Green..\n \nreply",
      "I think people assume that because the actual contents of the media are basically identical, that the physical and digital/streamed media are functionally equivalent, but they offer very different experiences.You have a really awesome relationship with the physical media your dad left you. I imagine you play the vinyls on some kind of stereo and not in airpods or whatever? The medium asks you to use it to create an experience, an environment. Streaming doesn't care, so long as you're Consuming Content.With the enshittification of Spotify (really? Ads for AI generated bullshit on my PAID account???) I really want to retreat back into the domain of Local Copy.Sony BMG can't enshittify a CD you already own. Random House can't take back a book I bought in the 90s.I hope that we have a renaissance of physical media as people realize that streaming companies don't respect our desires about how we listen/watch/read things.\n \nreply",
      "You say that, but maybe you don\u2019t remember the rootkits Sony BMG put on their cd\u2019s in the 90\u2019s ( https://en.m.wikipedia.org/wiki/Sony_BMG_copy_protection_roo... )\nInstead of playing you an ad, they disabled a function of your computer.\n \nreply",
      "There was a post on here that I responded to and can't find now. The purpose was a gentleman talking about how music today is generic crap because of streaming.I disagreed with everything he said (he claims music is bland now because of streaming and just sort of ignores that for all of history most art produced is terrible) except the attraction of physical media. When you had to go through a process to be able to listen to media and you were stuck with it once you bought it, it was a real experience. The art, the feel, the smell of the record shop, hell you had to talk to actual people if you wanted to find new music that you would like. Everything was part of the experience.And that is lost with streaming music.\n \nreply",
      "> The medium asks you to use it to create an experience, an environment. Streaming doesn't care, so long as you're Consuming Content.I think you\u2019re being a bit too charitable with the record industry IMHO. Buying records is \u201cConsuming Content\u201d, the experience is of your own creation.\n \nreply",
      "This a neat project and an impressive collection. I\u2019m curious, if shes hosting streaming listening party shows is she obligated to pay royalties?\n \nreply",
      "I had some music playing in the background while testing a Youtube livestream  for the first time. Nobody was connected, I was working on camera settings. Google shut it down within a few minutes and bitched at me about a copyright violation. That was the last time I used Youtube.\n \nreply",
      "> That was the last time I used Youtube.Problem's bigger than Youtube.\n \nreply",
      "Yes, the main issue is platforms : avoid them :https://framablog.org/2023/12/26/give-the-gift-of-free-softw...\n \nreply"
    ],
    "link": "https://www.washingtonpost.com/style/2025/01/18/vinyl-albums-grief-music-healing/",
    "first_paragraph": ""
  },
  {
    "title": "Snowdrop OS \u2013 a homebrew operating system from scratch, in assembly language (sebastianmihai.com)",
    "points": 175,
    "submitter": "ksec",
    "submit_time": "2025-01-24T16:40:11 1737736811",
    "num_comments": 36,
    "comments_url": "https://news.ycombinator.com/item?id=42814820",
    "comments": [
      "Related. Others?Homebrew an OS from Scratch? Snowdrop Shows How It's Done - https://news.ycombinator.com/item?id=39005640 - Jan 2024 (1 comment)Snowdrop OS \u2013 a homebrew operating system from scratch, in assembly language - https://news.ycombinator.com/item?id=28090574 - Aug 2021 (3 comments)\n \nreply",
      "I did the same in the mid-90s but for a 32-bit hobby GUI OS. This book was absolutely essential reading:https://www.amazon.com/Developing-32-Bit-Operating-System-Cd...\n \nreply",
      "To anyone who's interested in such projects: also check MenuetOS and KolibriOS (which is a fork of Menuet that diverged a looong time ago). MenuetOS also has a x64 version with SMP which is closed source.\n \nreply",
      "also TempleOS if you'd prefer something more insane\n \nreply",
      "I watched a few Terry's streams and TempleOS seems to be something pretty fluid to use. You literally navigate in the console, or whatever it is called, and can open any file the current cursor points to.\n \nreply",
      "I was coming to the comments to write this reminds me of Terry Davis, may be rest in peace. It might sound strange but Terry provided me with inspiration and a reminder that anything can be created or \u201cWilled into existence\u201d.\n \nreply",
      "Holy C, no less\n \nreply",
      "Holy C is hard to code without crashing Adam. If you type the wrong kind of indirection, the whole OS freezes.\n \nreply",
      "ZealOS is TempleOS but with support for some modern functionality, however this detracts from the proper TempleOS experience\n \nreply",
      "In a similar spirit, what are some progresses in performant RTOSes for robotics?  There seems to be relatively less interest in that field.No, ROS/ROS2 is not an operating system and is not what most people call performant software.\n \nreply"
    ],
    "link": "http://sebastianmihai.com/snowdrop/",
    "first_paragraph": ""
  },
  {
    "title": "Subpixel Snake [video] (youtube.com)",
    "points": 187,
    "submitter": "codetrotter",
    "submit_time": "2025-01-24T17:21:44 1737739304",
    "num_comments": 39,
    "comments_url": "https://news.ycombinator.com/item?id=42815288",
    "comments": [
      "As an obsessive arcade retro-gamer who custom built a high-end emulation cabinet with a 27-inch quad-sync analog RGB CRT - I approve of this video! As soon as he described running into the green pixels problem, I knew he was going to learn something interesting. Sub-pixel structure, phosphor chromaticity, etc are such a fun rabbit hole to dive down. And it's still highly relevant in today's OLED, QLED, etc displays.Also, a tip for when you play classic arcade or console retro games from the 80s and 90s: they will look much better (and be more authentic) if you play on a CRT - or, if playing via emulation, just turn on a CRT emulation pixel shader (CRT Royale is good). These pixels are art which the original devs and artists intentionally hand-crafted to use the way CRTs blend colors and scanlines anti-alias naturally. You deserve to see them as they were intended to be seen. Just look at what you've been missing: https://i.redd.it/9fmozdvt6vya1.jpg\n \nreply",
      "I\u2019m a fan of authentic retro hardware. That sounds like an awesome cabinet, I would love to spend hours and pockets full of quarters playing on it.This post caused me to go down a rabbit hole about CRT simulation.Looks like it is a thing.https://github.com/blurbusters/crt-beam-simulator\n \nreply",
      "> That sounds like an awesome cabinetWhy, yes! Yes it is. :-)If it sounds good, you should consider one of your own. My goal was not the retro nostalgia of my recreating my parent's shitty 1970s living room TV but instead creating a cabinet that would allow me to explore these games each in their authentically correct resolution and frame rate and at the maximum quality and fidelity possible. That's why I chose an analog RGB monitor and the last, fastest GPU ever made with a native analog RGB signal path (R9 380X). I run a special version of the MAME emulator called GroovyMAME made just enable technically correct native display via analog signals on a CRT. http://forum.arcadecontrols.com/index.php/board,52.0.htmlI created this cabinet over ten years ago, before emulation pixel shaders were a thing. If you don't want to go to the effort, expense and time of acquiring and calibrating a high-end CRT, good pixel shaders can now get you >98% of the way there much easier and cheaper.\n \nreply",
      "I'm pretty sure those are similar, but different, images.Having grown up with CRTs, very few games look \"better\" on them; mostly games that used interlacing to create flashing effects. (Edit: Forgot that light guns need CRTs due to timing.)Otherwise, CRTs are like vinyl: Some people will invent all kinds of reasons why they are better, but in practice, they aren't.\n \nreply",
      "The argument isn\u2019t \u201cCRTs are better\u201d. You\u2019re right \u2014 they\u2019re not. The argument is that pixel art from that era was designed around the specific limitations of CRTs, and takes advantage of the specific way that CRTs would mess with the pixels.This is similar to what happened with electric guitars \u2014 you can make cheap amps with barely any distortion these days, but that sucks horribly for playing music composed around the presence of distortion. E.g. amp distortion tends to add a bunch of harmonic content that makes major/minor triads sound pretty bad, which is why power chords are popular. On the other hand, power chords sound pretty terrible without distortion, because they need that extra harmonic content to sound good!\n \nreply",
      "nice points. the parallel with guitar really made it click for me thx =) makes total sense!\n \nreply",
      "the vinyl comparison doesn't hold because music isn't composed on vinyl. saying vinyl is better is like saying jpeg images are better than png or something.. its the storage format/medium. it does impact the sound, but not the way people composed afaik.the crts were used as the medium to compose the thing on for these artists. they saw their art come to life on them and found ways to optimise for that.\n \nreply",
      "I agree with you about vinyl but I think you're misunderstanding my point about CRTs. I'm not claiming CRTs are inherently \"better\" either technically or aesthetically. In general, they're not. I'm not like some audiophiles who argue vinyl, tube amplification and \"magic copper\" cables are better - denying both signal theory (Nyquist et al) and objective data (double blind A/B/X tests). Modern digital formats and devices are almost always better overall. The cases where they aren't are rare, very specific and, even then, 'better-ness' is only in certain ways and not others.My background is in video engineering and the point I'm making here is very specific. It only applies to hand-crafted retro game pixel art created in the CRT era. And my point isn't even about CRTs! It's about how the RS-170A composite video standard that CRTs used encodes color. The \"A\" in RS-170A added color to the existing black and white television standard while remaining compatible with old B&W TVs. It was sort of a clever analog-era compression hack. I'll skip the technical details and history here (but both are fascinating) and simplify the takeaway. Broadly speaking, in digital representations of composite video color encoding, the correct color of a pixel can only be known relative to the current phase of the pixel clock and the pixels adjacent to it. Sometimes it's a fairly subtle difference but other times it can change a pixel from blue to red.To be clear, this wasn't \"better\" in any way (other than allowing optional color). The \"hack\" of encoding chroma information at half the frequency of luma and only in relation to a sub-carrier frequency came with trade-offs like chroma fringing on high frequency edges, ringing and other spurious artifacts. However, it was the only video we had and video game creators of the 80s & 90s used the tech they had to create the best images they could. For example, we would put a pixel of a certain color next to a pixel of another color to intentionally change the color of the second pixel (and NOT just due to blurring the two together, it literally decoded to a different third color). I did this myself in the 1980s, intentionally positioning a white pixel next to a black pixel on an even numbered column so they would show as a single red pixel on the screen. Using this encoding technique, I could display 9 different colors from a computer that only had two bits per pixel. That's why just displaying a naive RGB output of the game isn't properly decoding a signal that was hand-encoded to have more and different data than what's in the naive RGB.So I recommend using a CRT shader not because it emulates a glass tube with phosphors but because it includes the decoding logic to correctly display the original encoded content. Personally, I never use the shaders that add noise, blurring, cross-talk or other degradation. That would be as dumb as adding the pops and click of a dirty vinyl LP to a pristine signal. That would make it less accurate. My goal as an engineer is to be more accurate. It's fine if adding spurious crap tickles somebody's nostalgia bone from when they were a kid - but I'd never do that. I want to to see the original pixels and colors the artists saw and intended their audiences to see. That requires properly decoding the signal. And the example I posted demonstrates just how different an image can appear when properly decoded.\n \nreply",
      ">It was sort of a clever analog-era compression hack.Also known as technical debt around these parts. The repercussions of that clever hack are still being dealt with to this day. I've spent a good deal of my career specializing in proper handling of video sources that are painful to deal with all because of this clever hack.color burst, front porch, 1.001, ugh!!!!\n \nreply",
      "I feel your pain. :-)I've gone back and read through some of the committee reports when they were deliberating about this and... all I can say is, the more I understand about how composite color video really works - the more amazed I am that it works at all.And to be fair. It's not like they didn't know there were better ways. There were lots of proposals to do YUV, RGB and other kinds of encoding but backward compatibility with B&W TVs and staying within a 6 Mhz channel were political mandates from on high.\n \nreply"
    ],
    "link": "https://www.youtube.com/watch?v=iDwganLjpW0",
    "first_paragraph": ""
  },
  {
    "title": "The hidden complexity of scaling WebSockets (composehq.com)",
    "points": 54,
    "submitter": "atul-jalan",
    "submit_time": "2025-01-24T19:48:51 1737748131",
    "num_comments": 16,
    "comments_url": "https://news.ycombinator.com/item?id=42816359",
    "comments": [
      "This is all true, but it also serves to remind us that Rails gives developers so much out of the box, even if you're not aware of it.ActionCable is Rails' WebSockets wrapper library, and it addresses basically every pain point in the post. However, it does so in a way that all Rails developers are using the same battle-tested solution. There's no need for every project to hack together its own proprietary approach.Thundering herds, heartbeat monitoring are both covered.If you need a messaging schema, I strongly recommend that you check out CableReady. It's a powerful library for triggering outcomes on the client. It ships with a large set of operations, but adding custom operations is trivial.https://cableready.stimulusreflex.com/hello-world/While both ActionCable and CableReady are Rails libraries, other frameworks would score huge wins if they adopted their client libraries.\n \nreply",
      "Elixir\u2019s lightweight processes are also a good fit. Though I\u2019ve seen some benchmarks that claim that goroutines can hit even lower overhead per connection.\n \nreply",
      "Node has similar libraries like Socket.IO too, but it over-abstracts it a bit in my opinion.\n \nreply",
      "I've done my share of building websocket servers from scratch, but when you don't use libraries like ActiveCable or socket.io, you have to build your own MessageID reconciliation so that you can have request/response cycles. Which is generally what you want (or eventually want) in a websocket-heavy application.    send(payload).then(reply => ...)\n \nreply",
      "Yep, for our application, we have an `executionId` that is sent in essentially every single WebSocket message.But client and server use it to maintain a record of events.\n \nreply",
      "Or just use jsonrpc.\n \nreply",
      "???That solves none of the issues outlined in the post or the comments.\n \nreply",
      "The key to managing this complexity is to avoid mixing transport-level state with application-level state. The same approach for scaling HTTP requests also works for scaling WebSocket connections:* Read, write and track all application-level state in a persistent data store.* Identify sessions with a session token so that application-level sessions can span multiple WebSocket connections.It's a lot easier to do this if your application-level protocol consists of a single discrete request and response (a la RPC). But you can also handle unidirectional/bidirectional streaming, as long as the stream states are tracked in your data store and on the client side.\n \nreply",
      "Functional core, imperative shell makes testing and this fast iteration a lot easier. It\u2019s best if your business logic knows very little about transport mechanisms.I think part of the problem is that early systems wanted to eagerly process requests while they are still coming in. But in a system getting 100s of requests per second you get better concurrency if you wait for entire payloads before you waste cache lines on attempting to make forward progress on incomplete data. Which means you can divorce the concept of a payload entirely from how you acquired it.\n \nreply",
      "Currently another thread is going[1] which advocates very similar things, in order to reduce complexity when dealing with distributed systems.Then again, the frontend and backend are a distributed system, so not that weird one comes to similar conclusions.[1]: https://news.ycombinator.com/item?id=42813049 Every System is a Log: Avoiding coordination in distributed applications\n \nreply"
    ],
    "link": "https://composehq.com/blog/scaling-websockets-1-23-25",
    "first_paragraph": "Atul JalanPublished in Dev Journal4 min readJan 17, 2025With the rising demand for sync engines and real-time feature, WebSockets have become a critical component for modern applications. At Compose, WebSockets form the backbone of our service, powering our backend SDKs that enable developers to deliver low-latency interactive applications with just backend code.But, scaling WebSockets has proven to be far more complex than we expected. Below are some of the most important lessons we've learned along the way.Spin up new servers.Once the new servers are healthy, old servers begin returning 503 Service Unavailable responses to health checks.After 4 consecutive 503 responses, the load balancer declares the server unhealthy and removes the old servers from the pool. The load balancer health checks every 5 seconds, so this process takes up to 25 seconds.The custom close message lets clients show users a more accurate message during the ~10 second period where the client is disconnected.The "
  },
  {
    "title": "You could have invented Fenwick trees (cambridge.org)",
    "points": 5,
    "submitter": "matt_d",
    "submit_time": "2025-01-25T00:23:34 1737764614",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.cambridge.org/core/journals/journal-of-functional-programming/article/you-could-have-invented-fenwick-trees/B4628279D4E54229CED97249E96F721D",
    "first_paragraph": "We use cookies to distinguish you from other users and to provide you with a better experience on our websites. Close this message to accept cookies or find out how to manage your cookie settings.Menu links\n      Published online by Cambridge University Press:\u00a0\n      17 January 2025Fenwick trees, also known as binary indexed trees are a clever solution to the problem of maintaining a sequence of values while allowing both updates and range queries in sublinear time. Their implementation is concise and efficient\u2014but also somewhat baffling, consisting largely of nonobvious bitwise operations on indices. We begin with segment trees, a much more straightforward, easy-to-verify, purely functional solution to the problem, and use equational reasoning to explain the implementation of Fenwick trees as an optimized variant, making use of a Haskell EDSL for operations on infinite two\u2019s complement binary numbers. Suppose we have a sequence of n integers \n\n\n\n$a_1, a_2, \\ldots, a_n$\n\n\n and want to "
  },
  {
    "title": "'Never seen anything like this' \u2013 NIH meetings and travel halted abruptly (nature.com)",
    "points": 116,
    "submitter": "anigbrowl",
    "submit_time": "2025-01-24T23:21:25 1737760885",
    "num_comments": 47,
    "comments_url": "https://news.ycombinator.com/item?id=42817910",
    "comments": [
      "My partner is trying to start a career in intensive care research and submitted for a major NIH grant a few months ago that was given a high score (= would probably be funded). Because of the \u201cpause\u201d we\u2019re now unsure if it will get funded at all. These things take months of prep (years if you consider all of the prior publication work) and if you miss your window it could just sink your career before it gets started.Anyone doing medical research can easily make more money as a clinician in private practice. If we force these people out, it\u2019s the taxpayers loss. Unless you believe medical research as a whole is a waste of money, which\u2026 I would disagree on. If it\u2019s simply a matter of changing research priorities, there are already mechanisms to influence that without shutting down the whole system. This is just ham-handed incompetence as a show of force.\n \nreply",
      "My partner works in a cancer clinic at a major university hospital. The staff is terrified of what is to come and this looks like the first domino. Without research grants a critical stepping stone in medicals careers will go missing, along with research into new medicine and treatments. Relying on pharmaceutical companies to take on this research doesn't make sense - a lot of research isn't even about treatment but managing side affects, improving quality of life, testing existing medicines, etc. Very concerned for what will happen here.\n \nreply",
      "My friends in Bio are actively being recruited by \"Europe in general\", and the big pitch is that there aren't any Republicans or school shootings.  America has no answer to that.Of course it works.  Every young couple considers the deal.\n \nreply",
      "Cancer research anywhere is cancer research everywhere\n \nreply",
      "Have they seen European salaries?\n \nreply",
      "The salary for work in the US is $0.00 if NIH grants don\u2019t get approved.",
      "Fundamental research, famously the place for the big bux!",
      "the american counteroffer sounds like zero and declining quality of living tho\n \nreply",
      "Adding to that \u2014 the mission of academic research centers is to train the next generation of researchers.  PIs use this money to fund grad student and postdoc positions in their labs.\n \nreply",
      "[flagged]"
    ],
    "link": "https://www.nature.com/articles/d41586-025-00231-y",
    "first_paragraph": "Thank you for visiting nature.com. You are using a browser version with limited support for CSS. To obtain\n            the best experience, we recommend you use a more up to date browser (or turn off compatibility mode in\n            Internet Explorer). In the meantime, to ensure continued support, we are displaying the site without styles\n            and JavaScript.AdvertisementYou can also search for this author in PubMed\n\u00a0Google Scholar\nA vaccine research centre on the campus of the National Institutes of Health in Bethesda, Maryland.Credit: AlamyConfusion and anxiety is rippling through the US health-research community this week following Donald Trump taking office as the 47th US president. His administration has abruptly cancelled research-grant reviews, travel and trainings for scientists inside and outside the National Institutes of Health (NIH), the world\u2019s largest public biomedical funder. Adding to the worry: the Trump team appears to have deleted entire webpages about divers"
  },
  {
    "title": "How to Visualize Your Python Project's Dependency Graph (gauge.sh)",
    "points": 11,
    "submitter": "the1024",
    "submit_time": "2025-01-21T16:49:01 1737478141",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=42782242",
    "comments": [
      "One feature here is visualizing module dependencies. What is the best way to show the class structure? Meaning both show how a class subclasses others, and how a class uses some other class objects inside it.\n \nreply",
      "looks cool. do you have any case studies of people using this for big refactors?\n \nreply"
    ],
    "link": "https://www.gauge.sh/blog/how-to-visualize-your-python-projects-dependency-graph",
    "first_paragraph": "Understanding your project\u2019s dependency graph is important for a number of reasons:With Tach, you can easily visualize the set of dependencies that exist within your Python project. \u00a0Here\u2019s how:> pip install tachThe first step is straightforward - install Tach and make sure you\u2019re on the latest version.> tach modNext, we need to define the modules within your project that we want to visualize dependencies between. The tach mod command opens up an editor in which you can mark modules and your Python source root. Here are the commands you need:We\u2019ll use the FastAPI repo as an example. Here\u2019s what this looks like for FastAPI before saving:In order to correctly visualize your existing dependencies, Tach will crawl the Python AST to figure out which modules import from each other. This can be achieved by running:> tach syncHere\u2019s a slice of what Tach found for the above configuration:The final step is the simplest. Simply run tach show --web, and click on the generated URL to view your depe"
  },
  {
    "title": "A very Chicago gamble (bitsaboutmoney.com)",
    "points": 95,
    "submitter": "gregorymichael",
    "submit_time": "2025-01-24T19:56:31 1737748591",
    "num_comments": 43,
    "comments_url": "https://news.ycombinator.com/item?id=42816418",
    "comments": [
      "I've seen worse deals offered in prospectuses. But not often.Having two tiers of stock with the insiders having the control shares used to be prohibited by the New York Stock Exchange. Now it's common. Google and Facebook are set up that way, so they have presidents for life. So are some lesser companies which really need to fire the CEO but can't.Then, what you're buying into is not the operating entity. It's just a holding company. Not even the parent holding company that owns many casinos; that's BALY. It's a holding company in the middle, one whose returns are totally determined by the other parts of the stack. This is much like film investing, where you can buy an interest in \"Silver Screen Partners IV\" and get a share of the profits from a specific film. Except that the studio and the film producer control the accounting between related entities. Those deals are generally a lose, although you get to go to the premier and meet the cast.And then there's the leverage. When you buy in, you're under water, and may stay there. Can't speak to the tax consequences.This is so awful it makes meme coins look good.(Favorite worst deals: 1) being pitched on municipal bonds backed only by revenue from future sewer charges for a development not yet built, and which never was. Junk municipal bonds are a thing. 2) a San Francisco strip club that did an IPO in the first dot-com boom and went bust. SEC CIK 931799.)\n \nreply",
      "One thing I don\u2019t get about Hollywood accounting is how do they manage to get credible people/companies to sign off on their books year after year\u2026?(Especially for those owned by listed companies)And how can the studios and various deal brokers apparently act as if GAAP, FASB, and the SEC don\u2019t exist.\n \nreply",
      "This was an aside at the end of the article, but what an interesting strategy:I bought the stock for the same reason I buy stock in every hotel, airline, bank, and similar I use: in the unlikely event a not-particularly-high-stakes poker player has a routine customer service complaint, Investor Relations is available as an escalation strategy, over e.g. hotel staff who might be long-since inured to listening to complaints from people who lost money in a casino.\n \nreply",
      "I'm sure this works if you're buying a couple thousand shares at a time but I don't think buying 10 shares of Southwest is going to make them listen to you any more or less when you have an issue on your flight.\n \nreply",
      "It doesn't matter whether they actually value you any more. The point is that investor relations is staffed by competent people, as opposed to customer service which is staffed by incompetent people as an intentional matter of efficient human capital allocation. So you can get much more reliable help if you can present the right class signals, and if you are at least theoretically allowed to call that line.\n \nreply",
      "Do you think they're going to ask for proof and how many shares you own? Anyone can claim to be an \"investor.\"\n \nreply",
      "Have done this twice recently. Did not own shares in either company outside of likely ownership in 401ks or index funds. They don\u2019t check. Ridiculously effective.\n \nreply",
      "I think the idea is to take advantage of certain legal obligations that are triggered by ownership of any size.\n \nreply",
      "Could you give some examples? I have no idea what legal differences would provide a benefit during customer interactions.\n \nreply",
      "They literally have no computer system that can tell them the difference between you and a hedge fund manager, and so an email to IR fairly reliably gets the white glove treatment. I used to send them on behalf of, cliched but accurately, Kansan pensioners to banks, in at least one case justified by \u201cI am a shareholder because my IRA holds SPY, which holds your common. It was therefore with great displeasure that\u2026\u201d(Obviously one can still email IR without actually owning a share, but I both prefer not lying and also enjoy the aesthetics of capitalism, which are extremely invested\u2014ba dum bum\u2014in seeing someone who owns one share as a shareholder.)Anyhow: bored person, near top of org chart, with access to escalation group if that exists, who earns six figures and really wants you to come away from the experience satisfied. Exists in almost every publicly traded company in America.\n \nreply"
    ],
    "link": "https://www.bitsaboutmoney.com/archive/chicago-casino-investment-offering/",
    "first_paragraph": "This column doesn\u2019t offer investment advice, as I am not a registered investment advisor. This is not merely a mandatory disclaimer; this is a warning. We will discuss some specific securities below that I am not merely incapable of recommending.Finance performs a strange alchemy, teleporting value through time and space. Ordinarily, Bits about Money focuses more on the plumbing of it than the deals. But a deal enthusiast who goes by The Conservative Income Investor recently flagged a capital raise to me. It has everything: echoes of the culture that is the American PMC 2020-2024, complex financial structuring, a novel web application to move money, a crypto company in the background, and municipal politics. So it seems squarely within this column\u2019s beat.The municipality happens to be Chicago, my hometown and (after a 20 year stint in Japan) current residence. And so I feel some sense of civic duty, as a Chicagoan, taxpayer, and reasonably financially sophisticated person, to say the f"
  },
  {
    "title": "The past, present, and future of UI at GitHub (hawksley.org)",
    "points": 76,
    "submitter": "mooreds",
    "submit_time": "2025-01-24T21:38:05 1737754685",
    "num_comments": 58,
    "comments_url": "https://news.ycombinator.com/item?id=42817163",
    "comments": [
      "> According to Pew Research https://www.pewresearch.org/internet/fact-sheet/mobile/ 15 percent of U.S. adults only access the internet through a mobile device.That number seemed surprising to me - I actually expected the portion of mobile-only internet users would be significantly higher than that.Turns out the 15% number means something slightly different. From that Pew Research page:\"Today, 15% of U.S. adults are \u201csmartphone-only\u201d internet users \u2013 meaning they own a smartphone but say they do not subscribe to a home broadband service.\"So the 15% is people who use the internet exclusively via LTE/5G without paying for home broadband.(I'm surprised that number isn't higher as well.)\n \nreply",
      "There\u2019s no small irony that this isn\u2019t age doesn\u2019t render correctly on Safari on iPhone. All the text wraps off the right edge of the phone.  -_-\n \nreply",
      "No kidding! This is my first time experimenting with converting Keynote slides into HTML, so I'm not surprised it didn't go perfectly. I just pushed a quick fix for the overflow issue but should probably figure out a longer-term solution.\n \nreply",
      "I would guess that the number is pulled down significantly by streaming services and a lot of home broadband connections are 95% TV service, and wifi connections for phones at home is just a bonus.\n \nreply",
      "> So the 15% is people who use the internet exclusively via LTE/5G without paying for home broadband.Does that factor in people \u201cborrowing\u201d their neighbors WiFi?\n \nreply",
      "I am curious to understand what bearing \"lots and lots of regular people solely use their cellphone to conduct consumer transactions\" has on GitHub, whose audience is significantly different than median and cannot otherwise function without a laptop/desktop.\n \nreply",
      "I don't know but I really wish it was possible to have the web desktop in mobile, GitHub has a terrible app that can't do anything and even worse mobile view. In the past it was possible to tell it to run the desktop version of the website with the browser setting but this isn't possible anymore. I have a very big phone, it's screen has a ton of pixels, just give me a grown up UI exactly like the desktop instead of the dumbed down, way too zoomed in whatever thing you are offering on mobile.\n \nreply",
      "It's very possible. Firefox for Android has a \"Desktop site\" switch in each tab's menu that works fine, including for GitHub.\n \nreply",
      "Chrome does too\n \nreply",
      "Safari as well\n \nreply"
    ],
    "link": "https://hawksley.org/2025/01/08/past-present-future-of-UI-at-github.html",
    "first_paragraph": "Slides from my 2025 talk, as presented at Boulder Ruby. I also presented a variant of this talk at Vancouver Ruby."
  },
  {
    "title": "New Book-Sorting Algorithm Almost Reaches Perfection (quantamagazine.org)",
    "points": 166,
    "submitter": "isaacfrond",
    "submit_time": "2025-01-24T15:50:23 1737733823",
    "num_comments": 36,
    "comments_url": "https://news.ycombinator.com/item?id=42814275",
    "comments": [
      "\"Kuszmaul remembers being surprised that a tool normally used to ensure privacy could confer other benefits.\"It was surprising to me too! But reflecting on it more closely, most performance isn't about \"faster\" in a literal sense of \"more instructions run per time\", but about carefully choosing how to do less work. The security property here being \"history independence\" is also in a way stating \"we don't need to, and literally cannot, do any work that tracks history\".It's definitely an interesting approach to performance, essentially using cryptography as a contraint to prevent more work. What properties do we need, and what properties can we ignore? The question becomes if we MUST ignore this property cryptographically, how does that affect the process and the related performance?It certainly feels like it may be a useful perspective, a rigorous approach to performance that may be a path to more improvements in key cases.\n \nreply",
      "That's a good insight. I had always thought the key to good algorithm / data structure design was to use all the information present in the data set. For example, if you know a list is sorted, you can use binary sort. But perhaps choosing how much of it to omit is key, too. It comes up less often, however. I can't think of a simple example.\n \nreply",
      "> But perhaps choosing how much of it to omit is key, too. It comes up less often, however. I can't think of a simple example.An example of that is a linked list with no particular sort order. By not caring about maintaining an order the insertion appends or preprends a node and is O(1).As soon as you have to maintain any additional invariant, the insertion cost goes up. Either directly or amortized.\n \nreply",
      "So it's basically a matter of figuring out what problem context can and should be selectively hidden from the algorithm in order to make it work 'smarter' and not 'harder.' Weird.\n \nreply",
      "The actual better algorithm does use history dependence though. So I found this part of the article misleading.\n \nreply",
      "I was actually just looking at this problem last week, when I realized I needed to keep items in a database table positioned arbitrarily, ideally without needing to manipulate the rest of the list. So if a user adds in a new element after element 5, that element becomes 6, without needing to update the original item that came after element 5. There are indeed very sophisticated algorithms to manage this problem and minimize theoretical bounds. But it also seemed like the simplest solution for this particular version of the problem is to just use fractional amounts, and occasionally pay a penalty to relayout the list.\n \nreply",
      "Wikipedia has a section on this algorithm under exponential labels: https://en.m.wikipedia.org/wiki/List-labeling_problemBasically it works as long as your label space is large compared to the number of items. The more sophisticated methods are necessary when that isn\u2019t the case. For example, say you have 4 bytes for the label and 1 billion items.\n \nreply",
      "This sort of problem also occurs when you're trying to do CRDTs, which can roughly be described also as \"design something that does Git better.\"So e.g. to frame this, one approach to a CRDT is to just treat the document as a list of facts, \"line 1 is 'foo', line 2 is 'bar'\", and each fact has a number of times it has been asserted, and to \"merge\" you just add together the assertion counts, and then you can detect conflicts when a fact has been asserted more than once or fewer than zero times. So a patch says \"change line 2 to 'baz'\", this becomes \"unassert that line 2 is 'bar', assert that line 2 is 'baz'\" and it conflicts with a patch that says \"change line 2 to 'quux'\" because the fact \"line 2 is 'bar'\" has an assertion count of -1.But anyway, in this context you might want to allow inserting lines, and then you have the list-labeling problem, you don't want the patch to unassert lines 4,5,6 just to insert a new line after line 3. So then an obvious thing is to just use a broader conception of numbers, say \"line 3.5 is <X>\" when you insert, and then we hide the line numbers from the user anyways, they don't need to know that internally the line numbers of the 7 lines go \"1, 2, 3, 3.5, 4, 5, 6\".So then you need a relabeling step because you eventually have some line at 3.198246315 and you want to be able to say \"yeah, that's actually line 27, let's have some sanity again in this thing.\"This also maybe hints at the fun of adding randomization, consider that one person might add line 3.5, then add line 3.75, and then remove line 3.5; meanwhile someone else might add a different line 3.5, add a line 3.25, and then remove their line 3.5, and these patches would both amount to \"assert line 3.25 is A, assert line 3.75 is B\", and would merge without conflict. This means that in general if two people are messing with the same part of the same document asynchronously, this model is not able to consistently flag a merge failure in that case, but will sometimes instead just randomly order the lines that were added.We can then just make that a feature rather than a fault: you don't insert at 3.5, which is 3 + (4 - 3) / 2, rather you insert at 3 + (4 \u2014 3) * rand(). And then when two people both try to insert 12 lines between line 3 and 4 independently, when you merge them together, you get 24 lines from both, in their original orders but interleaved randomly, and like that's not the end of the world, it might be legitimately better than just declaring a merge failure and harrumphing at the user.\n \nreply",
      "Ha, I had this exact problem asked as an interview question.IIRC their real life solution was to leave gaps between elements (eg index 0, 100, 200\u2026 instead of 0, 1, 2) and re index when needed. Probably works well enough, what I came up with is (as you say) the idea of fractional indexing, but dealing with decimals is a pain so you can instead represent them as vectors, which you can just represent as a string of numbers that you sort lexicographically.So an element inserted between elements 1 and 2 gets an index 11 (anything between 11-19 is fine). Between 1 and 11 is 101. Between 11 and 2 is 12 (or anything between 12-19). Note that these indexes are not numbers, they\u2019re string that are compared lexicographically.I\u2019m sure there\u2019s downsides, eg it takes a lot more memory to sort these indexes (strings are much larger than numbers). It feels a bit too smart to not have unexpected downsides.\n \nreply",
      "> solution was to leave gaps between elements (eg index 0, 100, 200\u2026 instead of 0, 1, 2)Reminds me of my days writing BASIC programs.\n \nreply"
    ],
    "link": "https://www.quantamagazine.org/new-book-sorting-algorithm-almost-reaches-perfection-20250124/",
    "first_paragraph": "\nAn editorially independent publication supported by the Simons Foundation.\n\nGet the latest news delivered to your inbox.\nCreate a reading list by clicking the Read Later icon next to the articles you wish to save.Type search term(s) and press enterPopular\n                                    SearchesJanuary 24, 2025Kristina Armitage/Quanta MagazineContributing WriterJanuary 24, 2025Computer scientists often deal with abstract problems that are hard to comprehend, but an exciting new algorithm matters to anyone who owns books and at least one shelf. The algorithm addresses something called the library sorting problem (more formally, the \u201clist labeling\u201d problem). The challenge is to devise a strategy for organizing books in some kind of sorted order \u2014 alphabetically, for instance \u2014 that minimizes how long it takes to place a new book on the shelf.Imagine, for example, that you keep your books clumped together, leaving empty space on the far right of the shelf. Then, if you add a book by "
  },
  {
    "title": "Nuclear Proliferation and the \"Nth Country Experiment\" (gwu.edu)",
    "points": 18,
    "submitter": "nabla9",
    "submit_time": "2025-01-24T22:24:08 1737757448",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://nsarchive.gwu.edu/briefing-book/nuclear-vault/2025-01-23/nuclear-proliferation-and-nth-country-experiment",
    "first_paragraph": "\u201cDo-it-yourself\u201d Project Produced \u201cCredible Nuclear Weapon\u201d Design from Open SourcesExperimenters Developed a Plutonium Weapon Design with Potential for High Explosive YieldEdited by William BurrFor more information, contact:202-994-7000 or\u00a0nsarchiv@gwu.eduCartoon by Dave Moynihan used in \u201cNth Country Postshot Report.\u201d (Document 3)\u00a0Illustration from \u201cNth Country Postshot Report.\u201d (Document 3)\u00a0Photo of David A. Dobson, one of the post-graduate participants in Livermore Laboratory\u2019s Nth Country Experiment.\u00a0(From Daniel Stober, \u201cNo Experience Necessary,\u201d The Bulletin of the Atomic Scientists\u00a059 (2003), p. 59)\u00a0Photo from the 1970s of Robert W. Selden, one of the post-graduate participants in Livermore Laboratory\u2019s\u00a0Nth Country Experiment. (Photo country of Lawrence Livermore National Laboratory)\u00a0Photo from the 1980s of Livermore weapons designer W. James Frank, editor of the \u201cSummary Report of the Nth Country Experiment\u201d (Document 1). (Photo country of Lawrence Livermore National Laboratory"
  }
]