[
  {
    "title": "Llama3 implemented from scratch (github.com/naklecha)",
    "points": 348,
    "submitter": "Hadi7546",
    "submit_time": "2024-05-19T18:42:06",
    "num_comments": 87,
    "comments_url": "https://news.ycombinator.com/item?id=40408880",
    "comments": [
      "If you like this, it's also worth looking at llama2.c[1], an implementation of the Llama 2 architecture in about 1000 lines of plain, dependency-free C, tokenizer and all. THe fact that this 960-line file and a somewhat modern C compiler is all you really need to run a state-of-the-art language model is really surprising to many.Of course, this is not all there is to a modern LLM, it would probably take another thousand lines or two to implement training, and many more than that to make it fast on all the major CPU and GPU architectures. If you want a flexible framework that lets a developer define any model you want and still goes as fast as it can, the complexity spirals.Most programmers have an intuition that duplicating a large software project from scratch, like Linux or Chromium for example, would require incredible amounts of expertise, manpower and time. It's not something that a small team can achieve in a few months. You're limited by talent, not hardware.LLMs are very different. THe code isn't that complicated, you could probably implement training and inference for a single model architecture, from scratch, on a single kind of GPU, with reasonable performance, as an individual with a background in programming and who still remembers their calculus and linear algebra, with a year or so of self study. What makes LLMs difficult is getting access to all the hardware to train them, getting the data, and being able to preprocess that data.",
      "One other thing to add is large-scale RLHF. Big Tech can pay literally hundreds of technically-sophisticated people throughout the world (e.g. college grads in developing countries) to improve LLM performance on all sorts of specific problems. It is not a viable way to get AGI, but it means your LLM can learn tons of useful tricks that real people might want, and helps avoid embarrassing \"mix broken glass into your baby formula\" mistakes. (Obviously it is not foolproof.)I suspect GPT-4's \"secret sauce\" in terms of edging out competitors is that OpenAI is better about managing data contractors than the other folks. Of course it's a haze of NDAs to learn specifics, and clearly the contractors are severely underpaid compared to OpenAI employees/executives. But a lone genius with a platinum credit card can't create a new world-class LLM without help from others.",
      "Yes, this is the secret sauce and the moat. Not as easy as buying more compute with unlimited budget.\u2026 built on the back of a disposable workforce\u2026There is something grim and dystopian, thinking about the countless small hands feeding the machine.",
      "Links for llama2.c:https://github.com/karpathy/llama2.chttps://news.ycombinator.com/item?id=36838051",
      "And if you want to understand I'd recommend this post (gpt2 in 60 lines of numpy) and the post on attention it links to. The concepts are mostly identical to llama, just with a few minor architectural tweaks. https://jaykmody.com/blog/gpt-from-scratch/",
      "There's also a project where they have GPT-2 running off of an excel spreadsheet.https://arstechnica.com/information-technology/2024/03/once-...",
      "I feel like this ignores the complexity of the distributed training frameworks. The challenge is in making it fast at scale.",
      "I must say the creepy anime young girl in the readme is somewhat off putting.",
      "Interest to know why it is off putting.",
      "will not stand this anti-anya slander"
    ],
    "link": "https://github.com/naklecha/llama3-from-scratch",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously."
  },
  {
    "title": "The Lunacy of Artemis (idlewords.com)",
    "points": 56,
    "submitter": "feross",
    "submit_time": "2024-05-19T23:02:41",
    "num_comments": 14,
    "comments_url": "https://news.ycombinator.com/item?id=40410404",
    "comments": [
      "I think we all can understand the situation here unless people are really dense.. the Artemis program was setup at a time when the private space companies were still very new. SpaceX will soon be quite close to technically doing the entire mission themselves without Artemis at all. SpaceX took the money from NASA to help fund their Starship development and probably for other reasons as well. Net result is that by the time Starship can land on the Moon, they can basically do the entire mission without Artemis. So Artemis would be pointless.",
      "IDK why 81 year old Poli-sci major, attorney, and ultimate NASA executive decision maker Bill Nelson wasn't forced out of office after he incorrectly explained to Congress that the far side of the moon is always darkhttps://youtu.be/daZyPwCQak8?si=n9KXH-LJFBlpKXUp&t=153",
      "Relevant education and experience in aerospace fields is not important in Congress. Neither is factual correctness.Politics and rules lawyering are what matter in that space.",
      "Didn't Asimov write about half the moon being dark? TIL the \"far side of the moon\" is actually referred to as \"the dark side of the moon\". But yeah, it's funny/sad that nobody in the room seems to know anything.",
      "When we earthlings see a new moon, we see one dark side turned towards us, while another dark side is the far side; Moon is completely in the Earth's shadow.During a solar eclipse, the far side is brightly lit, while the side turned towards us is dark.Most of the time the dark side does not match the far or the near side, we see a part of both the dark and lit sides as a crescent.I don't see how \"the far side\" and \"the dark side\" can be used interchangeably in any situation.",
      "The fact that he is an astronaut because of a congressional junket is just perfect from a bad faith argument perspective.",
      "Probably because Congress isn't smart enough to realize his mistake.  Here's one of them worried that Guam might capsize https://www.youtube.com/watch?v=cesSRfXqS1Q&t=75s",
      "Finally someone is saying it like it is. Sadly this someone isn\u2019t a bigwig at NASA. NASA still can\u2019t take humans to/from orbit on its own. To believe that in 18 months we\u2019re going to have a successful lunar landing is batshit grade insanity.",
      "Why not, if NASA outsources 100% of the actual operations? Find reasonable contractors (for certain values of \"reasonable\" that would match SpaceX), give them attainable goals, provide the money, provide publicity, and otherwise stand back and do not interfere. For extra credit, provide some scientific mission spacecraft and rovers, the things NASA us actually quite good at.Key bureaucratic feat: keep Boeing away.18 months is really tight though, realistically it should be twice as much maybe.",
      "Up there with \"Fenimore Cooper's Literary Offenses.\""
    ],
    "link": "https://idlewords.com/2024/5/the_lunacy_of_artemis.htm",
    "first_paragraph": "The Lunacy of Artemis"
  },
  {
    "title": "Operation CHARM: Car repair manuals for everyone (charm.li)",
    "points": 102,
    "submitter": "sergiotapia",
    "submit_time": "2024-05-19T20:39:12",
    "num_comments": 27,
    "comments_url": "https://news.ycombinator.com/item?id=40409588",
    "comments": [
      "I often use this site for service info. It\u2019s all pirated from ALLDATA. Currently a comprehensive subscription to service info is around $180/mo. A modern repair shop can\u2019t function without service information.",
      "For something a little older (and a bit less organised), see https://www.oldcarmanualproject.com/That said, a lot of newer official service manuals don't really go into detail and just give instructions on how to disassemble and swap parts; better than no manual, but a huge contrast from older ones that would also include detailed theory of operation and troubleshooting information.",
      "Interesting project. Just curious: why does it stop at 2013? Are the manuals not available, is it a licensing issue or just a project frozen in 2013?",
      "manufacturers have all switched to online-only, subscription shop manuals that don't lend themselves to easy archiving to PDF.",
      "Going to be interesting if we ever get \u201cright to repair\u201d for vehicles for the factories to open that all up again.I have some CD filled with I guess downloads from a factory online manual. It\u2019s not the best experience to be sure.",
      "We have that right now, you just have to pay for it. https://www.oemonestop.com/",
      "The piece I like about this is less the manual about how to do the things\u2014although that's always helpful\u2014but the information about parts and labor.  I assume the cost of things is out of date, but it's nice to have some baseline for labor time.  Most folks (with ICE vehicles anyway) aren't doing most maintenance or repairs, so reducing the information asymmetry with various repair shops is a welcome tool.",
      "Or the classic Haynes manuals https://haynes.com/",
      "Seems to be US specific. Can't see manuals for the last 3 cars I've had: 2001 BMW 330d, 2010 BMW 330i, 2011 Ford C-Max petrol. Renault stops in 1987, Peugeot stops in 1993, and there's nothing for Citroen, Vauxhall or Rover/MG at all.(Realoem is pretty comprehensive for BMW parts numbers, if you need them)",
      "We\u2019re so lucky to have realoem. I was kind of shocked to find no equivalent for my late model GM vehicle."
    ],
    "link": "https://charm.li/",
    "first_paragraph": ""
  },
  {
    "title": "Coding My Handwriting (amygoodchild.com)",
    "points": 251,
    "submitter": "tobr",
    "submit_time": "2024-05-19T17:15:29",
    "num_comments": 17,
    "comments_url": "https://news.ycombinator.com/item?id=40408291",
    "comments": [
      "There is a very cool youtube video with something similar from Stuff Made Here:https://www.youtube.com/watch?v=cQO2XTP7QDwWas very fun to watch and he also explains the trials and errors, he did.There is also a link to a very interesting repository of handwriting synthesis: https://github.com/sjvasquez/handwriting-synthesis",
      "The art at the end is quite beautiful. I wonder if the next step is putting this into a real font so that you can type with it in any program...",
      "If you already have curves, you can do that quite easily (maybe tediously, if you have to/want to do it manually).",
      "I am really confused about the point of joining letters not matching up. The whole point of cursive to me is that you do not take your pen off the paper, so the way to join letters is built in. Author seems to have had issues because she\u2019s not actually writing that way?That said, I really enjoy the whole rest of this writeup for just being the simplest possible way you can go about drawing a bunch of letters on screen without messing with fonts :)",
      "The point, which the author discusses at length, seems to be that different letter pairs match up in different ways, which needs to be accounted for.",
      "No they don\u2019t. At least in my cursive writing. Line from end of last letter to beginning of next letter is always correct, since you don\u2019t take your pen off the paper. That\u2019s not different between the code and the reality.If your letters look wrong it\u2019s because you are starting them in the wrong place. Or because you take your pen off the paper. Letters either end in the bottom right or top right, and begin in the upper left. A straight line should always be correct.The issue with the a that looks like an e is because the author is trying to start writing her a on the left side of the character.",
      "Obviously the letters connect, but where a given letter ends depends on the following letter, and where a given letter starts depends on the previous letter.For example, in standard American cursive, b, o, v, and w have a top exit stroke, whereas the rest of the lowercase letters finish on the writing line. Combine this with the letter a, which has a top entry stroke, so the oa will join at the top, whereas ea will join from bottom to top.",
      "I don\u2019t see how this matters? They\u2019re splines right? Just quickly writing those down I see a very minor variation in how they connect, but ultimately that variance\u2019d be hardly noticable.Regardless, the end of the o or e, to the beginning of a is still a straight line.",
      "every pair of letters join in a different wayit's similar to kerning with even non-joining fonts, you need to encode how various sequences of letters appear",
      "Type nerd reading the first part of the article \"ugh oh my god the kerning oh ouch\"Nerd reading the whole article and looking at the crazy cool letter-form art at the end \"wowwww\".Worth reading the whole article just to look at what an artist is doing with her tools from start to finish!"
    ],
    "link": "https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript",
    "first_paragraph": "A familiar theme for me is dismissing an idea as being too much work and then later finding myself doing it anyway. That\u2019s what happened here."
  },
  {
    "title": "The War on Weeds (noemamag.com)",
    "points": 17,
    "submitter": "abscond",
    "submit_time": "2024-05-18T20:24:32",
    "num_comments": 6,
    "comments_url": "https://news.ycombinator.com/item?id=40401793",
    "comments": [
      "Here's what I want:- take a soil sample and put it in a cup, add solvent/water and shake- insert testing strip, or even drip into vials with reagents- compare color to back of the box to determine what adulterants are in the soilIf I something like this were available locally, I'd see a price of 100 or less selling well for people interested in growing their own produce or simply gaining more insight into what's in their local dirt.",
      ">My father was a Vietnam veteran and a lifelong Republican. He liked to say that women belong in the kitchen.>Porter described how white supremacists used arsenical biocides to maintain the political economy of cotton production in the post-emancipation South, poisoning Black farmers.I can't take anyone seriously who writes like this",
      "I view my lawn the same way as the author, in that I do want there to be a good amount of biodiversity there. I let everything grow in the yard sections and even have parts that I leave almost totally wild without even cutting.  But I also don't want weeds growing in the cracks between my paving stones, or poison ivy growing anywhere, and there's not a whole lot that works on knotweed! So I don't use a ton of Roundup but I do use a bit here and there.  In moderation is again key but doesn't seem to fit into anyone's ideological framework these days.",
      "Interesting if perhaps a little over simplified, however I can't take anyone seriously who self describes as \"a member of the East Coast liberal elite\"Yikes",
      "> My father was a Vietnam veteran and a lifelong Republican. He liked to say that women belong in the kitchen. I had become an environmental studies professor, a member of the East Coast liberal elite, a daughter he was ashamed to introduce to his friends at the Post.It's pretty clear from the context that it's a \"badge of shame\" label from the point of view of her father, applied since she went down the path of academia instead of becoming a housewife."
    ],
    "link": "https://www.noemamag.com/the-war-on-weeds/",
    "first_paragraph": ""
  },
  {
    "title": "Beating Jeff's 3.14 Ghz Raspberry Pi 5 (jonatron.github.io)",
    "points": 67,
    "submitter": "jonatron",
    "submit_time": "2024-05-19T21:02:36",
    "num_comments": 8,
    "comments_url": "https://news.ycombinator.com/item?id=40409718",
    "comments": [
      "Awesome work, and I'm glad you could post some results! I'm hoping to get time to delid one, put on a peltier cooler, and try to control the temperature a little better for a run to see how high it'll go before either burning up or going unstable.From my testing on clocks on the Pi 5, it looks like the default clock of 2.4 GHz is pretty close to the sweet spot for this chip (BCM2712), and you burn a lot of power for small incremental gains after that[1]. (Which you seem to also show with the 3.3 GHz overclock!).I also spoke to one of the Pi engineers about the chip behavior at higher clocks, and he suggested unlike some chips, this chip might run more stably at higher temperatures (like 50-60\u00b0C) rather than 'as cold as you can get it'. So that poses some challenges since most cooling solutions aren't tuned for 'keep a temperature' but instead 'get it as cold as possible', without a lot of manual tweaking.[1] https://www.jeffgeerling.com/blog/2023/overclocking-and-unde...",
      "Is there a consensus on the best available cooler for the Pi 5? I looked at this exact unit but wanted more of a \"case\" design.I first tried the Flirc passive case. It seems to transport and dissipate heat notably better than active coolers with copper heatsinks and 4000 RPM fans. That's especially impressive given that the entire top and bottom are plastic, leaving the horizontal edge as the only surface for heat dissipation.My remaining concern there is that it only cools the Broadcom SoC, while creating a nice little insulated oven for the other chips. The inner surface area is much greater than the outer surface area, and with no ventilation by design, so heat from the SoC is being distributed throughout the whole inner volume.I also tried an active cooler to avoid that, which I'm sure is better for every other chip but I'm surprised to find was substantially worse for the SoC itself. I guess the tiny copper block gets saturated very quickly and its surface area isn't very large for air cooling.Maybe that's why the monoblock passive coolers do so well, in theory they combine the best of these approaches. I just wish they'd apply the same idea to a refined \"case\" design like the Flirc.",
      "> There's a silicon lotteryIsn't there also an environmental factor that hasn't been fully explore? Are we sure there isn't an alternative to the cooling mechanism on the CPU than the two options the parent and Jeff used?",
      "Assuming a fast reliable internet connection, how well does an overclocked raspberry pi 5 perform when video conferencing using popular conferencing applications such as zoom, google meet, ms teams and the like?",
      "Probably slightly worse than a 10 year old core i7 cpu computer.",
      "True, to some extent this is also an artefact of (comparatively) poor software optimisation for pi. In this case almost certainly zoom and others apps will be using cpu encoding/decoding rather than offloading.",
      "I'd love to see a 16GB variant of the RPi5 some day.",
      "If you don\u2019t need the pi software ecosystem the orange pi 5 plus competitor comes in 32gb"
    ],
    "link": "https://jonatron.github.io/randomstuff/pivolt/",
    "first_paragraph": "Jeff came up against a 1V limit in his video \n  \" Overclocking Raspberry Pi 5 to 3.14 GHz on Pi Day \"\nafter firmware was released to remove the 3Ghz limit.\n\nThere's a silicon lottery, and I tried to see what I could get on my particular Pi.\n  Geekbench takes ages to run and has a large run-to-run variance.\n  \nsysbench cpu run allows me to iterate more quickly.\n  I'm using this cooler, and I haven't tried any other cooling solutions. \n\n\n\nover_voltage_delta=50000\narm_freq=2900\nforce_turbo=1\n\n    total number of events:              32951\n    total number of events:              32954\n\nover_voltage_delta=50000\narm_freq=3000\nforce_turbo=1\n\n    total number of events:              34076\n    total number of events:              34094\n\nover_voltage_delta=50000\narm_freq=3200\nforce_turbo=1\n    total number of events:              36373\n    total number of events:              36365\n\narm_freq=3300 or 3.3Ghz is where it gets very unstable.\n\nFirmware\nThe 1V limit is in the firmware. The Raspberry "
  },
  {
    "title": "Unprojecting Text with Ellipses (2016) (mzucker.github.io)",
    "points": 38,
    "submitter": "nmstoker",
    "submit_time": "2024-05-19T21:08:17",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=40409757",
    "comments": [
      "Never have unprojected text. I learned the hard way it's just not worth it.",
      "What would I have to learn to understand all the maths in this post?",
      "Why is this better than simply finding the bounding quadrilateral of the text, and rectangularizing that?",
      "Good question. How does one simply find the bounding quad of rotated perspective text? Will that handle perspective distortion?I guess the author partly answers your question early on with discussion of the Merino-Gracia paper, which fits a quad to individual lines of text, and a comment about how that relies on first being able to detect lines of text.Matt also doesn\u2019t claim this method is better. He says \u201cI\u2019m sure its neither as accurate or as useful as the Merino-Gracia approach.\u201c I assume the example text \u201cNeedlessly Complex\u201d is a bit of self-deprecating humor, acknowledging he may not be taking the easiest path there is. But the method here seems interesting and useful to me for its approach; it doesn\u2019t have to identify word or page boundaries, or lines of text, as a prerequisite. The assumptions are simple and the optimization is simple, it\u2019s a nice study in different ways to think about the problem."
    ],
    "link": "https://mzucker.github.io/2016/10/11/unprojecting-text-with-ellipses.html",
    "first_paragraph": "Why do it by hand if you can code it in just quadruple the time?"
  },
  {
    "title": "Swarming Proxima Centauri: Picospacecraft Swarms over Interstellar Distances (astrobiology.com)",
    "points": 163,
    "submitter": "Brajeshwar",
    "submit_time": "2024-05-19T14:33:10",
    "num_comments": 88,
    "comments_url": "https://news.ycombinator.com/item?id=40407228",
    "comments": [],
    "link": "https://astrobiology.com/2024/05/swarming-proxima-centauri-coherent-picospacecraft-swarms-over-interstellar-distances.html",
    "first_paragraph": ""
  },
  {
    "title": "Meteor Just Seen in Portugal (reddit.com)",
    "points": 136,
    "submitter": "gehwartzen",
    "submit_time": "2024-05-19T21:01:15",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=40409710",
    "comments": [],
    "link": "https://old.reddit.com/r/interestingasfuck/comments/1cva6j6/meteor_just_seen_in_portugal_23h45/",
    "first_paragraph": ""
  },
  {
    "title": "Riven (filfre.net)",
    "points": 473,
    "submitter": "doppp",
    "submit_time": "2024-05-19T03:34:45",
    "num_comments": 149,
    "comments_url": "https://news.ycombinator.com/item?id=40404054",
    "comments": [],
    "link": "https://www.filfre.net/2024/05/riven/",
    "first_paragraph": "Robyn and Rand Miller."
  },
  {
    "title": "A floppy disk MIDI boombox: The Yamaha MDP-10 (nicole.express)",
    "points": 60,
    "submitter": "zdw",
    "submit_time": "2024-05-19T16:13:35",
    "num_comments": 10,
    "comments_url": "https://news.ycombinator.com/item?id=40407884",
    "comments": [
      "When General MIDI standard sounds became widespread in early-mid 90s I already wet my feet with synthesizers, samplers and the Amiga .MOD scene, so I was eager to try this new format and its standard library of sounds, but was surprised how absolutely awful they sounded compared to pretty much everything I used, cheap keyboards included. No way I would swap any of my cheap synthesizers with a MT32 or any similar expander. I may have a very unpopular opinion, but hated those sounds since day one, and still hate them. The demos linked sound just terrible to my ears; you can't make a general purpose sound and expect it to fit any song in any genre as much as you can't have a single type of cheese and expect it to be good in all meals. I completely understand the reason why they existed, but no, I don't feel any nostalgia.",
      "Agreed, the MT32 sounded very bad, but it inspired a scene of MIDI enthusiasts and companies making countless MIDI song files for popular and classical music that travelled via floppy discs and bulletin board systems. And the MT32 was kind of GM before GM - and its drum note assignments can still be found in the bones of some of the most recent and ambitious beat making plugins.So I value the MT32 as an historic technology culture enabler, rather than as a sonic treasure.That being said, I should run mine through my guitar pedalboard and see if it can be made to sound cool. :-)",
      "I think things changed a bit with MIDI with the introduction of Soundfonts, and even more with dedicated MIDI sound cards.I bought a Roland SCC-1 [1], and fell in love with MIDI. It was basically a CM-300 in a PCI card. I could program music that sounded like it was coming from a Roland keyboard. Such good memories.But like you, I also was not a fan of FM produced MIDI, and that was only exacerbated by the SCC-1.Soundfonts made it possible for games like FF7 to sound identical to the PS1, which was miles ahead of FM MIDI.[1] https://en.wikipedia.org/wiki/Roland_SC-55",
      "FM synthesis on consumer MIDI sound cards only sounded dull because it had fewer operators than a professional synthesizer.",
      "It's a common misconception that GM has to sound bad. Consumer GM units used the smallest sound ROMs they could get away with, lower quality DACs, etc. But you could fire up GM on your Kurzweil K2000, your Quadrasynth, your Roland, or Yamaha professional level synthesizers and workstations and the same GM programs would sound amazing.For less than a higher end Sound Canvas, you can get a real professional synth with a much bigger and better sound ROM, better DACs, better effects, etc.",
      "I totally agree with you. I hated them from day one. Sounds to clean and polished.",
      "> as much as you can't have a single type of cheese and expect it to be good in all mealsYou clearly haven't tried Kerrygold's Dubliner cheese, then ;)",
      "> In this, the year 2025, minijack MIDI is now fairly common, but in the 90\u2019s it was all DIN, all the time",
      "In 1996 Yamaha was all about TwinVQ (which was far better than mp3 at low bitrates) anyway, so it'd have been that rather than mp3, had they gone that route.",
      "If you're in 2025 we have a few questions for you."
    ],
    "link": "https://nicole.express/2024/elementary-midi-watson.html",
    "first_paragraph": "May 19, 2024"
  },
  {
    "title": "Ubuntu 24.10 to Default to Wayland for Nvidia Users (omgubuntu.co.uk)",
    "points": 38,
    "submitter": "MilnerRoute",
    "submit_time": "2024-05-19T22:16:25",
    "num_comments": 23,
    "comments_url": "https://news.ycombinator.com/item?id=40410158",
    "comments": [],
    "link": "https://www.omgubuntu.co.uk/2024/05/ubuntu-24-10-wayland-nvidia",
    "first_paragraph": "One display server to rule them\u2026"
  },
  {
    "title": "Transforming a QLC SSD into an SLC SSD (theoverclockingpage.com)",
    "points": 216,
    "submitter": "userbinator",
    "submit_time": "2024-05-19T09:30:16",
    "num_comments": 129,
    "comments_url": "https://news.ycombinator.com/item?id=40405578",
    "comments": [],
    "link": "https://theoverclockingpage.com/2024/05/13/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance/?lang=en",
    "first_paragraph": ""
  },
  {
    "title": "AI doppelg\u00e4nger experiment \u2013 Part 1: The training (julienposture.substack.com)",
    "points": 142,
    "submitter": "julienposture",
    "submit_time": "2024-05-19T16:19:06",
    "num_comments": 86,
    "comments_url": "https://news.ycombinator.com/item?id=40407927",
    "comments": [],
    "link": "https://julienposture.substack.com/p/the-ai-doppelganger-experiment-part",
    "first_paragraph": ""
  },
  {
    "title": "Meringue Philosophy (meringue.readthedocs.io)",
    "points": 18,
    "submitter": "Vadim_samokhin",
    "submit_time": "2024-05-19T19:49:04",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=40409309",
    "comments": [],
    "link": "https://meringue.readthedocs.io/en/latest/meringue_philosophy.html",
    "first_paragraph": "I published this entry both in my old and new blogs, and I repost it here in its entirety."
  },
  {
    "title": "Compilers for free with weval (bernsteinbear.com)",
    "points": 161,
    "submitter": "todsacerdoti",
    "submit_time": "2024-05-19T11:33:43",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=40406194",
    "comments": [
      "I remember being really excited about the derive-a-compiler-from-a-partial-evaluator premise when I first ran across it. You genuinely do get a compiler from an interpreter plus a partial evaluator. That trick does work.The gotcha I didn't spot at the time is that a compiler is (I think, could be argued either way) easier to write than a partial evaluator. The \"get it for free bit\" only really applies if someone else gave you the partial evaluator and if you somehow don't need to spend ages debugging why that partial evaluator isn't behaving like you hoped.Now that I'm somewhat more beaten down by toolchain dev, I'm starting to think compilers are easier to write than interpreters. It's definitely not a clear win in favour of the interpreter. If you compile to x64, or to C, or to javascript or whatever, you now have a thing you can debug with whatever tools are native to that target. If you run in an interpreter, you get to debug that interpreter running the program, with whatever somewhat ad hoc debugging tools you put into the interpreter yourself.Getting useful semantic error message out of an interpreter at partial evaluation time (aka the \"compile time\" of the aggregate tool) is probably solvable but not likely to work out of the box. Partial eval isn't really a phase separation friendly thing.",
      "This is indeed a good point and something I want to write about when I eventually do a blog post on weval.A few counterpoints that I'd offer (and what led me to still take this approach):- If the target has sub-par debugging infrastructure, it can be easier to debug an interpreter (which is portable) then apply the semantics-preserving PE. In particular when targeting Wasm outside the browser, there is... not really a good debug experience, anywhere, for that. It was way easier to get an interpreter right by developing on native with gdb/rr/whatever, and then separately ensure weval preserves semantics (which I tested with lockstep differential execution).- Maintenance: if one is going to have an interpreter and a compiler anyway (and one often wants this or needs this e.g. to handle eval()), easier for them both to come from the same source.- Amortized cost: in the Wasm world we want AOT compilers for many languages eventually; there are interpreter ports with no Wasm backends; developing weval was a one-time cost and we can eventually apply it multiple times.- If the semantics of the existing interpreter are quite nontrivial, that can push the balance the other way.  I designed weval as part of my work on SpiderMonkey; extremely nontrivial interpreter with all sorts of edge cases; replicating that in a from-scratch compiler seemed a far harder path. (It's since been done by someone else and you can find the \"wasm32 codegen\" patchset in Bugzilla but there are other phasing issues with it from our use-case's PoV; it's not true AOT, it requires codegen at runtime.)I don't think the tradeoff is always clear and if one is building a language from scratch, and targeting a simple ISA, by all means write a direct compiler! But other interesting use-cases do exist.",
      "The divergent semantics risk between the interpreter and the compiler is a really big deal. It's genuinely difficult to get a language implementation to behave exactly as specified, even when the spec is do the same as some other implementation. Treating \"compiled code\" as specialising the interpreter with respect to the program is a great solution to that, since the bugs in the optimiser/partial-evaluator (they're kind of the same thing) are unlikely to be of the same class as bugs from independent implementations.Wasm is a really solid target for heroic compiler optimisations. It's relatively precisely specified, user facing semantic diagnostics are in some language front end out of sight, aliasing is limited and syscalls are finite with known semantics. Pretty much because it was designed by compiler people. You've picked a good target for this technique.",
      "> The gotcha I didn't spot at the time is that a compiler is (I think, could be argued either way) easier to write than a partial evaluator.I agree that this is sometimes true, but there are several, IMHO bigger, issues:1. The partial evaluation of the interpreter might degenerate back to getting a copy of the interpreter loop (or multiple!) and not achieve any speedup, just memory overhead2. The partial evaluator might need additional annotations on what is and is not mutable; it might need a lot of help in order to constant-fold away a key piece of data. Tuning that and getting wrong and result in #1.3. Partially evaluating the interpreter is a pretty slow compiler. You need to do the second Futamura projection (apply the partial evaluator to an interpreter loop without the user code) in order to get a fast compiler. That means the partial evaluator needs to be in the same IR as the partial evaluator's input language.That said, I've chatted a bit with Chris offline about this, and I think this work is really cool and promising. I might tinker with this a little in Wizard too.",
      "That is better expressed than my rambling! The futamura projection is satisfied by passing the \"program\" directly to the interpreter without optimising either, which is sometimes useful as a packaging exercise and does look somewhat like a non-optimising compiler.If you want this trickery to make a useful compiler, the partial evaluator picks up global value numbering, dead code elimination, loop transforms - the effective partial evaluator is very much the optimisation passes of a compiler. It can still be a win if someone else wrote said partial evaluator.Point 2 is the usual \"my compiler is not sufficiently smart, I must annotate the program\" problem, with the slight twist that you're annotating the interpreter in the hope that it does useful things with the end program. Interacts with hoping someone else built the dependency well.And yeah, generated compilers in this fashion have a reputation for being slow, and for not being great optimising compilers, where self application might dig oneself out of the hole. Very like adding optimisations to your compiler to make your compiler faster when building your compiler.All in all the compiler for free tagline (not specifically this post, it's written on a lot of futamura references) feels a bit like an inside joke. It reminds me of the sad discovery that a metacircular interpreter can't interpret itself after all since what you've written is a heavily obfuscated infinite loop.",
      "weval author here (thanks Max for the blog post!). Also AMA!The talk about weval that Max mentions was at NEU and also CMU; the latter was recorded and is here: https://vimeo.com/940568191I also plan to write up a blog post on weval in depth, plus its application to SpiderMonkey-on-Wasm, in a few months; it's pretty exciting though, currently getting 4-5x speedups on some benchmarks on a decidedly nontrivial interpreter!",
      "If the wasi+weval version is better than the compiled one, doesn't it mean that the compiler made a bad job at optimizing out the constant parts?To be fair, in order for weval to do its magic, the code has to be changed and annotated. I'm wondering if a similar set of annotations could convince clang to generate a binary that runs in less than 40 ms.",
      "Clang doesn't know about the static code, so it can't do the optimizations this does.You could probably do the same thing with some hacky C++ code gen and templates, but I'm not sure clang et al would be able to optimize them.",
      "In the limit, that's called Copy and Patch!",
      "Isn't copy and patch just jitter: new fangled kids' version?"
    ],
    "link": "https://bernsteinbear.com/blog/weval/",
    "first_paragraph": "Chris Fallin came and gave a talk to the Northeastern\nProgramming Research Laboratory\nlast month. He talked about his work on a new project called\nweval, a WebAssembly partial evaluator (and\nthen helped me write this post!)."
  },
  {
    "title": "Ask HN: Video streaming is expensive yet YouTube \"seems\" to do it for free. How?",
    "points": 127,
    "submitter": "pinakinathc",
    "submit_time": "2024-05-19T17:51:41",
    "num_comments": 122,
    "comments_url": "https://news.ycombinator.com/item?id=40408515",
    "comments": [],
    "link": "item?id=40408515",
    "first_paragraph": ""
  },
  {
    "title": "Puzzle made by the WikiLeaks founder Julian Assange for the university quest (wondrousnet.blogspot.com)",
    "points": 14,
    "submitter": "dpivchik",
    "submit_time": "2024-05-19T22:20:29",
    "num_comments": 0,
    "comments_url": "",
    "comments": [],
    "link": "https://wondrousnet.blogspot.com/2023/05/solution-to-puzzle-sleuth.html",
    "first_paragraph": ""
  },
  {
    "title": "Hertz Charging a Tesla Renter for Gas Was Not an Isolated Incident (thedrive.com)",
    "points": 81,
    "submitter": "peutetre",
    "submit_time": "2024-05-19T22:52:01",
    "num_comments": 62,
    "comments_url": "https://news.ycombinator.com/item?id=40410341",
    "comments": [],
    "link": "https://www.thedrive.com/news/hertz-charging-a-tesla-renter-for-gas-was-not-an-isolated-incident",
    "first_paragraph": "Hertz billing a customer hundreds of dollars for gas in an EV wasn\u2019t a one-off mistake. In fact, it may have been happening for more than a year."
  },
  {
    "title": "Teaching Algorithm Design: A Literature Review (arxiv.org)",
    "points": 14,
    "submitter": "belter",
    "submit_time": "2024-05-19T20:01:29",
    "num_comments": 0,
    "comments_url": "",
    "comments": [],
    "link": "https://arxiv.org/abs/2405.00832",
    "first_paragraph": "Help | Advanced Search"
  }
]