[
  {
    "title": "Jacksonpollock.org (jacksonpollock.org)",
    "points": 155,
    "submitter": "memalign",
    "submit_time": "2025-02-08T21:22:49 1739049769",
    "num_comments": 37,
    "comments_url": "https://news.ycombinator.com/item?id=42986320",
    "comments": [
      "Fun! Reminds me of spending a week in 2012 trying to find the perfect blackboard chalk effect \nhttp://mmoustafa.com/experiments/chalk/After many experiments, the most realistic was painting a thick line and then erasing tiny randomly sized rectangles out of it.\n \nreply",
      "Fun, but more suggestive of Steadman (illustrator of Fear and Loathing in Las Vegas and other things) than Pollock: https://www.npr.org/2014/04/27/307285367/artist-ralph-steadm...\n \nreply",
      "I disagree.Pollock used a lot of connected ink splotches, Steadman's 'inkling' stuff is usually large white-space separated splotches, an effect that is impossible with this tool.also Steadman moved away from that eventually, whereas Pollock leaned into it until death.Moreover Pollocks' art was the splotches, whereas it was usually an accoutrement for Steadman around a different -- usually framed -- perspective.\n \nreply",
      "Agreed, super cool project. All it seems like it would need for a full pollock vibe would be a color palette selector. And maybe this audio track on loop and a transparent overlay of animated cigarette smoke. Great url.https://m.youtube.com/watch?v=nmzppQU-lqA\n \nreply",
      "On a tangent, the floor of Pollock's studio is an artwork in its own right:https://aaqeastend.com/contents/aaq-portfolio-jackson-polloc...\n \nreply",
      "I know it\u2019s early but it\u2019s funny to note the difference between the comments here so far and what the discussion was like in 2020:https://news.ycombinator.com/item?id=24269430\n \nreply",
      "There is a question as to whether it used SWF back in the day. It is likely but also would Java Applets have still been an option then?\n \nreply",
      "wow. that\u2019s awesome. i don\u2019t understand why but i\u2019m happy.\n \nreply",
      "Here's a topic I don't see people engaging with: I could in principle make the same kinds of completely abstract paintings Pollock did, but if I do it, it won't be art because I'm not in the art world. I have no access to galleries, I have no patrons, and I generally don't move in those circles, so I have no ability to be taken seriously for doing it.\n \nreply",
      "Do you think simply copying a 70 year old idea would make you a world famous artist if you had more connections in art?(Not that abstract painting really describes what made Pollock famous, action painting is obviously it.)\n \nreply"
    ],
    "link": "https://jacksonpollock.org/",
    "first_paragraph": ""
  },
  {
    "title": "Is Software Abstraction Killing Civilization? (2021) (datagubbe.se)",
    "points": 84,
    "submitter": "yamrzou",
    "submit_time": "2025-02-08T21:49:51 1739051391",
    "num_comments": 37,
    "comments_url": "https://news.ycombinator.com/item?id=42986485",
    "comments": [
      "I teach the systems class at Montana State, where we go from transistors up to a real computing system, and I have students that don't understand what a file system really is when they start my classI agree that blow is wrong on some details, but I really think we need to be thinking hard around a NAND-to-Tetris style education that starts in high school for our technical students.I use \"outdated\" models like Little Man Computer and a simple visual MIPS emulator which, even though they aren't realistic, at least give the students a sense of where we came from, with a level of complexity that a normal human can get their head around.  When I look at modern 64 bit architecture books that get suggested for me to teach with I just laugh.Anyway, not to say I agree 100% with Blow on everything, but connecting technology down to the roots is a hard problem.\n \nreply",
      "I'd strongly suggest having a look at the Cardiac [0] and MIX [1] computers. Shift operations are pretty important and having a dedicated multiplication/division is also very useful.The fact that all of these are (or can be) decimal machines makes it much easier for people to understand what's going on.Jumping to binary before you understand how a computer works is like learning logic in Latin.[0] https://en.wikipedia.org/wiki/CARDboard_Illustrative_Aid_to_...[1] https://en.wikipedia.org/wiki/MIX_(abstract_machine)\n \nreply",
      "The concept of files and file systems is useful to regular computer users, even when they have no interest in knowing how things work under the hood. The issue is with mobile OSs, and that software companies like their apps to be a walled garden for your data as much as possible, and therefore resist exposing your data as files living in a normal shared file system. Even if you already work with files, they have you \u201cimport\u201d your existing data into their storage system, and you have to manually \u201cexport\u201d (or \u201cshare\u201c) any modifications as a new, separate copy.\n \nreply",
      "Yes, also the curse of modern desktop os\u2019s trying to trick people into storing data in the cloud. The notion of just having files somewhere accessible and organized in a reasonable manner isn\u2019t clear to many (most?) of my students.\n \nreply",
      "I think JavaScript on the server and React and these things has really made the web a mess of software development compared to how little stuff it actually does.I know for a fact a bunch of kids now do not even know that HTML is what gets rendered in the browser. They think that React is itself what browsers render.Not to mention the absolute idiot of a CEO of Vercel who thinks React is the Linux kernel of development.\n \nreply",
      ">  They think that React is itself what browsers renderMy kingdom for native JSX in the browser. That would be awesome.Something similar to how we have WebGL and Canvas, but for pure JavaScript UI without the extra step of DOM reconciliation.There\u2019s a small (and growing) cohort of people working on rendering React Native directly on canvas or webgl (I think). Supposedly gives you super smooth UX, but I haven\u2019t knowingly tried it yet.\n \nreply",
      "> rendering React Native directly on canvas or webglI just threw up in my mouth a little. I can\u2019t wait to:- not be able to double click to highlight text a word at a time, because the developers of the \u201csuper smooth UX\u201d didn\u2019t know that\u2019s what typical text does.- or triple click to highlight a paragraph at a time- or have the standard menu available when I highlight text (which I often use to look up words, etc)- or have text editing support any of my OS\u2019s key bindings, like ctrl-left to move the caret one word, ctrl-shift left to highlight in the process, etc etc- or any one of the hundreds upon hundreds of common control behaviors, accessibility behaviors, system-wide settings on text behaviors, etc etc etc be respectedOf course if they\u2019re anything like the Flutter folks, they\u2019ll look at every one of these things and say \u201cwell, I guess we gotta implement all that\u201d rather than understanding the basic fact that common UI elements offered by the OS should actually be reused, not reimplemented poorly.I really worry about what software will look like 20 years from now. At this rate we\u2019re just going to forget every thing we learned about how it should behave.\n \nreply",
      "> There\u2019s a small (and growing) cohort of people working on rendering React Native directly on canvas or webgl (I think)Sounds terrible for accessibility.\n \nreply",
      "That was the whole point of react, right? To create something that wouldn't work at all without JavaScript enabled and would be enough of a mess that Facebook could effectively hide their malware in it.I think many of Blow's points are good, but that he overlooks that much of the degradation isn't a facet of some kind of generational drift or information entropy but is straight up malevolence on the part of people making the decisions.\n \nreply",
      "What malware has Facebook hidden in React?\n \nreply"
    ],
    "link": "https://datagubbe.se/endofciv/",
    "first_paragraph": "datagubbe.se \u00bb\nis abstraction killing civilization?\nOr: Jonathan Blow is wrong but also right and we still\nneed to prevent the collapse of civilizationEarly 2021\nI recently stumbled upon\na talk by game\ndevelopment guru Jonathan Blow, about how software \nabstraction will lead to the end of civilization. Quick summary:\n\nIt was one of those \ntalks that might at a first glance seem perfectly reasonable, not least \nbecause similar ideas are regularly discussed in programmer circles by a\ngreat number of \npeople. Then you start thinking about what's said, and all the errors and \nmisconceptions presented makes you feel troubled, because it's both \ntempting and easy to perpetuate the punchlines without\nconsidering their implications. I agree with Blow that it's\nimportant to pass knowledge between generations. Therefore, the veracity\nof that information is extremely important. I propose that\nthe information given in the very talk about the importance of\nsuch information, is in fact wrong on many"
  },
  {
    "title": "Tips for mathematical handwriting (2007) (johnkerl.org)",
    "points": 150,
    "submitter": "susam",
    "submit_time": "2025-02-08T19:20:10 1739042410",
    "num_comments": 54,
    "comments_url": "https://news.ycombinator.com/item?id=42985427",
    "comments": [
      "This is a good resource, and pretty much what I tell students in my classes.  I take great care to explain how to write symbols, and I also give multiple pronunciations of the Greek letters.Students with math and physics backgrounds are fine with Greek letters and other mathematical symbols, but the biologists in the class are mystified.  They also get terribly confused when I reuse symbols for different purposes.What I've discovered is that the students who have trouble with mathematical notation and reasoning got derailed when a teacher, in an early grade, said \"let x be the unknown\".  That is a phrase that never comes up in other contexts, and I think it throws them off track.  Many find it difficult to get back on-track later, so they memorize and sleep-walk their way through other mathematics classes until the system no longer insists that they take them. A shame, really.\n \nreply",
      "> Make a point come out of the top of the p, to distinguish it from a rho.Or make it \\varrho (\u03f1).> Keep the slash in the phi vertical; keep the slash in the empty-set symbol slanted.Again, \\varphi (U+1D711 which HN doesn\u2019t seem to like) is easier to distinguish.The author silently chose \\varepsilon in their TeX, but chose to ignore the rest of the variants.My grammar school math teacher used a very large ascender for the alpha, almost into serif-\u00a3-sign-without-the-line-through territory.\n \nreply",
      "There are two other phis with the (non-mathematical) Greek letters earlier, but unfortunately fonts vary in which one they display as \\phi or \\varphi: \u03c6 (U+03CD), \u03d5 (U+03DC).\n \nreply",
      "For Greek I like this:\nhttps://www.covingtoninnovations.com/pens/GreekChartLarge.jp...There\u2019s an old joke about \u201cmathematical maturity\u201d meaning being able to write a lowercase zeta, but I took enough classes from professors that would confuse xi and zeta that it probably doesn\u2019t matter that much.\n \nreply",
      "Meanwhile I always liked this one, even though it\u2019s not specifically focussed on mathematics: https://foundalis.com/lan/hw/grkhandw.htm\n \nreply",
      "My tip is to use white paper. No lines no squares, just white.In Sweden you were expected to use paper with squares but it adds a lot of clutter.\n \nreply",
      "I used plain for a few years but it has some problems. I now use faint lined paper. Usually Muji notebooks. I leave a blank line between each statement. The lines are handy if you want to make something readable and well aligned which is fairly important. Scans fine.My kids were forced to use heavily marked blue squared paper. They had problems writing and reading. I pointed this out to their mathematics teacher and said that it may be detrimental and got a diatribe of \u201cwhat do you know\u201d. Such a bad attitude. I had an answer to this which was embarrassing to him.\n \nreply",
      "I've gone through so many phases on this. But lately, the more writing intensive my math classes get, I've settled on lined paper.Blank paper is too... Blank! And I'm more prone to write big and messy and waste pages (even though it's all digital)...\n \nreply",
      "I switched to plain white when I was ca 20 years old and never looked back. I need to use plain white since then and I am so used to it that I find lines or grids slightly offensive to me and it throws me off from layouting. You can get used to anything.\n \nreply",
      "Pencil boards can help. An example: https://www.jetpens.com/Hobonichi-Accessory-Pencil-Board-for...Grid or lined, placed underneath thinner blank paper (heavier paper won't let the lines or grid show through as easily, if at all). Keeps the final presentation neat while giving the structure you may need to keep things aligned.\n \nreply"
    ],
    "link": "https://johnkerl.org/doc/ortho/ortho.html",
    "first_paragraph": "Now that you\u2019re majoring in one of the technical disciplines\n(engineering, science, or math), you\u2019re going to be spending a\nsignificant amount of time communicating in writing with others.  You may find\nthat previously unimportant details, such as crossing your z\u2019s,\nnow become essential \u2014 not only so that others can understand you, but\nalso so that you can avoid mistaking your own 2z for\nz2 and so on.  This is especially important if your\nhandwriting (like mine!) is less than perfect.\n\nBefore I continue, take a fresh look at our Roman alphabet, the digits, and\nthe Greek alphabet:\n\n \nNotice that these mechanically typeset symbols are all clear and distinct\n(except that lowercase omicron and most of the uppercase Greek letters look\nlike Roman letters \u2014 we don\u2019t use these \u201cduplicates\u201d).\n\n When we write by hand, though, symbols can become ambiguous \u2014\nwe\u2019re not machines, and things get a little loopy when we hurry.  In\nprose, surrounding letters can disambiguate a questionable letter \u2014 e.g."
  },
  {
    "title": "Writing a Simple Windows Driver in Rust (scorpiosoftware.net)",
    "points": 144,
    "submitter": "ingve",
    "submit_time": "2025-02-08T17:25:03 1739035503",
    "num_comments": 58,
    "comments_url": "https://news.ycombinator.com/item?id=42984457",
    "comments": [
      "I had an idea to write a filesystem filter driver which would let you configure path remapping rules of sorts, depending on the application. Things like:- %userprofile%\\.vscode -> %appdata%\\vscode- %CSIDL_MYDOCUMENTS%\\Call of Duty -> %userprofile%\\Saved Games\\Call of DutyBecause my documents and home directories filling up with a bunch of garbage which has a designated place on the filesystem filled me with impotent rage. I scaffolded out a project to write a filter driver in rust, read through the minifilter documentation, realized how much work it was going to be, and gave up.I have made my peace with the fact that a windows system is just going to be filled with garbage.\n \nreply",
      "Windows is not the only operating system treating the user's filesystem as a dumping ground. I don't know how many times I keep deleting .DS_Store, .fseventsd and extra files named ._xxxx but that doesn't keep Apple from dumping them all over my filesystem.At least macOS has one place to install applications, one place for the user's documents, and most apps somehow respect them. Then, you have designated dumping grounds like ~/Library that contains tons of junk I have no idea whether I need or not.\n \nreply",
      "> At least macOS has one place to install applications, one place for the user's documents, and most apps somehow respect them.I actually like that simplicity more than how many things FHS describes for the various Linux distros: https://en.wikipedia.org/wiki/Filesystem_Hierarchy_StandardLike, when a developer just wants to ship a product and doesn't have that much free time, it's understandable that tidy things will be overlooked.Maybe something like https://www.gobolinux.org/at_a_glance.html would help with that.\n \nreply",
      "Two places. /Applications and ~/Applications.More, if you count UN*X binaries.\n \nreply",
      "I didn't even realise I still had stuff in ~/Applications. Probably got there via some Installer wizard...   ls  ~/Applications\n   Autodesk Fusion Service Utility.app\n   Autodesk Fusion.app\n   Chrome Apps.localized\n   Edge Apps.localized\n   Remove Autodesk Fusion.app\n\n   ls -ls /Applications | wc -l\n   94\n \nreply",
      "And then all of the actual stuff that they put in Library Support\n \nreply",
      "...And you'll start having dot files and dot folders in your home when you start using brew...\n \nreply",
      "Huh my Documents folder is weirdly empty, where did-> Shortcut to Documents (OneDrive - Personal)Oh good, now all that garbage is being synced across machines. Lovely.\n \nreply",
      "I just completely ignore the My Documents toxic waste dump, and use a different place (with a shorter path) for files I actually care about.  I might have created directory junctions to redirect one or two programs that hardcode their data location.\n \nreply",
      "Marking files as hidden seems easier on Windows. I find it much more annoying to hide files on Linux (especially folders like ~/snap which can't be renamed).If there's anything I've heard about drivers, though, it's that filesystem drivers are particularly annoying to write.If you want to simply hide the files from view, you may have an easier time writing a shell plug-in. You have to deal with COM, but you're less likely to take down the whole system.\n \nreply"
    ],
    "link": "https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/",
    "first_paragraph": "Pavel YosifovichAdventures in Coding, Internals and LearningThe Rust language ecosystem is growing each day, its popularity increasing, and with good reason. It\u2019s the only mainstream language that provides memory and concurrency safety at compile time, with a powerful and rich build system (cargo), and a growing number of packages (crates).My daily driver is still C++, as most of my work is about low-level system and kernel programming, where the Windows C and COM APIs are easy to consume. Rust is a system programming language, however, which means it plays, or at least can play, in the same playground as C/C++. The main snag is the verbosity required when converting C types to Rust. This \u201cverbosity\u201d can be alleviated with appropriate wrappers and macros. I decided to try writing a simple WDM driver that is not useless \u2013 it\u2019s a Rust version of the \u201cBooster\u201d driver I demonstrate in my book (Windows Kernel Programming), that allows changing the priority of any thread to any value.To prep"
  },
  {
    "title": "The Deck: An open-source cross-platform multiplayer card game engine in Flutter (github.com/xajik)",
    "points": 205,
    "submitter": "igor_st",
    "submit_time": "2025-02-08T15:47:36 1739029656",
    "num_comments": 50,
    "comments_url": "https://news.ycombinator.com/item?id=42983699",
    "comments": [
      "Nice work! I'm happy to see the server is in Dart, no Firebase!I wish the Dart server ecosystem was more mature though. Being able to compile Dart into a static binary is so nice for deployment.\n \nreply",
      "I wrote some dart servers years ago, there is a nice framework called aqueduct that makes it very easy and productive.I stopped using it because I needed to make money and my work was with nodejs.\n \nreply",
      "Serverpod and Dart Frog are both pretty good backend Dart frameworks, what are you looking for?\n \nreply",
      "Dart is crazy because it runs on every platform, compiles to native, has real parallelism via isolates, native async, and native type safety.There's not really a backend that takes advantage of all that. In theory, one server binary could handle REST, web sockets, background workers, and have generated type safe client packages for every platform. Dart also has a great Rust ffi story. It would be great to see that leveraged.ServerPod is a great start, but it's really Flutter focused. The web apis feel like second class.Additionally, database management isn't a solved problem yet. ServerPod uses yaml to define models, and the other main option is just a Prisma wrapper. Dart needs something like Drizzle.\n \nreply",
      "On the topic of databases, I think https://drift.simonbinder.eu/ might interest you. I've been using it in a Flutter app with SQLite, but my understanding is that you could use it on the server too. I recall them having support for at least SQLite and Postgres.\n \nreply",
      "You could state the same thing as your first sentence for e.g. Rust or many other languages, I personally only see Dart being useful if you already have a Flutter app and you don't want to learn another language, and to have shared types easily, similar to fullstack web devs using TypeScript for their React and Node apps.I personally use Rust backends and Flutter frontends for my apps. I'd use pure Rust for the entire thing but Rust frontends are nowhere near the capabilities and maturity as Flutter, but I use FFI like flutter_rust_bridge and rinf at least, as you mention.\n \nreply",
      "I actually can't think of another language that has all of that built in. Rust doesn't, it needs a run time for async. JavaScript doesn't, it needs typescript and it doesn't compile to native.\n \nreply",
      "Kotlin Native has every one of those features.\n \nreply",
      "This is very cool! Somewhat similar, I recently bought a Nintendo Switch version of Ticket to Ride, which supports using a \"companion app\" on other devices to show each player their private hand.However, one unfortunate bit is that the board (in my case, the TV connected to the Switch) is \"read-only\" and you don't interact with it, unlike real life. You pick which card to play on your phone, and then place it onto the board also on your phone. So basically, all the action is on your phone, and the central board is kind of an afterthought. It doesn't feel as much like interacting with a shared space as I was hoping.I'm not really sure how to solve that. I thought of some weird stuff (like, maybe after you pick your card, your phone is just a touchpad controlling the card as it now moves around on the big screen) but nothing seemed practical.\n \nreply",
      "An obvious answer is to play the physical game, but I also wonder if people are starting to adapt to virtual tabletop games? Virtual tangible? How intriguing!\n \nreply"
    ],
    "link": "https://github.com/xajik/thedeck",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        The Deck: An Open-Source, Cross-Platform, Mobile, Turn by Turn Card Game Engine in Flutter\n      \ud83d\udd79\ufe0f Mobile multiplayer offline card games aggregator \ud83d\ude80\n\ud83d\udc68\u200d\ud83d\udcbb Written \ud83d\udcaf in Dart and Flutter \ud83d\udd28The inspiration for \u201cThe Deck\u201d came from a situation many of us have experienced. Imagine gathering with friends for a game night, only to realize that nobody has the necessary cards. Frustrating, right? This dilemma sparked the idea of leveraging technology to create a solution.\n\nThe primary goal of \u201cThe Deck\u201d is to provide a user-friendly and cooperative digital game environment for playing classic games that were usually played with cards on paper. One of the standout features of \u201cThe Deck\u201d is its unique ability to assign one device as the \u201ctable\u201d (a.k.a. deck). By placing this device in the middle of the group, all players can witness the real-ti"
  },
  {
    "title": "21st Century C++ (Feb. 2025) by Bjarne Stroustrup (acm.org)",
    "points": 82,
    "submitter": "bandwitch",
    "submit_time": "2025-02-05T09:55:11 1738749311",
    "num_comments": 41,
    "comments_url": "https://news.ycombinator.com/item?id=42946321",
    "comments": [
      "Last weekend, I took an old cross-platform app written by somebody else between 1994-2006 in C++ and faffed around with it until it compiled and ran on my modern Mac running 14.x. I upped the CMAKE_CXX_STANDARD to 20, used Clang, and all was good. Actually, the biggest challenge was the shoddy code in the first place, which had nothing to do with its age. After I had it running, Sonar gave me 7,763 issues to fix.The moral of the story? Backwards compatibility means never leaving your baggage behind.\n \nreply",
      "I want to love C++.Over my career I\u2019ve written hundreds of thousands of lines of it.But keeping up with it is time consuming and more and more I find myself reaching for other languages.\n \nreply",
      "I went from being curious about C++, to hating C++, to wanting to love it, to being fine with it, to using it for work for 5+ years, to abandoning it and finally to want to use it for game development, maybe. It's the circle of life.\n \nreply",
      "You don't 'have' to keep up with the language and I don't know that many people try to keep up with every single new feature - but it is worse to be one of those programmers for whom C++ stopped at C++03 and fight any feature introduced since then (the same people generally have strong opinions about templates too).There are certainly better tools for many jobs and it is important to have languages to reach for depending on the task at hand.  I don't know that anything is better than C++ for performance sensitive code.\n \nreply",
      "I\u2019ve been using c++ since the late 90\u2019s but am not stuck there.I was using c++11 when it was still called c++0x (and even before that when many of the features were developing in boost).I took a break for a few years over c++14, but caught up again for c++17 and parts of c++20...Which puts me 5-6 years behind the current state of things and there\u2019s even more new features (and complexity) on the horizon.I\u2019m supportive of efforts to improve and modernize c++, but it feels like change didn\u2019t happen at all for far too long and now change is happening too fast.The \u2018design by committee\u2019 with everyone wanting their pet feature plus the kitchen sink thrown in doesn\u2019t help reduce complexity.Neither does implementing half-baked features from other \u2018currently trendy\u2019 languages.It\u2019s an enormous amount of complexity - and maybe for most code there\u2019s not that much extra actual complexity involved but it feels overwhelming.\n \nreply",
      "It\u2019s okay to be a few years behind the standard, the compilers tend to be as well.\n \nreply",
      "Same here.>>contemporary C++30 can express the ideas embodied in such old-style code far simplerIMO, newer C++ versions are becoming more complex (too many ways to do the same thing), less readable (prefer explicit types over 'auto', unless unavoidable) and harder to analyse performance and memory implications (hard to even track down what is happening under the hood).I wish the C++ language and standard library would have been left alone, and efforts went into another language, say improving Rust instead.\n \nreply",
      "I have used auto liberally for 8+ years; maybe I'm accustomed to reading code containing it but I really can't think of it being a problem.  I feel like auto increases readability, the only thing I dislike is that they didnt make it a reference by default.Where do you see difficult to track down performance/memory implications?  Lambda comes to mind and maybe coroutines (yet to use them but guessing there may be some memory allocations under the hood).  I like that I can breakpoint my C++ code and look at the disassembly if I am concerned that the compiler did something other than expected.\n \nreply",
      "E.g. `std::ranges::for_each`, where lambda captures a bunch of variables by reference. Like I would hope the compiler optimizes this to be the same as a regular loop. But can I be certain, when compared to a good old for loop?\n \nreply",
      "I just wish they hadn't repurposed the old \"auto\" keyword from C and had used a new keyword like \"var\" or \"let\".   #define var auto\n   #define let auto\n \nreply"
    ],
    "link": "https://cacm.acm.org/blogcacm/21st-century-c/",
    "first_paragraph": ""
  },
  {
    "title": "Do-nothing scripting: the key to gradual automation (2019) (danslimmon.com)",
    "points": 361,
    "submitter": "tehnub",
    "submit_time": "2025-02-07T19:48:16 1738957696",
    "num_comments": 91,
    "comments_url": "https://news.ycombinator.com/item?id=42976698",
    "comments": [
      "I'm a big fan of this approach.In general it's another way of defining interfaces around processes. Those processes may be manually done or automated. But the interface can remain the same - this is quite powerful when it comes to automating steps.It's the same as you'd do with another system really.I've used this before with Google sheets being manually filled in -> automated with a script. And with Jira tickets being raised and then automatically picked up and processed. It lets you get started sooner, automated the most annoying parts and you never have to fully do it.Side benefit of do nothing scripts is that they can remain up to date more often as they can be more likely to be actually used than reading the docs.\n \nreply",
      "My previous approach was:1) Capture the process as is2) make the process pass a giggle test3) make the process automatableConcurrent with 3 and 4:- use the process repeatedly and by as many people as possible- adapt the process to any misuse seen in the wild4) automate the processEverybody will buy into steps 1&2, and most people will come around to 4, but doing step 3 usually will get you more people pushing for and understanding 4The limitation of your approach I will say is that if you can automate the beginning of a process or the end it\u2019s fine, but if you have two islands in the middle it doesn\u2019t work better than a CLI tool with prompts.\n \nreply",
      "> The limitation of your approach I will say is that if you can automate the beginning of a process or the end it\u2019s fine, but if you have two islands in the middle it doesn\u2019t work better than a CLI tool with promptsI think I may have poorly described my approach then. It's just the same thing, the choice of sheets or Jira or cli or a combo is only about meeting people where their current process is. A dev setup -> cli. A business process between trams -> Jira if that's the current flow. I'm not getting marketing to install my cli tool, and they'd not be the ones doing the manual steps anyway.The point is just making a process into a series of clearly defined steps that can be manual and can be automated independently.Your description of what happens alongside 3 and 4 is good, this was really valuable when I've done it. Just like releasing a MVP and finding out key problems with your imagined approach, the issues are usually not what you expect. You also have better test cases and examples.Massive side benefit when I did this with data was that it also meant a process could be automated 95% of the time, manual 5% without changing the interface anyone worked with. All they saw was the ticket took longer really. That's great when you find absolutely wild stuff in some csv file.\n \nreply",
      "What\u2019s a giggle test?\n \nreply",
      "My not-so-humble opinion is that this type of incremental encoding of process as scripts results in a system built around process rather than a system that eats process. I'm all for a catalog of scripts automating common tasks. The moment those scripts start getting called by production services you're creating a huge mountain of tech debt for whoever is unfortunate enough to unpick the web of spaghetti.Further, because your human oriented process has now codified your system, changes to the system that's would be beneficial to a software system (i.e. dividing the system into components) are impossible. So incremental scale is achieved by stuffing more into the process, which then gets grafted onto the script monolith in a self protruding cycle.\n \nreply",
      "How would a do-nothing script be called by production? The whole point is that they're manual.You're basically arguing against the concept of SOPs. OP blog post is basically just a programmer's version of an SOP.SOPs are great, until they aren't. So then you change them. This is nothing new or strange.\n \nreply",
      "I'm confused as to what you're picturing.> The moment those scripts start getting called by production servicesAny of them with manual steps just can't, right?> Further, because your human oriented process has now codified your system, changes to the system that's would be beneficial to a software system (i.e. dividing the system into components) are impossible.Absolutely nothing stops you from changing these scripts - it's no different from having scripts in a package.jsonThe alternatives are full automation, which pushes your issues to the max, or zero automation which is an odd point to be in.\n \nreply",
      "Yes and for me this an another chance to use and share Jupyter notebooks.Describe the thing. Offer boilerplate, examples, or parameterized executables.The doc system that uses Notebooks de facto would be awesome. It\u2019s too heavy to add as a layer to a Cloud SaaS like Confluence and offers too many opportunities for escalations as is..\n \nreply",
      "I see the mountain of \u201cZen and the Art of Motorcycle Maintenance\u201d coming into view.The approach replaces Confluence instruction pages with semi-interactive walkthroughs (the conscious side).The other side is test automation: it starts with a big ball of overfitted Xpaths and undocumented steps. Those get re-discovered every time the application changes (the subconscious side).Hopefully, we reach the summit where we can execute quickly and still know how we got there and why.\n \nreply",
      "I would prefer if the script did the things that already are a command.It can confirm with the user: \"Execute command (y/N)?\"Fuck cutting and pasting stuff from one terminal into another terminal. That's also focus-intensive.Then prompt the user to do the manual stuff when it isn't yet a command:\"Look up the e-mail address for foo. Paste it here:\"\"Put that shit in 1Password: Are you done (y/N)?\"\n \nreply"
    ],
    "link": "https://blog.danslimmon.com/2019/07/15/do-nothing-scripting-the-key-to-gradual-automation/",
    "first_paragraph": "Scientific incident responseEvery ops team has some manual procedures that they haven\u2019t gotten around to automating yet. Toil can never be totally eliminated.Very often, the biggest toil center for a team at a growing company will be its procedure for modifying infrastructure or its procedure for provisioning user accounts. Partial instructions for the latter might look like this:This is a relatively short example. Sometimes there are 20 steps in the process. Sometimes there are branches and special cases to keep track of as you go. Over time, these procedures can become unmanageably large and complex.Procedures like this are frustrating because they\u2019re focus-intensive yet require very little thought. They demand our full attention, but our attention isn\u2019t rewarded with interesting problems or satisfying solutions \u2013 just another checkbox checked. I have a word for a procedure like this: a slog.We know that this procedure is ripe for automation. We can easily see how to automate any giv"
  },
  {
    "title": "Show HN: FlashSpace \u2013 fast, open-source, macOS Spaces replacement (github.com/wojciech-kulik)",
    "points": 154,
    "submitter": "wojciech-kulik",
    "submit_time": "2025-02-08T17:19:23 1739035163",
    "num_comments": 48,
    "comments_url": "https://news.ycombinator.com/item?id=42984420",
    "comments": [
      "This is awesome. But Apple needs to get their act together. Window management, specially in multi monitor/ space setups is unbelievably bad.What is the purpose of the dock? It does not tell you what apps have windows visible, preview these windows or inform you where these windows are. Absolute waste of screen real estate.And to add to the injury they seized another 10% of the horizontal space for the even more useless stage manager.\n \nreply",
      "On the other hand, the ability to switch virtual desktops independently between monitors as macOS has been able to for ages remains absent on Windows and is present only on some Linux desktops which feels insane to me. That single feature reduces the amount of twiddling with window arrangements and such I need to do to almost nothing.\n \nreply",
      "Every year I spend a month trying out Linux distros to see if it\u2019s in a good enough place to switch back to. Every time I do this, I\u2019m surprised by how few desktop environments supports this. Either it\u2019s not popular or using multiple monitors isn\u2019t common. This isn\u2019t the only reason I haven\u2019t switched back, but it\u2019s one of the more surprising ones because it feels so natural to treat monitors and workspaces like this.\n \nreply",
      "My guess is that among Linux users, multimonitor is unusual. Even most Linux laptop users seem to prefer single monitor clamshell mode vs. keeping the laptop open as a secondary screen. There\u2019s a fair number of Macbook users who do clamshell too but secondary-laptop-screen setups are much much more common in the Mac crowd.\n \nreply",
      "At some point I realized I\u2019d rather one large 4K screen to any multi monitor setup I ever had.I\u2019m not sure if it\u2019s a coping mechanism for using Linux desktops or not, but it does avoid a few issues.It also makes window management simpler in the sense I can just sprawl them out and still see everything.  Kind of like moving your project from a small desk to a big kitchen table.I tend to have two workspaces.  One for what I\u2019m doing. One for background stuff, like mail and music.\n \nreply",
      "I really like having 2 4K 27\" displays. I even have a third monitor in vertical orientation but don\u2019t use it that often.\nMost often I have my editor on one screen and my browser with developer tools on the other screen.\n \nreply",
      "This stuff is so divisive. You can find seemingly a roughly equal number of people who passionately think the opposite on many of these very-different-from-windows UX choices.\n I\u2019m one. The dock tells me what apps are running and available. There are other ways to find the windows, and running apps don\u2019t need windows.\n \nreply",
      "> What is the purpose of the dock?It\u2019s an app launcher. Since I only open app with Spotlight/Alfred, my dock auto hides and doesn\u2019t waste any real estate.The stage manager in my opinion should have been iPad only. But if you ignore the button in the control center it\u2019s easy to forget that it even exists.\n \nreply",
      "Totally agree. I even created a feature request to allow disabling animation when switching between spaces. But I don't have any faith in them. I enabled auto-hiding of the Dock. When I use FlashSpace I don't need to see the dock anymore because I know what is where. I also integrated the number of messages on my Sketchybar, so that I know if there is a new SMS or Slack message without Dock.\n \nreply",
      "I\u2019m noticing that every single time I wake my (recent) MacBook from sleep, it forgets it\u2019s attached to external monitors for at least 10 seconds. So, a bunch of windows do this confusing jump around and I have to wait for them to settle before I started anything!\n \nreply"
    ],
    "link": "https://github.com/wojciech-kulik/FlashSpace",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        FlashSpace is a blazingly fast virtual workspace manager for macOS \u26a1\n      \n\n\n\nFlashSpace is a blazingly-fast virtual workspace manager for macOS, designed to\nenhance and replace native macOS Spaces. No more waiting for macOS animations.Requirements: macOS 14.0 or later.See: Releases Page.See: Build From Source.The video shows a sample configuration where I use 3 workspaces and switch\nbetween them using hotkeys.FlashSpace allows to define virtual workspaces and assign apps to them. Each workspace is\nalso assigned to a specific display. When you switch to a workspace, the assigned apps are\nautomatically presented and all other apps from the assigned display are hidden.The app allows workspaces to be switched independently on each display.Now you can switch to the workspace using the configured hotkey.FlashSpace enables fast switching"
  },
  {
    "title": "First glimpse inside burnt scroll after 2k years (bbc.co.uk)",
    "points": 68,
    "submitter": "goodcanadian",
    "submit_time": "2025-02-05T17:12:50 1738775570",
    "num_comments": 16,
    "comments_url": "https://news.ycombinator.com/item?id=42951744",
    "comments": [
      "Recent and related:News from Scroll 5 - https://news.ycombinator.com/item?id=42955356 - Feb 2025 (3 comments)\n \nreply",
      "Additional backstory:First word discovered in unopened Herculaneum scroll by CS student - https://news.ycombinator.com/item?id=37857417 - Oct 2023 (210 comments)Vesuvius Challenge 2023 Grand Prize awarded: we can read the first scroll - https://news.ycombinator.com/item?id=39261861 - Feb 2024 (216 comments)\n \nreply",
      "That CS student was  Luke Farritor -- now part of the infamous DOGE team.\n \nreply",
      "I get the ideologues here being mad\u2026 but I don\u2019t get mad to the point where people need to pretend this guy isn\u2019t highly intelligent. Doesn\u2019t it make it better that there are really sharp people on the \u201cDOGE\u201d team.Shouldn\u2019t people be more mad at dummies doing it?",
      "No wonder he mistakenly thinks LLMs can safely be used for document processing. What a shame he\u2019s not a junior developer somewhere he could learn from seniors how engineering actually works, instead of blundering around unsupervised in a fragile environment that\u2019s critical to the world economy. https://web.archive.org/web/20250206221111/https://www.reddi...\n \nreply",
      "nice try.\n \nreply",
      "Seriously. Working overtime\u2026\n \nreply",
      "[flagged]",
      "You may, or may not be asking in jest.  In any case, I think you are alluding to the fact that Luke Farritor, winner of the Vesuvius challenge in 2023 and former SpaceX intern, is now employed by Elon Musk in the Department of Government Efficiency, ostensibly to find waste, fraud, and abuse in government spending.https://www.youtube.com/watch?v=zpflT8XuSyg&t=11s\n \nreply",
      "well, that's cursed knowledge\n \nreply"
    ],
    "link": "https://www.bbc.co.uk/news/articles/c5yvrq7dyg6o",
    "first_paragraph": "X-ray scans and AI have meant the inside of ancient scroll can be revealedA badly burnt scroll from the Roman town of Herculaneum has been digitally \"unwrapped\", providing the first look inside for 2,000 years.The document, which looks like a lump of charcoal, was charred by the volcanic eruption of Mount Vesuvius in 79AD and is too fragile to ever be physically opened.But now scientists have used a combination of X-ray imaging and artificial intelligence to virtually unfurl it, revealing rows and columns of text.More work is needed to make the scroll fully legible to decipher its contents, but the team behind the project say the results are very promising.The ancient scroll was burnt to a crisp by the eruption of Mount Vesuvius\"We're confident we will be able to read pretty much the whole scroll in its entirety, and it's the first time we've really been able to say that with high confidence,\" said Stephen Parsons, project lead for the Vesuvius Challenge, an international competition a"
  },
  {
    "title": "Who Is Being Excluded by Museums' Wholesale Adoption of Digital Technology? (amuseumfornow.com)",
    "points": 6,
    "submitter": "ohjeez",
    "submit_time": "2025-02-05T15:17:00 1738768620",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://amuseumfornow.com/blog/who-is-being-excluded-by-museums-wholesale-adoption-of-digital-technology",
    "first_paragraph": "As someone not only born before - but who studied, worked and even went out and had fun before - the public launch of the internet in April 1993, I am often surprised by the lack of push-back against digital technology, as it continues to flatten our three-dimensional experience of the world.Of course, we are rational and mechanical beings \u2013 a perfect fit for technologies that enable functional tasks - but we are also tactile, sensual and emotional. We crave contact, communication and community and, when we leave our homes, we seek a positive human welcome before feeling at ease in any new environment. It seems to me that the cold impersonality of the digital world often stands in direct opposition to this.In the museums sector, technology forms a prominent and growing part of the visitor experience, especially during early-stage interactions between visitors and institutions. But is its use being integrated with enough nuance and refinement?Digital technologies offer enormous advantag"
  },
  {
    "title": "Obscure islands I find interesting (amanvir.com)",
    "points": 275,
    "submitter": "venusgirdle",
    "submit_time": "2025-02-07T22:23:31 1738967011",
    "num_comments": 76,
    "comments_url": "https://news.ycombinator.com/item?id=42978199",
    "comments": [
      "Some years ago in a very idle moment I was searching for a place on Earth where you could anchor an hypothetical space elevator.You'd need a place near the equator, preferably unsettled but still politically stable. A mountain would be nice to shorten the length, but mountains are difficult.For my internal fantasy I settled on Ascension Island, part of a British Overseas Territory, at 7.5\u00b0 South.It's not natively settled, the only people there are for work, military, spooks, space agencies for tracking and telecommunications. With the arrival of European explorers there was an ecological extinction, mostly the island seems to be barren.And the name, of course, is perfect for a space elevator fantasy.\n \nreply",
      "\"In Ascension\" is really wonderful sci-fi novel set partially on Ascension Island. Recommended if you like Ted Chiang or Jeff VanderMeer style weird, meditative sci-fi.\n \nreply",
      "Looking at both Wikipedia and Google Maps (for Ascension Island), I'm not seeing anything that might pass for either a harbor, or a port facility.Seems like you'd want cheap all-weather shipping, at scale, to & from the Ground end of your space elevator.\n \nreply",
      "Thank you for this. I too am a lover of islands. It seems like a strange thing to be fascinated with, but glad to see there there are others out there!Fun read if you have a chance: Atlas of Remote Islands https://www.amazon.com/Atlas-Remote-Islands-Fifty-Never/dp/0...\n \nreply",
      "When they mention the Sentinelese who inhabit North Sentinel Island in the Indian Ocean as being uncontacted they have to ignore the shipwreck in the inlet on the northwest end of the island.I'm guessing that the mariners who found themselves on the island did not make a very good first impression as representatives of the larger outside world and that this contributed to the hostility towards outsiders that the Sentinelese exhibit.I know there was a bible-thumper a few years back who found himself skewered while trying to help the North Sentinelese find Jesus. That seems like a predictable outcome when you consider that the inhabitants have to be closer to everything that is real and important on their island than we modern people will ever be and likely have their constructs about how the world works so they don't need someone else's Jesus to keep them grounded.Interestingly enough, the only place where I saw any clear indication that the island was inhabited was on the north end of the island near the inlet where the ship is run aground and sunk. Just north of the tree line you can clearly see a well-worn path leading from the woods east of the wreck to the inlet.I'll bet they keep a weather eye out for any new contraptions not of their own making.\n \nreply",
      "They've encountered and traded with people from outside the island, like Anstice Justin during contact attempts between the 80s and 2000s [0]. The direct contact attempts were halted in the 90s due to ethical/health concerns for the sentinelese though, so expeditions after that point were gift-giving missions to monitor and support friendly relations.They became more hostile to expeditions after some fishermen were killed on the island and recovery teams attempted to use helicopters to rescue the bodies before the islanders could bury them.[0] https://www.nature.com/articles/d44151-024-00213-5\n \nreply",
      "Thanks for the historical context. It makes sense that they would prefer not to interact with outsiders.\n \nreply",
      "\u201cthe inhabitants have to be closer to everything that is real and important on their island than we modern people will ever be and likely have\u201dThey undoubtedly have their own absurd mythology describing their origins and the workings of the universe\n \nreply",
      "As they should. That is how people maintain generations-long connections to ancestors and group history, whether it be an oral tradition in songs or stories or a set of written tales.\n \nreply",
      "Or maybe they rape and beat their woman, suffer from high infant mortality and often die excruciating deaths after moderate injuries like a broken arm or cut.\n \nreply"
    ],
    "link": "https://amanvir.com/obscure-islands",
    "first_paragraph": ""
  },
  {
    "title": "From hours to 360ms: over-engineering a puzzle solution (danielh.cc)",
    "points": 60,
    "submitter": "max__dev",
    "submit_time": "2025-02-06T00:26:32 1738801592",
    "num_comments": 12,
    "comments_url": "https://news.ycombinator.com/item?id=42957395",
    "comments": [
      "Sigh. My friend did this problem on pen and paper and made me feel stupid. Their solution was so wildly clever! It relied on the observation that the sum of the rows of the sudoku board (given the digits in use) is a known fixed value, and went from there (I'll leave the rest as an exercise to the reader to avoid spoilers).\n \nreply",
      "This isn't exactly a sudoku board, because they allow for 0.\n \nreply",
      "While it's not a true sudoku board, that invariant still holds. Whichever set of digits you end up using (it'll be the same 9 for rows, columns, and blocks) the sum will be same for all of them. It's also unique to the set of 9 numbers you end up using to solve the puzzle.If you use 1-9, sum is 45. For anything else, it's 45 - (the unused number).\n \nreply",
      "Yep, I'm aware, hence the given digits part. The whole board is still drawn from 9 digits, it's just that precisely which 9 digits is unknown.\n \nreply",
      "I don't think it would make a large difference in runtime, but the bounds aren't quite right.The largest possible value isn't 999,999,999, because that's not a legal value. The largest value is 987,654,321Dividing that by 9, you get 109,739,369, but that's not a legal value either, you'd want to start with 109,738,365 for the gcd as it's a valid possible row. I don't know that all gcds would need to be a valid row, but any gcd larger than 98,765,432 would need to be used at multiples from 1-9; with that gcd or smaller, multiple 10 becomes viable and the gcd doesn't need to be valid with multiple of 1.\n \nreply",
      "I also wrote my solution in Rust. I was pleased that my approach gave me an opportunity to write a linked list and get the chance to apply some rarely used learning[0].My solution doesn't use SIMD, but is actually takes about the same amount of time as the the solution in the article, given the same number of cores, though an glaring weakness of my approach is that it can only scale up to 7 cores as written.Rough outline of how mine works:- Set current best GCD to 1.- Search through all valid board configurations.- Bail out from the search early if the current partially generated board couldn't have a GCD greater than the current maximum found, e.g. if we've only generated two rows of the board, and the GCD of those two rows are already less than the max.- Update the current best GCD as you find higher ones.- Share the current best GCD value across multiple threads. That way the longer the program runs, the earlier and earlier the searches will start bailing out.- Don't always read from the shared variable to avoid contention. Instead, each thread has its own copy of the last value it read which we compare with first before copying and caching the shared value.- Another interesting property of this approach is that it can be used to validate the correct solution even faster than it takes to find it. Instead of initially setting the max GCD to 1, set it to `solution - 1`. That way branches in our search will bail even sooner from the beginning. This leads to the program running about 20% more quickly.Source: https://gist.github.com/lazytype/35b45f3ea81b5c1c5555546fe6f...[0] https://rust-unofficial.github.io/too-many-lists/\n \nreply",
      "Should look into Knuth\u2019s DLX. My JS implementation solved this case in 1.8ms\n \nreply",
      "If anything, what a testament of the massive failure Z3 is.\n \nreply",
      "Unless I missed it, their Z3 solution wasn't even presented. So we can't comment on how good or bad Z3 is without seeing how good or bad their Z3 attempt was.\n \nreply",
      "That is true, indeed.It could be that the author is just massively unskilled at writing Z3 code.\n \nreply"
    ],
    "link": "https://blog.danielh.cc/blog/puzzle",
    "first_paragraph": ""
  },
  {
    "title": "Deep Fake Detector Extension by Mozilla Firefox (addons.mozilla.org)",
    "points": 19,
    "submitter": "Topfi",
    "submit_time": "2025-02-08T22:08:07 1739052487",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=42986613",
    "comments": [
      "Is this new? I tried searching for news or information about this extension, but all I can find is their page about it on Fakespot.https://www.fakespot.com/dfdThey also published an AI image detection addon (marked as experimental) in 2022 although I have no idea if it still works.https://addons.mozilla.org/en-US/firefox/addon/deepfake-dete...\n \nreply",
      "The version history goes back to October, wayback agrees with that.\n \nreply",
      "Google appeared to have picked it up on addons.mozilla.org around Nov 22, 2024.\n \nreply",
      "Does anyone use this? How accurate is it?\n \nreply"
    ],
    "link": "https://addons.mozilla.org/en-US/firefox/addon/deep-fake-detector/",
    "first_paragraph": "The Fakespot Deepfake Detector extension will help you sort out text written by humans from text that has been created using AI tools.Star rating savedThis add-on needs to:This add-on may also ask to:Except where otherwise noted, content on this site is licensed under the Creative Commons Attribution Share-Alike License v3.0 or any later version."
  },
  {
    "title": "A whirlwind tutorial on creating teensy ELF executables for Linux (1999) (muppetlabs.com)",
    "points": 38,
    "submitter": "xtacy",
    "submit_time": "2025-02-07T04:16:49 1738901809",
    "num_comments": 7,
    "comments_url": "https://news.ycombinator.com/item?id=42969322",
    "comments": [
      "Related. Others?A Whirlwind Tutorial on Creating Teensy ELF Executables for Linux - https://news.ycombinator.com/item?id=32524007 - Aug 2022 (10 comments)A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux (1999) - https://news.ycombinator.com/item?id=21846785 - Dec 2019 (22 comments)A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux (2005) - https://news.ycombinator.com/item?id=11709247 - May 2016 (5 comments)Creating Really Teensy ELF Executables for Linux - https://news.ycombinator.com/item?id=8745024 - Dec 2014 (13 comments)The Teensy Files: Creating teensy ELF executables for Linux - https://news.ycombinator.com/item?id=8642734 - Nov 2014 (7 comments)A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux - https://news.ycombinator.com/item?id=5016434 - Jan 2013 (14 comments)Tutorial on Creating Really Teensy ELF Executables for Linux - https://news.ycombinator.com/item?id=875077 - Oct 2009 (16 comments)3998-byte executable reduced to 45 bytes - https://news.ycombinator.com/item?id=68056 - Oct 2007 (10 comments)\n \nreply",
      "Plus if you want them to run on four OSes: https://justine.lol/sizetricks/#elf\n \nreply",
      "Shameless plug: write your program in C, get almost as little size overhead as in the Whirlwind turorial: https://github.com/pts/minilibc686 (libc, compiler, linker, settings)\n \nreply",
      "Does anyone recall an \u201cintro to computing\u201d style book that was available free online and starts with using the gas assembler and talked a lot about elf format executables? I lost the link a while ago and don\u2019t recall the name.\n \nreply",
      "for those excited about tiny ELF executables, or tiny programs in general, check out the Lovebyte size-coding demoparty happening next weekend.  It's likely there will be a few tiny ELF entries there.\n \nreply",
      "That's neat, I didn't know that there was much sizecoding activity with ELFs, except for the BGGP competitions [0]. (Mainly because it's not nearly as easy to output graphics than on all the old-school platforms, I'd imagine.) Does Lovebyte publish previous years' demos anywhere?[0] https://binary.golf/\n \nreply",
      "I don't know if there's a good way to search for them.  Most of the Lovebyte entries can be found on pouet or demozoo.org but I don't know if there's an easy way to filter out only Linux entries.I've written a few sizecoded raspberry pi entries, there's even a writeup of one of them in tmp.out where I loaded some code into the ELF headers https://tmpout.sh/3/08.html\n \nreply"
    ],
    "link": "https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html",
    "first_paragraph": "\n\n\nA Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux\n\n\n\n\n(or, \"Size Is Everything\")\n\n\n\n\n[Dave Barry, \"The Columnist's Caper\"]\n\nIf you're a programmer who's become fed up with software bloat, then\nmay you find herein the perfect antidote.\n\nThis document explores methods for squeezing excess bytes out of\nsimple programs. (Of course, the more practical purpose of this\ndocument is to describe a few of the inner workings of the ELF file\nformat and the Linux operating system. But hopefully you can also\nlearn something about how to make really teensy ELF executables in the\nprocess.)\n\nPlease note that the information and examples given here are, for the\nmost part, specific to ELF executables on a Linux platform running\nunder an Intel x86 architecture. I imagine that a good bit of the\ninformation is applicable to other ELF-based Unices, but my\nexperiences with such are too limited for me to say with certainty.\n\nPlease also note that if you aren't a little bit familiar wit"
  },
  {
    "title": "Keeling Labs (YC W23) Is Hiring an ML Engineer for Applied ML in the Grid (keelinglabs.com)",
    "points": 0,
    "submitter": "",
    "submit_time": "2025-02-08T21:01:10 1739048470",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.keelinglabs.com/jobs",
    "first_paragraph": "Our team builds on experience from Rivian, DeepMind, Inspire, Y Combinator, and Cypress Creek Renewables (one of the nation\u2019s largest renewable energy developers).We also love whiteboards and brainstorming, which is the main reason we\u2019re building in-person in Los Angeles, CA. Our office is in Venice, just a few blocks away from the ocean and Abbot Kinney.CompanyJoin Our TeamBlogContact Us\u00a9 Keeling Labs, Inc. 2025"
  },
  {
    "title": "Ada Gems (2014) (adacore.com)",
    "points": 28,
    "submitter": "Tomte",
    "submit_time": "2025-02-08T20:58:17 1739048297",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=42986149",
    "comments": [
      "I wish more developers knew Ada. It got a ton of things, especially its strong types, right all the way back in 1983.\n \nreply",
      "I use Ada for embedded products and it's the best language for embedded by far. Despite it's reputation I think it's an easy to use language.\n \nreply",
      "I did a lot of Ada programming seven years ago. It is still around mostly in defense\n \nreply"
    ],
    "link": "https://www.adacore.com/gems",
    "first_paragraph": "Login to GNAT TrackerThe Ada Gem of the Week is enjoying it's well earned retirement. But we hope you'll enjoy looking through the archives.Visit our interactive platform designed to teach the Ada and SPARK languages. \u00bbHelp us understand your development needs and request pricing or an evaluation \u00bb"
  },
  {
    "title": "Cities can cost effectively start their own utilities (burke.dev)",
    "points": 164,
    "submitter": "kevinburke",
    "submit_time": "2025-02-07T17:55:40 1738950940",
    "num_comments": 162,
    "comments_url": "https://news.ycombinator.com/item?id=42975492",
    "comments": [
      "I used to live in a small town in Michigan which had city provided power using a dam.  It was inexpensive and highly reliable.  But every couple of years the big power company in the state would try and get the city to sell them the utility.After I moved a city council for whatever reason ended up selling.  As a result the cost of electricity immediately doubled and power outages occurred regularly due to reduced maintenance.  I don't know what they spent the money on that they received but it was a very poor decision that I have to believe they regret.\n \nreply",
      "It sounds like your city was overprovisioned in terms of how much electricity they could supply, and you had the benefit of the cheapest power around (hydroelectric power is very cheap), so when you got plugged into the wider network that the power company was servicing, you got screwed. There's a good chance that power for neighboring towns got cheaper and/or more reliable after the deal given what happened with your power.The town must have either been in huge financial trouble or on a privatization kick.\n \nreply",
      "its extremely unlikely that a town in Michigan was not connected to the Eastern grid\n \nreply",
      "Perhaps I'm too cynical, but somehow I doubt that those with decision making power that were in favour of selling at the time regret much.Our modern political economy is almost entirely focused on ensuring that everything that can be sold to private entities (read, the market) is. In this ideology the sale would be viewed as a success regardless of any practical downsides.\n \nreply",
      "I think this is just the end-stage failures of social democracies. Fund the things now, even if it means selling anything that can generate slight profits in long term. Or provide basic services at reasonable rates. Eventually everything is sold and out sourced, money has been wasted on buying votes and the debt is maxed out. Then the system will fail...\n \nreply",
      "Selling almost any state function to a private entity is almost the opposite of what social democrats want to do\u2026I think you mean neoliberal democracies.\n \nreply",
      "It's the end state of neoliberal policies.  That's the ideological tendency that actually has the obsession with markets and strangling government capacity to do anything other than be a spigot for tax dollars.  Scandinavian social democracies aren't perfect but they don't suffer from these entirely predictable problems to nearly the same degree.\n \nreply",
      "I think one problem is that most people confuse private ownership with \"the market\". Just because a utility company is owned and operated by a private entity does not mean it is influenced by market forces. Utilities fall under a natural or technological monopoly. Due to space constraints it is not desirable or efficient to have multiple companies run pipes, cables, or other infrastructure alongside each other to compete. There are no competitive forces; there is no market. Publicly run institutions or privately run+ publicly regulated institutions better serve the needs of the people in these conditions.\n \nreply",
      "Sure, they do we're just not as far along the curve!That said, who is to say the trend isn't reversible some day.Also let's not forget the selling to private operators does provide benefits, not always, it's not the magic fix we pretend it is.\n \nreply",
      "Neoliberalism fails because of what economists call \"the theory of the second best\". Neoliberalism fundamentally assumes that the best practical system is as close as possible to an ideal free market, but it's not, due to local minima (often ones we've already found!) often being better.The best system is a free market, if possible. But the second best system may not be close to the best system, it may be a local minima that is very different.A classic example is that small companies and no unions is theoretically best, but monopoly unions vs monopoly companies is the second best (since there's no single monopoly, so they negotiate something close to the theoretical ideal).Free markets are best, but if the government is going to heavily subsidise and regulate the power companies (as they are natural monoplolies, so they either get regulated or they abuse their position) then maybe it's best to just cut out the middle man.\n \nreply"
    ],
    "link": "https://kevin.burke.dev/kevin/norcal-cities-new-utility/",
    "first_paragraph": "I don't think PG&E ratepayers understand how much higher the rates they pay\r\nare than what it actually costs PG&E to generate and transmit the electricity\r\nto their house. The average PG&E electricity charge now starts at 40 cents\r\nper kilowatt hour and goes up from there. Silicon Valley Power,\r\nSanta Clara's utility company, is getting power to customers for 17 cents per\r\nkilowatt hour. Sacramento's utility company charges\r\nabout the same.PG&E's rates are high enough that, even with the massive headache and expense\r\ninvolved, it's feasible for cities to create their own utility and undercut\r\nPG&E's rates. When the savings per household are around $800-$1200 per\r\nyear, though, they should take it seriously.Here are the basic components of how much it costs to get electricity to your\r\nhouse.Generation: The cost to actually generate the electricity in a power plant\r\nor utility-scale solar farm. This varies by time of day but typically costs\r\nabout 4 cents per kilowatt hour; you can see t"
  },
  {
    "title": "Show HN: Chez Scheme txtar port from Go (sr.ht)",
    "points": 53,
    "submitter": "hellcow",
    "submit_time": "2025-02-08T18:24:39 1739039079",
    "num_comments": 5,
    "comments_url": "https://news.ycombinator.com/item?id=42984962",
    "comments": [
      "The Go version treats file data as byte arrays; might want to do the same and use Scheme bytevectors instead of strings. OTOH the docs say it's not supposed to be a general binary format...\n \nreply",
      "Simple format. Makes me want to write a parser for it using a shared buffered reader library I\u2019m working on in Rust.\n \nreply",
      "txtar is used in the testsuite package to make writing CLI (blackbox) tests really easy. It adds a header section for the steps to run and comparisons to make. Often you compare actual output with golden data.(https://github.com/golang/go/tree/master/src/cmd/go/testdata...)The tools have been extracted and made installable from here: https://github.com/rogpeppe/go-internal/tree/master/cmd\nThis is really handy for any project to have people submit reproducers as a single file anyone can run. These tools make it so you can transform between txtar and files on disk, and then run the txtar (testscript) as a test or directory of tests.I have built them into my hof tool, \"hof run [--mode test] file.txtar\" so you run them as either test files or multifile scripts. The second option is handy if you want to eject a file onto the filesystem without having to do echo or EOF business in bash scriptshttps://github.com/hofstadter-io/hof/tree/_dev/script/runtim...\n \nreply",
      "I have been using txtar to provide context to LLM's recently.\n \nreply",
      "https://rt.ht (greetings from \u2026, an actual public suffix)\n \nreply"
    ],
    "link": "https://git.sr.ht/~egtann/txtar/",
    "first_paragraph": "\n\n                You can also use your local clone with\n                git send-email.\n              \ntxtar enables you to work with a simple text archive format compatible with\nhttps://golang.org/x/tools/txtar. It concatenates files together and allows for\na top-level comment.This format is easy for humans to read and write by hand and is perfect for\ntest data.If you want to remove the library from your system, simply run make uninstall.This library requires:You can obtain these libraries and many more via Thunderchez:All the exports of this library are documented with type expectations. I\nencourage you to scan the implementation.A few common example usecases are presented below for convenience:To use this library, simply import txtar:Copyright (C) 2025 Evan Tann, ParaVoce LLCThis program is free software: you can redistribute it and/or modify it under\nthe terms of the GNU Affero General Public License as published by the Free\nSoftware Foundation, either version 3 of the License, or"
  },
  {
    "title": "RISC-V Mainboard for Framework Laptop 13 is now available (frame.work)",
    "points": 132,
    "submitter": "WithinReason",
    "submit_time": "2025-02-05T09:43:48 1738748628",
    "num_comments": 32,
    "comments_url": "https://news.ycombinator.com/item?id=42946223",
    "comments": [
      "I was just looking at modern Thinkpad T14 offerings (Gen6). They offer ARM snapdragon and AMD. No Intel. https://www.lenovo.com/us/en/c/laptops/thinkpad/thinkpadt/Times are changing\n \nreply",
      "> They offer ARM snapdragon and AMD.They seem to come with Windows ARM pre-installed, but if one wanted to (also?) run Linux on them, which distro(es) would be available?\n \nreply",
      "None. I was down-voted during the launch for saying that there won't be any meaningful support from Qualcomm and 6 months later ... there is none. Browse reddit thread to see how thing are (non)working on Qualcomm based laptops.\n \nreply",
      "With UEFI lots of arm64 distros both Linux and BSD should boot, but quite possibly have very poor periferal support. pcie and graphics seem like likely candidates. If pcie isn\u2019t working you may be able to load a ram disk, but it wouldn\u2019t be usable as a laptop. (Given nvme storage)\n \nreply",
      "really? I know there's quite a few arm64 distributions ... that's pretty strange. What about WSL2 and what about NetBSD?\n \nreply",
      "\"Really\" as a surprise or you are confronting the veracity of my statement?No, NetBSD is not working on Qualcomm based laptops. \nI also know quite a few arm64 distributions ... like LineageOS, which works OK-ish on my phone.This thread however is about laptops in a sense one expects from the laptop, i.e. hardware accelerated video, WiFi 5 and above, bluetooth, woking sleep/resume.I don't understand what exactly is strange here for you.\n \nreply",
      "They must not care about Linux as much as I think. I thought it's kinda standard these days to release laptops that plausibly work with at least Ubuntu, in some limited way.I must live in a bubble.\n \nreply",
      "I would say Linux support even for modern x86 laptops is not great. Take for example Zenbook S series, both AMD and Intel. While most of the things are kind of working, they are not that stable. I would say Linux support peaked somewhere on 12th generation Intel laptops.\n \nreply",
      "It's not about the arm as an instruction set (I'm writing this from the arm machine running linux). It's the drivers, bootloader, all the fdt glue. You don't just need support for arm, but for the specific board on the specific SOC.Want a different board on a soc that already works? Welcome to the world of writing this kind of things: https://github.com/torvalds/linux/blob/master/arch/arm64/boo... and compiling the kernel from some dude's branch instead of going with mainline.I have the risc thing too, that magically works on mainline kernel somehow, but is slow.\n \nreply",
      "It supports standard UEFI boot, Ubuntu has a WIP image you can use that has some extra patches, and with some fiddling you can get other distros, assuming you use a really recent kernel with a supported device tree and maybe you need some firmware updates and a kernel patch or two (search 'x1e' in the Linux tree to see if yours is in there.) Wifi, USB-C etc work last I checked. Not sure about BT or general sound support or anything like that.Overall though, things \"work\" but as far as usable goes, it seems to remain in a pretty poor state; especially given the lack of accelerated graphics combined with no NUC/SFF options. I guess WSL2 is probably okay. But it's a shame, because the hardware does seem pretty nice.When some NUC options come out you'll at least be able to use it in a headless form factor, I guess.\n \nreply"
    ],
    "link": "https://frame.work/gb/en/blog/risc-v-mainboard-for-framework-laptop-13-is-now-available",
    "first_paragraph": ""
  },
  {
    "title": "Show HN: Turn Screenshots into Designs Instantly (getklippy.com)",
    "points": 18,
    "submitter": "sidebread",
    "submit_time": "2025-02-08T22:00:21 1739052021",
    "num_comments": 14,
    "comments_url": "https://news.ycombinator.com/item?id=42986558",
    "comments": [
      "Former Product Marketing Manager here. When I saw the word 'designs' on your landing page, I assumed the application would convert my screenshot into a Figma file/equivalent. Instead it looks like your app creates social ready images of screenshotted UI. I wonder if there's a better word to use than 'designs' that better captures what looks like the intended use case.\n \nreply",
      "Thanks for your feedback, yea I got to admit there's a bit of sales language there. Hopefully I'll incorporate some more features in the future. At the moment I need to sort out something I missed - perception of a one file .exe file.\n \nreply",
      "Wait, so I take a screenshot of something and this gives it an edge, drop shadow and a background with some pattern?I can do that probably quicker on, say, Affinity or Figma and definitely better.The real question though is: does it use AI?\n \nreply",
      "There is no way I would ever download an .exe for something like this. If all it does is take an image, add some background and borders, and give you some sliders to adjust things... that can be a web page, where I am not putting my system's security at risk.\n \nreply",
      "You're right of course, but it's kind of crazy that downloading an exe is putting our security at risk, in this day and age. It feels like our OSes are stuck in the middle ages.\n \nreply",
      "Fair point. Do you have any recommendations on how to do this alternatively, for Windows? I defaulted to .exe but obviously didn't think about the user perception of it.\n \nreply",
      "Like the user above says, a web service using CSS/JS for the image manipulation (you can get quite good perf with CSS these days)\n \nreply",
      "After reading the landing page, I'm still unsure what the exact use case is for this? Could just be misunderstanding the design-test-prototype workflow, but a straightforward example would be nice.Edit: upon reading through it again I'm realizing it's a pretty screenshot maker. Which is neat. Unsure if it calls for a dedicated .exe though.\n \nreply",
      "Thanks for the feedback. I'm actually a bit new to product development. What would be a recommended alternative to an executable in this case? After reading some of the other comments I'm aware of the perceived security risk.\n \nreply",
      "What UI framework(s) does it use?\n \nreply"
    ],
    "link": "https://getklippy.com",
    "first_paragraph": ""
  }
]