[
  {
    "title": "Using Claude Code to modernize a forgotten Linux kernel driver (dmitrybrant.com)",
    "points": 100,
    "submitter": "dmitrybrant",
    "submit_time": "2025-09-07T23:53:47 1757289227",
    "num_comments": 21,
    "comments_url": "https://news.ycombinator.com/item?id=45163362",
    "comments": [
      "A good case study. I have found these two to be good categories of win:> Use these tools as a massive force multiplier of your own skills.Claude definitely makes me more productive in frameworks I know well, where I can scan and pattern-match quickly on the boilerplate parts.> Use these tools for rapid onboarding onto new frameworks.I\u2019m also more productive here, this is an enabler to explore new areas, and is also a boon at big tech companies where there are just lots of tech stacks and frameworks in use.I feel there is an interesting split forming in ability to gauge AI capabilities - it kinda requires you to be on top of a rapidly-changing firehose of techniques and frameworks. If you haven\u2019t spent 100 hours with Claude Code / Claude 4.0 you likely don\u2019t have an accurate picture of its capabilities.\u201cEnables non-coders to vibe code their way into trouble\u201d might be the median scenario on X, but it\u2019s not so relevant to what expert coders will experience if they put the time in.reply",
      "This is a good takeaway. I use Claude Code as my main approach for making changes to a codebase, and I\u2019ve been doing so every day for months. I have a solid system I follow through trial and error, and overall it\u2019s been a massive boon to my productivity and willingness to attempt larger experiments.One thing I love doing is developing a strong underlying data structure, schema, and internal API, then essentially having CC often one-shot a great UI for internal tools.Being able to think at a higher level beyond grunt work and framework nuances is a game-changer for my career of 16 years.reply",
      "> Use these tools as a massive force multiplier of your own skills.I've felt this learning just this week - it's taken me having to create a small project with 10 clear repetitions, messily made from AI input. But then the magic is making 'consolidation' tasks where you can just guide it into unifying markup, styles/JS, whatever you may have on your hands.I think it was less obvious to me in my day job because in a startup with a lack of strong coding conventions, it's harder to apply these pattern-matching requests since there are fewer patterns. I can imagine in a strict, mature codebase this would be way more effective.reply",
      "It's a good example of a developer who knows what to do with and what to expect from AI. And a healthy sprinkle of skepticism, because of which he chose to make the driver a separate module.reply",
      "I hope Dmitry did a good job.  I've got a box of 2120 tapes with old backups from > 20 years ago, and I'm in the process of resurrecting the old (486) computer with both of my tape drives (floppy T-1000 and SCSI DDS-4).  It would be nice to run a modern kernel on it.reply",
      "I had a suspicion AI would lower the barrier to entry for kernel hacking. Glad to see it's true. We could soon see much wider support for embedded/ARM hardware. Perhaps even completely new stripped-down OSes for smart devices.reply",
      "Really is an exciting future ahead. So many lost arts that don't need a dedicated human to relearn deep knowledge required to make an update.A reminder though these LLM calls cost energy and we need reliable power generation to iterate through this next tech cycle.Hopefully all that useless crypto wasted clock cycle burn is going to LLM clock cycle burn :)reply",
      "When I read an article like this it makes me think about how the demand for work to be done was nowhere close to being fully supplied by the pre-LLM status quo.reply",
      "Upgrades and \u201ccollateral evolution\u201d are very strong use cases for Claude.I think the training data is especially good, and ideally no logic needs to change.reply",
      "Neat stuff. I just got Claude code and am training myself on Rails, I'm excited to have assistance working through some ideas I have and seeing it handle this kind of iterative testing is great.One note: I think the author could have modified sudoers file to allow loading and unloading the module* without password prompt.reply"
    ],
    "link": "https://dmitrybrant.com/2025/09/07/using-claude-code-to-modernize-a-25-year-old-kernel-driver",
    "first_paragraph": "Dmitry BrantHe's just this guy, you know?As a bit of background, one of my hobbies is helping people recover data from old tape cartridges, such as QIC-80 tapes, which were a rather popular backup medium in the 1990s among individuals, small businesses, BBS operators, and the like. I have a soft spot for tape media; there\u2019s something about the tactile sensation of holding these tapes in my hands that makes the whole process very joyful, even though QIC tapes are notorious for their many design flaws. With some careful inspection and reconditioning, the data on these tapes is still totally recoverable, even after all these years.Whenever I receive a QIC-80 tape for recovery, I power up one of my older PC workstations which has the appropriate tape drive attached to it, and boot into a very old version of Linux (namely CentOS 3.5), because this is the only way to use the ftape driver, which is the kernel driver necessary for communicating with this tape drive, allowing the user to dump t"
  },
  {
    "title": "Pico CSS \u2013 Minimal CSS Framework for Semantic HTML (picocss.com)",
    "points": 244,
    "submitter": "mpweiher",
    "submit_time": "2025-09-07T20:31:38 1757277098",
    "num_comments": 72,
    "comments_url": "https://news.ycombinator.com/item?id=45161855",
    "comments": [
      "There's also this site which allows easy switching/previewing of classless CSS themes:https://www.cssbed.com/reply",
      "I like that resource, but it's missing an important one: github-markdown-css[1]. Given that most devs these days read a lot of Github markdown, it seems like a reasonable starting place for a css system.1 - https://github.com/sindresorhus/github-markdown-cssreply",
      "Tufte looks very elegantreply",
      "Tufte frequently makes the rounds here \u2014 most recently 4 days ago: https://news.ycombinator.com/item?id=45119103reply",
      "See also https://dohliam.github.io/dropin-minimal-css/ which has quite a few more (including github-markdown-css mentioned in a sibling comment).reply",
      "Love pico. It\u2019s my default starting point for nearly every side project. Sometimes I will reach for Neat [0] which is a great deal smaller.[0]: https://neat.joeldare.com/reply",
      "Whoa, that\u2019s mine. Thanks for the mention. :)I use it for almost everything. I just made a note to try it with the demo and to steal some ideas from pico (while keeping the size of neat tiny).reply",
      "Good stuff. And it's lovely to see something inspired by the truly awesome 100 Rabbits.reply",
      "Even though I use Tailwind CSS for larger projects, there are smaller, self-contained cases where Pico CSS is a perfect fit.\nTheir \"Usage scenarios\" page describes it spot on:https://picocss.com/docs/usage-scenariosI discovered Pico CSS just last week, and it turned out to be exactly what I needed for a small Hugo theme (govanity, vanity URLs for Go modules/packages with Hugo: https://github.com/foundata/hugo-theme-govanity). From discovering Pico, reading the docs, and integrating it, I was done in about two hours.One thing that's surprisingly easy to overlook in between:\nCSS variables: https://picocss.com/docs/css-variables and Colors: https://picocss.com/docs/colorsreply",
      "- url updated!reply"
    ],
    "link": "https://picocss.com",
    "first_paragraph": ""
  },
  {
    "title": "The MacBook has a sensor that knows the exact angle of the screen hinge (twitter.com/samhenrigold)",
    "points": 564,
    "submitter": "leephillips",
    "submit_time": "2025-09-07T15:20:29 1757258429",
    "num_comments": 278,
    "comments_url": "https://news.ycombinator.com/item?id=45158968",
    "comments": [
      "The lid angle sensor is also serialized to the motherboard: you cannot replace it, or the motherboard, without performing calibration, which can be performed by an apple authorized service provider, or alternatively, in Europe (and elsewhere where Apple offers parts for self-service repair), you can purchase the sensor from Apple, connect the machine to the internet after replacing it, to then perform the calibration, only if the sensor was purchased from Apple.So the hardware is capable of performing the calibration, Apple just does not graciously grant you the right to install a recycled or third party sensor in your machine.https://www.ifixit.com/Answers/View/759262/Torn+Lid+angle+se...reply",
      "Okay so here's the argument I've heard: if arbitrary replacements of the lid sensor were possible, it would be feasible to create a tampered sensor that failed to detect the MacBook closing, thus preventing it from entering sleep mode.This could then be combined with some software on the machine to turn a MacBook into a difficult to detect recording device, bypassing protections such as the microphone and camera privacy alerts, since the MacBook would be closed but not sleeping.Additionally, since the auto-locking is also tied to triggering sleep mode, it would be possible to gain access to a powered off device, switch the sensors, wait for the user to attempt to sleep mode the device, and then steal it back, completely unlocked with full access to the drive.Are these absolutely ridiculous, James Bond-tier threat assessments? Yes, absolutely. But they're both totally feasible (and not too far off from exploits I've heard about in real life), and both are completely negated by simply serializing the lid sensor.Should Apple include an option, buried in recoveryOS behind authentication and disk unlock steps like the option to allow downgrades and allow kernel extensions, that enables arbitrary and \"unauthorized\" hardware replacements like this? Yes, they really should. If implemented correctly, it would not harm the security profile of the system while still preventing the aforementioned exploits.There are good security reasons for a lot of what Apple does. They just tend to push a little too far beyond mitigating those security issues into doing things which start to qualify as vendor lock-in.I really wish people would start to recognize where the line should be drawn, rather than organizing into \"security of the walled garden\" versus \"freedom of choice\" groups whenever these things get brought up. You can have both! The dichotomy itself is a fiction perpetuated to defend the status quo.reply",
      "If we're talking Bond-tier assessments then Apple already sell a covert microphone: AirTags. They \u201chave no microphone\u201d according to product specs, but they do have a huge speaker, and a speaker and microphone are the same thing like a generator and motor are the same thing: https://in.bgu.ac.il/en/Pages/news/eaves_dropping.aspxreply",
      "Keeping a victim device unlocked when the lock state is responsible for encryption key state is a totally legitimate risk.With that being said, I don\u2019t think Apple see this specific part as a security critical component, because the calibration is not cryptographic and just sets some end point data. Apple are usually pretty good about using cryptography where they see real security boundaries.reply",
      "The line should be drawn by the owner of the device.As the user and owner of the product, I should be the sole decider about my own security posture, not some company who doesn\u2019t know my use case or needs.It\u2019s crazy how we\u2019ve managed to normalize the manufacturer making these kinds of blanket decisions on our behalf.reply",
      "How does Apple know the owner of the product has authorized the HW change?There\u2019s a secondary argument you could make here whereby because the replacements must be valid Apple parts that have uniform behavior and tolerances, the strength of the secondary market is stronger and Apple products have a stronger resale value as a result, because you\u2019re not going to encounter a MacBook with an arbitrary part replaced that you as the second-hand buyer know nothing about (this is why the secondary market for cars doesn\u2019t work without the ability to lookup the car history by VIN).reply",
      "If repair shops can buy the $130 calibration machine, presumably the super spy in this story (who for some reason couldn't steal the data while they were replacing the lid sensor, nor can they steal the data when the laptop's in use, but somehow can steal the data when it's idle with the lid down) can also get a calibration machine, and then deliberately set the zero point incorrectly.reply",
      "Isn't there software that does exactly this? Called caffeine, I believe?reply",
      "Installing software generally requires user permission. Replacing Hw can be done surreptitiously. At least that\u2019s the strongman variant of the security argument.reply",
      "They call it \"calibration\" when it's presumably nothing more than writing a serial number to an EEPROM somewhere. See also the related story of sabotaging iPad screens to work but subtly degrade when the serials don't match, and cameras that only semi-work when swapped (with genuine original Apple parts). This type of pathological lying that Apple loves to do is why I'll never buy or recommend to others any of their products.https://news.ycombinator.com/item?id=24955071https://news.ycombinator.com/item?id=36926276reply"
    ],
    "link": "https://twitter.com/samhenrigold/status/1964428927159382261",
    "first_paragraph": "We\u2019ve detected that JavaScript is disabled in this browser. Please enable JavaScript or switch to a supported browser to continue using x.com. You can see a list of supported browsers in our Help Center.Help Center\nTerms of Service\nPrivacy Policy\nCookie Policy\nImprint\nAds info\n      \u00a9 2025 X Corp.\n    "
  },
  {
    "title": "The demo scene is dying, but that's alright (datagubbe.se)",
    "points": 72,
    "submitter": "zdw",
    "submit_time": "2025-09-07T22:34:23 1757284463",
    "num_comments": 27,
    "comments_url": "https://news.ycombinator.com/item?id=45162803",
    "comments": [
      "\"The scene is dead\" has become a meme by now. For example the \"new talent\" Meteoriks award is introduced with \"For a scene that has been dead since 1999, our walking dead are pretty fresh\".It is well alive. Sure, we still see some of the same people from 1989, and the average age is certainly going up, but it absolutely doesn't mean we aren't seeing new blood. Styles change, technical achievement is usually seen in the sizecoding or \"wild\" competitions, while PC demos tend to be more cinematic and focused on art. We are seeing new things, like livecoding shaders and fantasy consoles. Of course, the Amigas and other oldschool platforms are still there, with new tricks being discovered year after year.There are still regular demoparties. Revision, the successor to Breakpoint and Mekka Symposium is doing well year after year. With the addition of some online events like Lovebyte.Things come and go, but there is no sign of the scene really being dead. Heck, we even seen older demosceners bring their children to the parties, with some of them already doing cool stuff.reply",
      "https://www.youtube.com/watch?v=IFXIGHOElrEhttps://www.pouet.net/prod.php?which=59105reply",
      "Exactly; it\u2019s like model railroads or stamp collecting. Never truly dead!(I mean this with deep sarcasm.)reply",
      "I would love more outlets for creative coding, I feel like neocities is a bit like that. That said there isn't really a scene or real sense of community (AFAIK). I mean someone liked something I uploaded once, but I never interacted with them again.Cohost had fun vibes like that as well, but I guess it's no longer with us. Same with Glitch, but admittedly I didn't use it in the last few years, but it was my go to option for hosting a snippet of unserious HTML. \"HTML in the park\" does seem like one fun IRL outlet for this kind of thing, I found out my city has one and I want to go to it.Admittedly none of these were really demo scenes or places where creative coding was exclusively fostered, but creative coding and demo-like-scenes communities probably exist but are more likely some obscure discord server.reply",
      "HTML in the Park is one of my favourite events in Toronto!  Great crowd, I highly recommend attending yours or setting one up if nobody runs one.reply",
      "The demo scene inspired me to keep my next\u2011gen terminal [0] tiny: it is under 5MB (Mac download was once 900 KB) and my aim is to get all downloads down to ~1MB. If demosceners can do it, regular indie devs really have no excuse.This scene isn\u2019t dead; we should just look beyond 3D glitter. See File Pilot [1] for another compact, clever example.[0] https://terminal.click[1] https://filepilot.techreply",
      "For me, one of the greatest examples of this style is Reaper[0]. A completely functional professional audio DAW in a 12 to 20MB download (depending on your architecture and OS).--  0: https://www.reaper.fm/download.phpreply",
      "I was just walking down demoscene memory lane yesterday. Some of my favorite demoscene demos were Amiga ones (playlist: https://www.youtube.com/watch?v=RPdB_zdyMbM&list=PLwds84NCmJ...), which lead me to \"The Greatest Video Game Tech Demo Ever,\" Shadow the Beast: https://www.youtube.com/watch?v=ovwFjgAFhOsThat video's great because it breaks down how Psygnosis managed to get 12 layers of parallax scrolling at 50fps and 128 colors on-screen. I never really loved the game as much as (say) Blood Money, but it was an awesome accomplishment in the same way demoscene demos were!reply",
      "This saddens me. The idea of the demoscene really resonated with me, and I was curious about making stuff and joining.reply",
      "Then go and do it. As the article says, a lot of the scene is very open to newcomers today.reply"
    ],
    "link": "https://www.datagubbe.se/sceneherit/",
    "first_paragraph": "datagubbe.se \u00bb\nthe demo scene is dying, but that's alright\n\nAutumn 2025\n\nThe demo scene was recently proclaimed a UNESCO Living Cultural Heritage in Sweden, following several other European nations. As a scener, I'm not quite sure how I feel about that. It's amusing on some level, there's maybe even a bit of pride involved, but also fear that it might bring unwanted attention to a Good Thing, because Good Things are always at risk of spoiling when receiving too much attention. Then again, such worries are probably unfounded. Despite being a living cultural heritage, the demo scene is - all things considered - slowly approaching its demise.\n\nThe scene - incorporating the cracking scene of the 1980s and early 1990s - has been declared dead several times over since the late 1980s. Some claimed the Amiga would kill it, others that the PC would destroy its soul or that the Internet would rob it of its essence. This is to be expected: In a subculture - which is what the scene is - there's ty"
  },
  {
    "title": "GPT-5 Thinking in ChatGPT (a.k.a. Research Goblin) is good at search (simonwillison.net)",
    "points": 137,
    "submitter": "simonw",
    "submit_time": "2025-09-06T19:42:48 1757187768",
    "num_comments": 123,
    "comments_url": "https://news.ycombinator.com/item?id=45152284",
    "comments": [
      "I find ChatGPT to be great at research too-but there are pathological failure modes where it is biased to shallow answers that are subtly wrong, even when definitive primary sources are readily available online:https://www.fortressofdoors.com/researchers-beware-of-chatgp...reply",
      "This isn't really how you described. You have an opinion that conflicts with the research literature. You published a blog about that opinion, and you want ChatGPT to say you're to accept your view.Your view is grinding a political axe and I don't think you're in a position to objectively assess whether ChatGPT failed in this case.reply",
      "What are you talking about? There are verifiable primary sources that ChatGPT was not citing. There are direct primary historical sources that lay out the full budget of the historical German colony in extreme detail, that directly contradict assertions made in the Silagi paper, that\u2019s not a matter of opinion that\u2019s a metter of verifiable fact.Also what \u201caxe\u201d am I grinding??? The findings are specifically inconvenient for my political beliefs, not confirming my priors! My priors would be flattered if Silagi was correct about everything but the primary sources definitively prove he\u2019s exaggerating.> You published a blog about that opinion, and you want ChatGPT to say you're to accept your view.False, and I address this multiple times in the piece. I don\u2019t want ChatGPT to mindlessly agree with me, I want it to discover the primary source documents!reply",
      "Yea this isn't really a chat gpt problem as a source credibility problem no?reply",
      "It\u2019s mostly that it was not citing verifiable - and available online - primary source documents, the way I would expect an actual researcher investigating this question would.reply",
      "Yes, this is very much my experience too.Switching to GPT5 Thinking helps a little, but it often misses things that it wouldn't when I was using o3 or o1.As an example, I asked it if there were any incidents involving Botchan in an Onsen.  This is a text that is readily available and must have been trained on; in the book, Botchan goes swimming in the onsen, and then is humiliated when the next time he comes back, there is a sign saying \"No swimming in the Onsen\".According to GPT5 it gives me this, which is subtly wrong.> In the novel, when Botchan goes to D\u014dgo Onsen, he notes the posted rules of the bath. One of them forbids things like:\n> \u201cNo swimming in the bath.\u201d (\u6cf3\u3050\u3079\u304b\u3089\u305a)\n> \u201cNo roughhousing / rowdy behavior.\u201d (\u7121\u95c7\u306b\u9a12\u3050\u3079\u304b\u3089\u305a)\n> Botchan finds these signs funny because he\u2019s exactly the sort of hot-headed, restless character who might be tempted to splash around or make noise. He jokes in his narration that it seems as though the rules were written specifically to keep people like him out.Incidentally, Dogo Onsen still has the \"No swimming sign\", or it did when I went 10 years ago.reply",
      "It really is great. When I was still on Reddit, I made regular use of the \"Tip of My Tongue\" sub to track down obscure stuff I half-remembered from years ago. It mostly worked, but there were a few stubborn cases that went unsolved, even after pouring every ounce of my Google Fu into the endeavor. I recently took the text of these unsolved posts and submitted them to Deep Research -- and within an hour, it had cracked four of them, and put me on track to find a fifth myself. Even if the reasoning part isn't entirely up to par, there's still something really powerful about being able to rapidly digest dozens of search results and pull out relevant information based on a loose description. And now I can have that kind of search power on demand in just a few minutes, without having to deal with Reddit's spambots and post filters and hordes of users who don't read the question or follow the sub's basic rules.reply",
      "I do miss the earlier \"heavy\" models that had encyclopedic knowledge vs the new \"lighter\" models that rely on web search.  Relying on web search surfaces a shallow layer of knowledge (thanks to SEO and all the other challenges of ranking web results) vs having ingested / memorized basically the entirety of human written knowledge beyond what's typically reachable within the first 10 results of a web search (eg: digitized offline libraries).reply",
      "I kept search off for a long time due to it tanking the quality of the responses from ChatGPT.I recently added the following to my custom instructions to get the best of both worlds.# ModesWhen the user enters the following strings you should follow the following mode instructions:1. \"xz\": Use the web tool as needed when developing your answer. \n2. \"xx\": Exclusively use your own knowledge instead of searching the internet.By default use mode \"xz\". The user can switch between modes during a chat session. Stay with the current mode until the user explicitly switches modes.reply",
      "I feel the opposite. Before I can use information from a model's \"internal\" knowledge I have to engage in independent research to verify that it's not a hallucination.Having an LLM generate search strings and then summarize the results does that research up front and automatically, I need only click the sources to verify. Kagi Assistant does this really well.reply"
    ],
    "link": "https://simonwillison.net/2025/Sep/6/research-goblin/",
    "first_paragraph": "6th September 2025\u201cDon\u2019t use chatbots as search engines\u201d was great advice for several years... until it wasn\u2019t.I wrote about how good OpenAI\u2019s o3 was at using its Bing-backed search tool back in April. GPT-5 feels even better.I\u2019ve started calling it my Research Goblin. I can assign a task to it, no matter how trivial or complex, and it will do an often unreasonable amount of work to search the internet and figure out an answer.This is excellent for satisfying curiosity, and occasionally useful for more important endeavors as well.I always run my searches by selecting the \u201cGPT-5 Thinking\u201d model from the model picker\u2014in my experience this leads to far more comprehensive (albeit much slower) results.Here are some examples from just the last couple of days. Every single one of them was run on my phone, usually while I was doing something else. Most of them were dictated using the iPhone voice keyboard, which I find faster than typing. Plus, it\u2019s fun to talk to my Research Goblin.They used "
  },
  {
    "title": "Analog optical computer for AI inference and combinatorial optimization (nature.com)",
    "points": 29,
    "submitter": "officerk",
    "submit_time": "2025-09-04T17:06:14 1757005574",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=45129507",
    "comments": [
      "I really want to believe, but if I had a penny for every time that analog, optical, ternary, clockless, or other radically non-standard computing paradigms were supposed to revolutionize the industry... I'd have a nice pile of pennies.Electronic signaling is just so marvelously easy to scale that the right path was clear pretty much from day one. We don't have that path for other operating principles right now. As for synchronous operation, binary signaling, and so forth, they're once again just scaling tools that let us crank out designs with billions of transistors without hand-crafting every piece or making the abstractions more leaky than they already are.reply",
      "Spatial light modulators are many orders slower than a cpu clock cycle. How many of these in parallel would be required to compete with an H100?reply"
    ],
    "link": "https://www.nature.com/articles/s41586-025-09430-z",
    "first_paragraph": "Thank you for visiting nature.com. You are using a browser version with limited support for CSS. To obtain\n            the best experience, we recommend you use a more up to date browser (or turn off compatibility mode in\n            Internet Explorer). In the meantime, to ensure continued support, we are displaying the site without styles\n            and JavaScript.Advertisement\nNature\n\n                         (2025)Cite this article\n11k Accesses79 AltmetricMetrics detailsArtificial intelligence (AI) and combinatorial optimization drive applications across science and industry, but their increasing energy demands challenge the sustainability of digital computing. Most unconventional computing systems1,2,3,4,5,6,7 target either AI or optimization workloads and rely on frequent, energy-intensive digital conversions, limiting efficiency. These systems also face application-hardware mismatches, whether handling memory-bottlenecked neural models, mapping real-world optimization problems o"
  },
  {
    "title": "Everything from 1991 Radio Shack ad I now do with my phone (2014) (trendingbuffalo.com)",
    "points": 119,
    "submitter": "vinnyglennon",
    "submit_time": "2025-09-07T20:26:30 1757276790",
    "num_comments": 101,
    "comments_url": "https://news.ycombinator.com/item?id=45161816",
    "comments": [
      "Author seems to have misread what the \u201d10-channel desktop scanner\u201d is about. He seems to think it\u2019s referring to an image scanner? I think it\u2019s a device that monitors AM or FM radio for you.I\u2019m sure it\u2019s been made obsolete, but I\u2019m not sure it was by the iPhone.reply",
      "It monitored various emergency and other radio channels used by police, fire department, ambulance service, taxis and so on. The '10 channels' is in reference to how many tuned channels the thing can scan.Here is some more detail for that particular scanner:https://www.rigpix.com/rs-realistic/realistic_pro57.htmreply",
      "Waiting for someone to explain that iPhone has replaced this too (via streaming), completely unaware that the origin of the stream is likely a 3.5mm jack on... an actual scanner.reply",
      "While very true, so long as someone keeps that scanner online and the source remains unencrypted, only one person needs to own a scanner rather than hundreds.Sadly, my city now encrypts all police channels. Fire and EMS can still be streamed though.reply",
      "Likely replaced by group text for most. my grandpa drove snowplow for the state and often had the scanner listening for when he might be called in. he couldn't respond directly but he did call dispatch to give his ability to come in. Pagers probably replaced that for many.reply",
      "It might be possible to use iPhone as scanner with RTL-SDR dongle. I don't know if there is any scanner software for the iPhone, most of it is PC software.reply",
      "Anything is possible with accesories but that breaks the thesis.reply",
      "For the moment, yes. But in practice, this years dongles are next years built-ins. The same was the case with GPS, accelerometers, temp and humidity sensors, blood oxygen sensors, incident light detection, finger print reading, cameras and so on. Phones absorb sensors like toddlers consume cookies, they can't get enough of them.reply",
      "I want to those things. Tricorder please.reply",
      "Ah, I remember those now! I forgot they were called scanners. Thanks!reply"
    ],
    "link": "https://www.trendingbuffalo.com/life/uncle-steves-buffalo/everything-from-1991-radio-shack-ad-now/",
    "first_paragraph": "Some people like to spend $3 on a cup of coffee. While that sounds like a gamble I probably wouldn\u2019t take, I\u2019ll always like to gamble\u2013 especially as little as\u2026Some people like to spend $3 on a cup of coffee. While that sounds like a gamble I probably wouldn\u2019t take, I\u2019ll always like to gamble\u2013 especially as little as three bucks\u2013 on what I might be able to dig up on Buffalo and Western New York, our collective past, and what it means for our future.I recently came across a big pile of Buffalo News front sections from 1991, every day for the first three months of the year\u2026 collected as the First Gulf War unfolded. $3. I probably could have chiseled the guy down a buck, but I happily paid to see what else was in those papers.There\u2019s plenty about a run up to the first Superbowl appearance ever for the Bills, and mixed in with the disappointment is an air of hope and expectation for what is to come. Harumph. There are also some great local ads commemorating and/or coat-tailing on the Bills "
  },
  {
    "title": "Esoteric Languages Challenge Coders to Think Way Outside the Box (ieee.org)",
    "points": 11,
    "submitter": "eso_eso",
    "submit_time": "2025-09-05T12:33:11 1757075591",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://spectrum.ieee.org/esoteric-programming-languages-daniel-temkin",
    "first_paragraph": "Daniel Temkin\u2019s new book dives into the coding exercise/art formChris Chinchilla is a contributing writer for IEEE Spectrum.This is a functioning Fibonacci program written in the esoteric programming language Rivulet.Have you ever tried programming with a language that uses musical notation? What about a language that never runs programs the same way? What about a language where you write code with photographs?All exist, among many others, in the world of esoteric programming languages, and Daniel Temkin has written a forthcoming book covering 44 of them, some of which exist and are usable to some interpretation of the word \u201cusable.\u201d The book, Forty-Four Esolangs: The Art of Esoteric Code, is out on 23 September, published by MIT Press.I was introduced to Temkin\u2019s work at the yearly Free and Open source Software Developer\u2019s European Meeting (FOSDEM) event in Brussels in February. FOSDEM is typically full of strange and wonderful talks, where the open-source world gets to show its more "
  },
  {
    "title": "Formatting code should be unnecessary (maxleiter.com)",
    "points": 29,
    "submitter": "MaxLeiter",
    "submit_time": "2025-09-07T23:08:42 1757286522",
    "num_comments": 27,
    "comments_url": "https://news.ycombinator.com/item?id=45163043",
    "comments": [
      "In theory we could have an IDE apply a reformatting to any piece of code we looked at and formatted any changes back to the standard for the code base on updates. One of the things I dislike is that sometimes autoformatting does a poor job and looses some information that manually formatting provides but honestly in go fmt is mostly fine it just works.All of this seems doable, I just think for the most part we don't care very much about our preferences, it has very little impact on readability. Its definitely doable however we could view the code however we most wanted it and have it stored in a different formatting. Might not be 100% round trip stable but it probably doesn't matter.reply",
      "There\u2019s also a typography element to formatting source code. The notion that all code formatting is mere personal preference isn\u2019t true. Formatting code a certain way can help to communicate meaning and structure. This is lost when the minimal tokens are serialized and re-constituted using an automated tool.https://naildrivin5.com/blog/2013/05/17/source-code-typograp...reply",
      "I'm pretty unconvinced by the examples.> Some of us even align other parts of our code, such repeated inline comments> Now, the arguments block forms a table of three columns. The modifiers make up the first column, the data types are aligned in the second column, and the names are in the third columnThese feel like pretty trivial routines that can be encompassed by code formatting. What's stored is perhaps more minimal, some kind of reference encoding, maybe prettier-ifies for js. The meat of this article to me is that it shouldn't matter: the IDE should let you view and edit as you like:> Everyone had their own pretty-printing settings for viewing it however they wanted.reply",
      "The tradeoff here is not being able to use a universal set of tooling to interact with source files. Anything but text makes grep, diff, sed, and version control less effective. You end up locked into specialized tools, formats, or IDE extensions, while the Unix philosophy thrives on composability with plain text.There's a scissor that cuts through the formatting debate: If initial space width was configurable in their editor of choice, would those who prefer tabs have any other arguments?reply",
      "Exactly. This idea comes up time and time again, but the cost/benefit just doesn't make sense at all. You're adding an unbelievable amount of complex tooling just to avoid running a simple formatter.The goal of having every developer viewing the code with their own preferences just isn't that important. On every team I've been on, we just use a standard style guide, enforced by formatter, and while not everyone agrees with every rule, it just doesn't matter. You get used to it.Arguing and obsessing about code formatting is simply useless bikeshedding.reply",
      "I disagree with almost every choice made by the Go language designers, but `Gofmt's style is no one's favorite, yet gofmt is everyone's favorite` is solid. Pick a not-unreasonable standard, enforce it, and move on to more important things.reply",
      "My only complaint about gofmt is that it\u2019s not even stricter about some things.reply",
      "What if the common intermediate encoding is text, not binary?\nThen grep/diff/sed all still work.If we had a formatting tool that operated solely on AST, checked in code could be in a canonical form for a given AST. Editors could then parse the AST and display the source with a different formatting of the users choice, and convert to canonical form when writing the file to disk.reply",
      "Nobody wants to have to run their own formatter rules in reverse in their head just to know what to grep for. That defeats the point of formatting at all.reply",
      "The entire OS was built around these source files.the unix philosophy on the other hand only \"thrives\" if every other tool is designed around (and contains code to parse) \"plain text\"reply"
    ],
    "link": "https://maxleiter.com/blog/formatting",
    "first_paragraph": "I had a (maybe slightly overqualified) computer science teacher back in highschool, Mr. Paige.\nHe worked on the Ada compiler and\nhas been programming since the early 80s.One day I complained about linter tooling that\nwas driving me nuts. I said something to the effect of, \"it's 2016, how are we still dealing with this sort of thing?\"Turns out, that problem was solved four decades ago (well, three at that point). Back when he was working on Ada,\nthey didn't store text sources at all \u2014 they used an IR called DIANA.\nEveryone had their own pretty-printing settings for viewing it however they wanted.We've been debating some linter settings at work recently and I keep thinking back to\nMr. Paige. It's 2025, how are we still dealing with this sort of thing?Well, to answer that it would help to know what we're missing.I believe he was working with the Rational R1000, of which there isn't a ton of info\n(like all things Ada, it was used by the DoD):The R1000 had a lot of bleeding-edge features: i"
  },
  {
    "title": "Keeping secrets out of logs (2024) (reyes.sh)",
    "points": 139,
    "submitter": "xk3",
    "submit_time": "2025-09-07T18:16:30 1757268990",
    "num_comments": 31,
    "comments_url": "https://news.ycombinator.com/item?id=45160774",
    "comments": [
      "This is an excellent excellent resource regardless of whether you agree/disagree with the author's conclusions, simply by virtue of being a great list of broken down problems, well described, & accompanied by good technical descriptions of proposed fixes (again independent of your opinion on those fixes).Just an excellent example of how to approach & elucidate a problem domain.reply",
      "As far as run-time exposure prevention goes, I feel like in-band signaling might work better than out-of-band for this problem. Along the lines of the taint checking technique mentioned, you can insert some magic string (say, some recognizable prefix + a randomly generated UUID) into your sensitive strings at the source, that you then strip out at the sink. (Or wrap your secrets in a pair of such magic strings.) Then block or mask any strings containing that magic string from making it into any persisted data, including logs. And it will be easy to identify the points of exposure, since they will be wherever you call your respective seal()/unseal() function or such.reply",
      "I think the big problem is when secrets can be anywhere in a string and you don't control the input (e.g, library stacktraces, HTTP responses, JSON that was stringified). \nYou need to pass the secrets to the logger so it can be redacted, it's heavily dependent on the dev and easy to forget during review.And an exact match is just part of the problem; if a dev redacts the end and another dev redacts the start, you can still reassemble the secret with enough logs.reply",
      "One direction to venture would be running rsyslog on every node, using regex to match all the known patterns and use various plugins/addons to send all the applications to the local rsyslog instance using a local spooler and then encrypt the rsyslog upstream to centralized logging servers.  Rsyslog supports using a spooler so that if the up-stream server is offline for whatever reason the logs are spooled locally and then resume when upstream is online.Regex matching on logs is slow but if performed on every node the CPU load is distributed vs. doing this upstream.  Configuration management can push the regex rules to all the nodes.  This won't help with unknown-unknowns but those can be added quickly to all nodes through configuration management after peer review.Rsyslog also supports encrypting the log stream so that secret leakage is limited to the sending nodes and the central nodes and it checks a few boxes.Another thing that helps is limiting to warn and above sent upstream and using an agent on the local nodes to monitor for keywords in the range of info to debug to let someone know to go check the node logs.  Less junk on the centralized servers that may have SOC1/SOC2/PCI/FEDRAMP log retention requirements.  One can not leak what is not sent in the first place.reply",
      "One particular thing to be careful of are core dumps.What I did at a previous shop was remove the passwords as part of a smart gdb script that runs when the core is dumped, before it gets written to a readable location.Writing the script also helped to demonstrate how to extract the passwords in the first place.reply",
      "Stack traces, too.  I did some work with a heavy Java shop and pretty much everything sensitive ended up in a stack trace at some point.reply",
      "Java is just too verbose in every possible way.reply",
      "With java theres a GuardedString implementation  https://docs.oracle.com/en/middleware/idm/identity-governanc...reply",
      "I certainly agree with the desire to keep secrets out of logs, but isn\u2019t the entire log itself also considered to be secret? Even a perfectly sanitized log probably contains lots of data about your production environment that you wouldn\u2019t want to share with adversaries (e.g. peak usage hours).reply",
      "Logs probably need to be exposed to support teams, oncalls for sister-teams (if you are a large org), all your devs etc. That is many MANY more people than need access to secrets. Secrets in logs therefore puts you are much wider risk of internal threats and makes it MUCH easier for an attacker who phishes someone to pivot to higher credentials.Also if you have audit records, you want accessing a secret to be logged separately from accessing logs.reply"
    ],
    "link": "https://allan.reyes.sh/posts/keeping-secrets-out-of-logs/",
    "first_paragraph": "This post is about how to keep secrets out of logs, and my claim is that (like\nmany things in security) there isn\u2019t a singular action or silver bullet that\nlets you do this. I would go so far as to say that there\u2019s not even an 80/20\nrule, where one action fixes 80% of the problem. It\u2019s not like preventing SQL\ninjection with prepared statements or preventing buffer overflows by using\nmemory-safe languages.What I will offer instead, are lead bullets, of which there are many. I\u2019m going\nto talk about 10 of them. They are imperfect and sometimes unreliable things\nthat, if put in the right places and with defense-in-depth, can still give us a\nreal good chance at succeeding. My hope is that by the end, you\u2019ll\nhave a slightly better framework for how to reason about this problem and some\nnew ideas to add to your kit.Table of contents:With that, let\u2019s dive in and set the table by talking about the problem with\nsecrets in logs.So, there are some problems that are annoying. And there are some pro"
  },
  {
    "title": "How to make metals from Martian dirt (csiro.au)",
    "points": 39,
    "submitter": "PaulHoule",
    "submit_time": "2025-09-07T19:09:45 1757272185",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=45161229",
    "comments": [
      "You can get regolith simulant from Amazon, please do try this at homehttps://www.themartiangarden.com/\nhttps://www.amazon.com/Regolith-Simulant-Authentic-Martian-R...reply",
      "Pretty neat. This would certainly make for an interesting Mars mission should SpaceX want to try it, land a lander, have the lander process regolith into iron chunks, create a pile of chunks. All good threshold goals.What ever happened the asteroid mining folks? They have a similar problem, albeit with very little gravity and no atmosphere, but their metals are in theory worth a lot more (platinum, gold, silver, Etc.)There was a similar idea/proposal for extracting aluminum from Lunar regolith, also a good space mission for private interests.Once you've got basic metals you can make more interesting things, with iron you can make reinforced concrete which would be an interesting building material on Mars I suspect.reply",
      "Asteroids are hit-and-miss composition wise (though you can determine quite a bit by observing them), but when they are a hit they tend to be really valuable. The problem then is that you need to get to them and then the next problem is that you need to get back to where you came from.Both of these can hurt your ROI considerably assuming you can solve for them at all with the masses involved. They're also usually moving at a pretty good clip and are bad to set up long term for. I think until we have a long term presence in the asteroid belt that this is mostly going to be SF rather than that it will actually happen.reply",
      "delta-V happened to asteroid folks.there are no realistic proposals for asteroid drives ala https://en.wikipedia.org/wiki/K240reply",
      "The product I have in mind is solar sails to be delivered to the Earth-Sun L1 point to counteract climate change.  A carbonaceous chondrite asteroid is rich in volatiles to make plastic films as well as metals and stones to coat them with.  The pros are:- solar sails transport themselves without using reaction mass- you're not competing with cheap resources on Earth to be used on Earth,  rather resources from Earth transported past LEOeliminating many of the fundamental objections to scenarios where ISRU materials get transported somewhere.Cons are:- a good sunshade and a good solar sail are different things- plastic + metal solar sails seem to get corroded badly over time- if you think the turnaround time between Earth and Mars is bad,  you are talking half a decade or more to round trip parts plus a 45 minute communication delay at some times;  you either need to send people with all the problems that entails or have advanced autonomy and a manned simulation platform somewhere in near-Earth or cislunar space.I've got a good picture of what parts of the \"head end\" that consumes asteroid materials and turns them into reasonable chemical feedstocks looks like with the exception of how to devolatize the asteroid to begin with and where to get the storage tanks to store early offgassing before the metals line comes online.  (Storage tanks are an interesting question for manufacturing since the chemical factory needs plenty of them.)  I also have some idea of what the \"shipyard\" that builds the actual sails look like.  Trouble is you probably need a Drexler machine to make spare parts and also make customized parts given that you don't really know what you're up against when it comes to the \"head end\" (though upper pyramid parts of the chemical factory and the shipyard can be simulated close to Earth) ... and Drexler's concept for a Drexler machine doesn't work.reply",
      "If you so very want some mylar over carbon fiber put up in L1, and not ever launch that from Earth then Luna is the most obviously cheap and abundant source of whatever. No need for asteroids at all. Also the comms delay is 1.25s IIRC.I personally consider this a folly.On the other hand, no comprehensive survey of Luna was ever done, and we target Mars or even asteroids why? I'd like some at least plausible reason for this.It is true that Luna is halfway to Mars in dV on hohmanns. But not in time spent. Never will be.reply",
      "> There was a similar idea/proposal for extracting aluminum from Lunar regolith, also a good space mission for private interests.With the asteroids, I assume the idea is to bring enough platinum and gold back to Earth to offset the costs of getting them from space. That doesn't sound especially realistic, but in the right circumstances I guess it could be.With aluminum on the moon or iron on Mars, that will never happen. You'd have to want to use those materials on location.So what would the value be of producing aluminum on the moon?reply",
      "> So what would the value be of producing aluminum on the moon?Building more rockets? Interesting detail: there isn't enough oxygen there to cause aluminum to immediately be covered with a skin of aluminum oxide. I wonder what the energy cost of an extraction process for aluminum on the moon would be. At the same time I would hate to see the moon mined, that's one piece of common property that we should maybe try to preserve unless we have no other alternative, not just for commerce.reply",
      "Why preserve the current landscape of the moon? It harbors no life, and its surface is scarred by billions years of space collisions.reply",
      "The idea you see in O'Neill and other science fiction that iron is rare on the moon is bunk.  There is Hematitehttps://www.jpl.nasa.gov/news/the-moon-is-rusting-and-resear...and Apollo astronauts brought back perfectly good Iron ore.  It's true that there is lot of aluminum and titanium on the moon and a lunar economy might use that but there is enough iron that if loonies wanted to make things out of iron they could make things out of iron.reply"
    ],
    "link": "https://www.csiro.au/en/news/All/Articles/2025/August/Metals-out-of-martian-dirt",
    "first_paragraph": "AUSTRALIA\u2019S NATIONAL SCIENCE AGENCY\r\n        Swinburne and CSIRO researchers have successfully made iron under Mars-like conditions, opening the door to off-world metal production.\r\n      \n\n\n\r\n      Share\r\n    \n27 August 2025\n3 min read\nThe idea of building settlements on Mars is a popular goal of billionaires, space agencies and interplanetary enthusiasts.But construction demands materials, and we can't ship it all from Earth: it cost US$243 million just to send NASA's one tonne Perseverance Rover to the Red Planet.Unless we're building a settlement for ants, we'll need much, much more stuff. So how do we get it there?CSIRO Postdoctoral Fellow and Swinburne alum Dr Deddy Nababan has been pondering this question for years. His answer lies in the Martian dirt, known as regolith.\"Sending metals to Mars from Earth might be feasible, but it's not economical. Can you imagine bringing tonnes of metals to Mars? It's just not practical,\" Dr Nababan says.\"Instead, we can use what's available on"
  },
  {
    "title": "No Silver Bullet: Essence and Accidents of Software Engineering (1986) [pdf] (unc.edu)",
    "points": 49,
    "submitter": "benterix",
    "submit_time": "2025-09-07T19:53:03 1757274783",
    "num_comments": 11,
    "comments_url": "https://news.ycombinator.com/item?id=45161556",
    "comments": [
      "To add to this, I think that in the past decades, the rise of large software ecosystems (e.g. around Python, Java, Windows, AWS, Azure), have had both positive and negative effects on accidental complexity.On the one hand libraries and platforms save developers from reimplementing common functionality. But on the other hand, they introduce new layers of accidental complexity through dependency management, version conflicts, rapid churn, and opaque toolchains.This means that accidental complexity has not disappeared, it has only moved. Instead of being inside the code we write, it now lives in the ecosystems and tools we must manage. The result is a fragile foundation that often feels risky to depend on.reply",
      "Reminds me of this comic: https://www.monkeyuser.com/2018/implementation/reply",
      "Related. Others?No Silver Bullet with Dr. Fred Brooks (2017) [video] - https://news.ycombinator.com/item?id=40233156 - May 2024 (1 comment)No Silver Bullet (1986) [pdf] - https://news.ycombinator.com/item?id=32423356 - Aug 2022 (43 comments)No Silver Bullet: Essence and Accidents of Software Engineering (1987) - https://news.ycombinator.com/item?id=25926136 - Jan 2021 (9 comments)No Silver Bullet (1986) [pdf] - https://news.ycombinator.com/item?id=20818537 - Aug 2019 (85 comments)No Silver Bullet: Essence and Accidents of Software Engineering (1987) - https://news.ycombinator.com/item?id=15476733 - Oct 2017 (8 comments)No Silver Bullet (1986) [pdf] - https://news.ycombinator.com/item?id=10306335 - Sept 2015 (34 comments)No Silver Bullet: Essence and Accidents of Software Engineering (1987) - https://news.ycombinator.com/item?id=3068513 - Oct 2011 (2 comments)\"No Silver Bullet\" Revisited - https://news.ycombinator.com/item?id=239323 - July 2008 (6 comments)--- and also ---Fred Brooks has died - https://news.ycombinator.com/item?id=33649390 - Nov 2022 (211 comments)reply",
      "A classic. I was just getting started, when he wrote that, and that kind of thinking informed a lot of my personal context, throughout my career.I feel as if a lot of multipliers have happened that he didn't anticipate, but I also feel as if the culture of software engineering has kind of decomposed, since his day.We seem to be getting a lot of fairly badly-done work out the door, very quickly, these days.reply",
      "I think we only got to this point because of a near-complete erosion of personal responsibility  - agile and devops both conspire to treat developers as replaceable standins\n\n  - we're not even really expected to hang around and see the consequences of our decisions\n\n  - on arriving in a new organization, we're presented with a heap of trash we're asked to just sort of keep it running, certainly not to fix it\n\n  - 'industry standard best practices' win over a well designed bespoke solution every time, developers are just expected to write a little glue at most\n\n  - managers aren't expected to know anything about the domain at all, but to track people to make sure they did what they said they were going to \n\n  - speed to feature is the only metric. instability can be papered over with bodies\n\n  - we pretty much stopped systemic testing a couple decades ago \n\nso given that we've been on autopilot to a vibe-coding wonderland for quite some time, I guess we shouldn't be surprised that we've reached the promised land.reply",
      "Sadly, I have to agree. I was fortunate to work for a company that absolutely insisted that I take full personal Responsibility and Accountability for my work.I was there for almost 27 years, so had plenty of time to deal with the consequences of my decisions.They were insane about Quality, so testing has always been a big part of my work, and still is, though I haven't been at that company for eight years.reply",
      "> 'industry standard best practices' win over a well designed bespoke solution every time, developers are just expected to write a little glue at mostSometimes for good reason.  \"Well designed bespoke solutions\" often turn out to be badly designed reinventions of the wheel.  Industry standard best practices sometimes prevent problems that you yet know you will run into.And sometimes they just are massively overdesigned overkill.  There is a real art to knowing which is which.reply",
      "> There is a real art to knowing which is which.Absolutely, but that \u201cart\u201d is really important, and also, fairly rare.Many folks just jam in any dependency that is a first hit in a search, with more than 50 GH stars, and a shiny Web site.One \u201cred flag\u201d phrase that I\u2019ve learned is \u201cThat\u2019s a solved problem!\u201d. When I hear that, I know I should be skeptical of the prescribed \u201csolution.\u201dThat said, there\u2019s stuff that definitely should be delegated to better-qualified folks. One example, that I was just working on[0], is Webauthn stuff.[0] https://littlegreenviper.com/addendum-a-server-setup/reply",
      "\"agile and devops both conspire to treat developers as replaceable standins\n\"There is a lot of irony in that since the first plank of the agile manifesto is to put individuals in interactions first.And I noticed you put the development process/structure first over the people who want to treat people as fungible.reply",
      "Well, to be fair, there's what I call \"pure\" Agile (as in the Manifesto), and then \"real-world Agile\" (what has the name, but doesn't really seem to follow the Manifesto).I always liked the Manifesto, but it's really rather vague, and we engineers don't do \"vague\" so well, which leaves a lot of room for interpretation.And authors.And consultants.And conference speakers.Those are the ones that form what is eventually implemented. I'm not really sure any of the original signatories ever rolled up their sleeves, and worked to realize their vision.It's my experience, that this is where the wheels start to come off the grand ideas.That's one thing that I have to hand to Grady Booch. He came up with the idea, wrote it down, and then started to actually make tools to make it happen. Not sure if they really launched, but he did work to make his ideas into reality.reply"
    ],
    "link": "https://www.cs.unc.edu/techreports/86-020.pdf",
    "first_paragraph": ""
  },
  {
    "title": "Show HN: I'm a dermatologist and I vibe coded a skin cancer learning app (molecheck.info)",
    "points": 325,
    "submitter": "sungam",
    "submit_time": "2025-09-07T10:38:29 1757241509",
    "num_comments": 211,
    "comments_url": "https://news.ycombinator.com/item?id=45157020",
    "comments": [
      "I kind of love the diy aspect of ai coding.A dermatologist a short while ago with this idea would have to find a willing and able partner to do a bunch of work -- meaning that most likely it would just remain an idea.This isn't just for non-tech people either -- I have a decades long list of ideas I'd like to work on but simply do not have time for. So now I'm cranking up the ol' AI agents an seeing what I can do about it.reply",
      "I feel like the name \u201cvibe code\u201d is really the only issue I have. Enabling everyone to program computers to do useful things is very very good.reply",
      "It captures not understanding what you\u2019re doing crossed with limited AI understanding which means the whole thing is running on vibes.reply",
      "I wish that computers were designed in a way that pushed the users to script more. Its such a powerful ability that would benefit almost every worker.reply",
      "Apple has always been pretty good at this.  AppleScript, Automator, Shortcuts.  I did all kinds of cool stuff in OSX 10.4 back before I wrote any traditional code.reply",
      "Before that was HyperCard. It was always amazing to me the types of applications that could be written with HyperCard.In a similar way, VBA was amazing in MS Office back in the day. If you ever saw someone who was good at Visual Basic in Excel, it\u2019s impressive the amount of work that could get done in Excel by a motivated user who would have been hesitant to call themselves a programmer.reply",
      "Applesoft Basicreply",
      "I believe this captures it well. There are many people that would have previously needed to hire dev shops to get their ideas out and now they can just get them done faster. I believe the impact will be larger in non-tech sectors.reply",
      "Same, I've had ideas rattling around in my brain for years which I've just never executed on, because I'm 'pretty sure' they won't work and it's not been worth the effortI've been coding professionally for ~20 years now, so it's not that I don't know what to do, it's just a time sinkNow I'm blasting through them with AI and getting them out there just in caseThey're a bit crap, but better than not existing at all, you never knowreply",
      ">They're a bit crap, but better than not existing at all, you never knowI don't agree.  I think because of llm/vibe coding my random ideas I've actually wasted more time then if I did them manually.  The vibe code as you said is often crap and often after I spend a lot of time on it.  Realize that there are countless subtle errors that mean its not actually doing what I was intending at all.   I've learned nothing and made a pointless app that does not even do anything but looks like it does.Thats the big allure that has been keeping \"AI\" hype floating.  It always seems so dang close to being a magic wand.  Then upon time spent reviewing and a critical eye you realize it has been tricking you like a janitor that is just sweeping dirt under the rug.At this point I've relegated LLM to advanced find replace and   Formatted data structuring(Take this list make it into JSON) and that's about it.  There are basically tools that do everything else llms do that already exist and do it better.I can't count at this point how many times \"AI\" has taken some sort of logic I want then makes a bunch of complex looking stuff that takes forever to review and I find out it fudged the logic to simply always be true/false when its not even a boolean problem.reply"
    ],
    "link": "https://molecheck.info/",
    "first_paragraph": "For the best experience, please scan the QR code with your phone's camera to use the app on your mobile device.Are you worried about this skin lesion?Swipe left (concerned) / right (not concerned) or use the buttons."
  },
  {
    "title": "Truco and clones: the beginnings of Argentinian computer gaming (zeitgame.net)",
    "points": 4,
    "submitter": "Michelangelo11",
    "submit_time": "2025-09-05T07:18:12 1757056692",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://zeitgame.net/archives/18373",
    "first_paragraph": "Part of my series on national beginnings: Spain \u2013 Argentina \u2013 more to comeCurrently stuck between a monster wargame (Gulf Strike) and a Civ-like (Incunabula), I looked for short articles to fill the gap, and so selected a Spanish game called Reyes y Castillos. However, as I was playing it, I found the Spanish difficult to read, odd (\u201clo hizo de goma\u201c, \u201csonaste macho\u201c) and full of words I had never heard before (\u201camarrete\u201c, \u201clinyera\u201c). I initially attributed that to how rusty my Spanish is, then to odd colloquialisms of the early 80s. However, when I finally accepted I did not understand the game, I asked a certain artificial friend for help, he made me realize I had chanced upon my first Argentinian game.The history of computing in Argentina really starts in 1961, when mathematician Manuel Sadosky and his team at the Calculus Institute of the University of Buenos Aires finished setting up a Ferranti Mercury computer. This specific machine came with the song \u201cOh My Darling, Clementine\u201d "
  },
  {
    "title": "The race to build a distributed GPU runtime (voltrondata.com)",
    "points": 40,
    "submitter": "jonbaer",
    "submit_time": "2025-09-04T20:18:47 1757017127",
    "num_comments": 9,
    "comments_url": "https://news.ycombinator.com/item?id=45131784",
    "comments": [
      "This reminds me a lot of Seymour Cray's two maxims of supercomputing: get the data where it needs to be when it needs to be there, and get the heat out. Still seems to apply today!reply",
      "Calls to mind his other famous quote, \"Would you rather plow your field with two strong oxen or 1024 chickens?\"How about ten billion chickens?reply",
      "Yeah. I feel like he's still partially vindicated with things like the dragonfly topology, as a lot of problems don't nicely map onto a 2D or 3D topology (so longest distance is still the limiting factor). But the chicken approach certainly scales better, and I feel like since Cray's time there are more local-aware algorithms around.reply",
      "Can someone tell me if the challenges the article describes and indeed the frameworks they mention are mostly relevant for training or also for inference?reply",
      "The fast interconnect between nodes has aaplications in inference at scale (big KV caches and other semi-durable state, multi-node tensor parallelism on mega models).But this article in particular is emphasizing extreme performance ambitions for columnar data processing with hardware acceleration. Relevant to many ML training scenarios, but also other kinds of massive MapReduce-style (or at least scale) workloads. There are lots of applications of \"magic massive petabyte plus DataFrame\" (which is not I think solved in the general case).reply",
      "One thing thats not addressed here is that the bigger you scale your shared memory cluster the closer to 100% chance that one node fucks up and corrupts your global memory space.Currently the fastest way to get data from node a to node b is to RDMA it. which means that any node can inject anything into your memory space.I'm not really sure how Theseus guards against that.reply",
      "I\u2019m not sure any system prevents RDMA from ruining your day :(Back in grad school I remember we did something fairly simple but clearly illegal and wedged the machine so bad the out of band management also went down!reply",
      "Lot of hype, but man does Voltron Data keep blowing me away with what they bring out. Mad respect.> There\u2019s a strong argument to be made that RAPIDS cuDF/RAPIDS libcudf drives NVIDIA\u2019s CUDA-X Data Processing stack, from ETL (NVTabular) and SQL (BlazingSQL) to MLOps/security (Morpheus) and Spark acceleration (cuDF-Java).Yeah this seems like the core indeed, libcudf.Focus here is on TCP & GPUDirect (Nvidia's pci-p2p, letting for example RDMA without CPU involvement across a full GPU -> NIC -> switch -> nic -> GPU happen).Personally it feels super dangerous to just trust Nvidia on all of this, to just buy the solution available. Pytorch nicely sees this somewhat, adopted & took over Facebook/Meta's gloo project, which wraps a lot of the rdma efforts. But man there's just so so many steps ahead that Theseus is here with figuring out & planning what to do with these capabilities, these ultra efficient links, figuring out how to not need to use them if possible! The coordination problems keep growing in computing. I think of RISC-V with its arbitrary vector-based alternative to conventional x86 simd, going from a specific instruction for each particular operation to instructions being parameterized over different data lengths & types. https://github.com/pytorch/glooI'd really like to see a concerted effort to around Ultra Ethernet emerge, fast. Hardware isnt really available, and it's going to start out being absurdly expensive. But Ultra Ethernet looks like a lovely mix of collision-less credit-based Infiniband RDMA and Ethernet, with lots of other niceties (transport security). Deployments just starting (AMD Pensando Pollara 400 at Oracle). I worry that without broader availability & interest, without mass saturation, AI is going to stay stuck on libcudf forever; getting hardware out there & getting software stacos using it is a chicken & egg problem that big players need to spend real effort accelerating UET or else. https://www.tomshardware.com/networking/amd-deploys-its-firs...reply",
      "Our MI300x boxes have had 8x400G Thor2 RDMA working great for a year now.reply"
    ],
    "link": "https://voltrondata.com/blog/the-race-to-build-a-distributed-gpu-runtime",
    "first_paragraph": "Featured PostsLatest PostsBuilt for AI workloads, Theseus is a high-performance SQL engine with GPU acceleration.\u00a9 2021-2025 Voltron Data, Inc. All rights reserved.Built for AI workloads, Theseus is a high-performance SQL engine with GPU acceleration.\u00a9 2021-2025 Voltron Data, Inc. All rights reserved.Mike BeaumontFor a decade, GPUs have delivered breathtaking data processing speedups. However, data is growing far beyond the capacity of a single GPU server. When your work drifts beyond GPU local memory or VRAM (e.g., HBM and GDDR), hidden costs of inefficiencies show up: spilling to host, shuffling over networks, and idling accelerators. Before jumping straight into the latest distributed computing effort underway at NVIDIA and AMD, let\u2019s quickly level set on what distributed computing is, how it works, and why it's hard.Distributed computing coordinates computational tasks across datacenters and server clusters with GPUs, CPUs, memory tiers, storage, and networks to execute a single jo"
  },
  {
    "title": "SQLite's Use of Tcl (2017) (tcl-lang.org)",
    "points": 72,
    "submitter": "ripe",
    "submit_time": "2025-09-07T15:03:46 1757257426",
    "num_comments": 22,
    "comments_url": "https://news.ycombinator.com/item?id=45158814",
    "comments": [
      "> To help the team stay in touch, a custom chatroom has been created using a Tcl/Tk script. The same script works as both client and server. The chatroom is private and uses a proprietary protocol, so that developers are free to discuss sensitive matters without fear of eavesdropping. The chatroom is implemented as just over 1000 lines of Tk code, and is thus accessible and easy to customize.Curious if anyone has more details on this. Does it have encryption?reply",
      "The paper is from 2017.  Fossil got chat support in 2021 and the developers now use Fossil-chat.  https://fossil-scm.org/home/doc/trunk/www/chat.mdFossil chat has the advantages that (1) it is fully encrypted and (2) it works from any web-browser, including on mobile phones.reply",
      "Does fossil have something similar to Git-LFS? I'd like to store binary assets like PNGs and music files and suchreply",
      "> On the server-side, message text is stored exactly as entered by the usersI suppose the encryption is only at the TLS layer?reply",
      "> I suppose the encryption is only at the TLS layer?Correct unless the fossil repository in question uses SQLite's SEE (encryption) extension (which fossil can, but relatively few repositories use that, AFAIK).reply",
      "Fossil comes with a chatroom feature (https://fossil-scm.org/home/doc/trunk/www/chat.md). Could that be what they're referring to?reply",
      "E2EE group chat in 1000 lines would be rather impressivereply",
      "With a lot of the code that may be stashed away into libraries, it doesn't seem all that remarkable. I think the higher level logic and control flow for E2EE group chat could be condensed to 1000 lines with the proper abstraction. Tcl probably helped with that abstraction so credit where it is due.reply",
      "relevant links:https://en.wikipedia.org/wiki/Modified_condition/decision_co...https://shemesh.larc.nasa.gov/fm/papers/Hayhurst-2001-tm2108... (This tutorial provides a practical approach to assessing modified condition/decision coverage (MC/DC) for aviation software products that must comply with regulatory guidance for DO-178B level A software)reply",
      "> SQLite supports this syntax. But because of its TCL heritage, SQLite also allows the parameter to take the form of a TCL variable. Hence:    SELECT passwd, photo FROM user WHERE uid=$uid\n\nDid they put \"eval\" in SQL parameter processing? Is there an SQL injection attack vulnerability there?reply"
    ],
    "link": "https://www.tcl-lang.org/community/tcl2017/assets/talk93/Paper.html",
    "first_paragraph": ""
  },
  {
    "title": "The Expression Problem and its solutions (2016) (thegreenplace.net)",
    "points": 86,
    "submitter": "andsoitis",
    "submit_time": "2025-09-07T06:28:04 1757226484",
    "num_comments": 65,
    "comments_url": "https://news.ycombinator.com/item?id=45155877",
    "comments": [
      "We were discussing this a few days ago in https://news.ycombinator.com/item?id=45121080.",
      "This article discusses details of trying to use language features to model a fairly basic problem but doesn\u2019t discuss the fundamentals of the problem very much.If I have O operations (e.g. evaluate, stringify) and T types, then I need O\u2022T implementations.  If I fix O, I can add types until the cows come home by adding O implementations per new type. If I fix T, I can add new operations with T implementations per operation.  If I want to let O and T vary, then the number of implementations I need to add per additional operation/type varies depending on what I\u2019ve added before.  No amount of programming language magic will change this basic count.ISTM what\u2019s really going on in the article is that the author is using the programming language as a registry of implementations. Those O\u2022T implementations need to be stored somewhere so their callers can find them.  In C++ this can be done when very verbose inheritance and virtual calls. In other languages, it\u2019s less verbose. If multiple dispatch is built in, then one can use it directly.  One can, of course, also build an actual table indexed on operation and type as a data structure in just about any language and use it, and in a language like C++ the result may well be quite a bit nicer than using a class hierarchy.reply",
      "The problem is how to statically ensure that you don\u2019t run into the case of a missing implementation for some combination at runtime, in particular in languages with separate compilation. If you have a library A that defines a basic (T, O) set, and two libraries B and C that aren\u2019t aware of each other but both use A, where B adds a new type and C adds a new operation, and finally you have a program D that uses both B and C, how do you statically detect or prevent the case where D tries to use the new type from B with the new operation from C, but no one has provided an implementation for that combination; while also supporting the case of the required implementation being present.reply",
      "> The problem is how to statically ensure that you don\u2019t run into the case of a missing implementationStatic (compile-time) guarantees are only applicable to languages with static binding rules, in which case there is no problem - the compiler will just report \"cannot resolve overloaded function\" or something similar.This is of course one of the downsides to languages with dynamic types and dynamic binding ... that many errors can only be detected at runtime.reply",
      "> In C++ this can be done when very verbose inheritance and virtual calls.No - in C++ you'd just define the operators (either as global functions, or member functions of the types/classes in question), and the language's overload resolution rules would select the right implementation for each usage.You could use inheritence (and virtual overrides if needed), or templates/generics, if you wanted to - C++ certainly gives you a lot of ways to make things more complex and shoot yourself in the foot, but the normal/obvious way would just be to define the overloaded operators and be done with it.reply",
      "The expression problem is about dynamic dispatch, not static dispatch. For example, you call a function F that returns an object of one of the relevant types, and another function G that returns one of the relevant operations, and then you apply the operation to the object. How can you have F extend the set of types, and also G extend the set of operations, without having to recompile the caller, or without F and G having to coordinate, and also avoid a runtime error due to a missing implementation of some operation for some type.reply",
      "I agree (although others in this thread do not), but the comment I was responding to was claiming that in C++ operator overloading requires inheritance and virtual methods, and I was just pointing out that this is not true.reply",
      "The comment you responded to doesn\u2019t mention overloading.reply",
      ">  In C++ this can be done when very verbose inheritance and virtual callsVirtual methods overload the corresponding method in the parent class they are inheriting from. It could be a named method like \"add()\", or an operator like \"+()\".The author of that comment is implicitly assuming that all types are derived via inheritance from a common base type that defines all the (virtual) methods/operators being overloaded.reply",
      "The operations are different methods, not overloads of each other, and the different types are the types on which the methods are defined, not arguments to the methods. That\u2019s also how the article presents it. There are no overloads in the scenario.reply"
    ],
    "link": "https://eli.thegreenplace.net/2016/the-expression-problem-and-its-solutions/",
    "first_paragraph": "The craft of programming is almost universally concerned with different types of\ndata and operations/algorithms that act on this data [1]. Therefore, it's\nhardly surprising that designing abstractions for data types and operations has\nbeen on the mind of software engineers and programming-language designers\nsince... forever.Yet I've only recently encountered a name for a software design problem which I\nran into multiple times in my career. It's a problem so fundamental that I was\nquite surprised that I haven't seen it named before. Here is a quick problem\nstatement.Imagine that we have a set of data types and a set of operations that act on\nthese types. Sometimes we need to add more operations and make sure they work\nproperly on all types; sometimes we need to add more types and make sure all\noperations work properly on them. Sometimes, however, we need to add both - and\nherein lies the problem. Most of the mainstream programming languages don't\nprovide good tools to add both new types"
  },
  {
    "title": "Creative Technology: The Sound Blaster (abortretry.fail)",
    "points": 14,
    "submitter": "BirAdam",
    "submit_time": "2025-09-07T21:50:30 1757281830",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=45162501",
    "comments": [
      "> An hour of audio in 64MB would absolutely not be \u201cCD-quality.\u201dAt 128 kbps, you can fit a bit over an hour of audio into 64 MB. Which isn't great, especially not using a late-90s MP3 encoder, but it's perfectly listenable.reply",
      "I remember buying a Sound Blaster Pro. I remember being amazed by the talking parrot, and DR. SBAITSO - That's Sound Blaster Acting Intelligent Text-To-Speech Operator. It also had the proprietary Panasonic CD-ROM connector.reply",
      "the sound of PC gaming in the late 90s, e.g. with good old PCWorks FourPointSurround by Cambridge Soundworks(iykyk)reply",
      "I still use those speakers plus sub today!reply"
    ],
    "link": "https://www.abortretry.fail/p/the-story-of-creative-technology",
    "first_paragraph": ""
  },
  {
    "title": "Taking Buildkite from a side project to a global company (valleyofdoubt.com)",
    "points": 12,
    "submitter": "shandsaker_au",
    "submit_time": "2025-09-07T22:03:13 1757282593",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.valleyofdoubt.com/p/taking-buildkite-from-a-side-project",
    "first_paragraph": ""
  },
  {
    "title": "Show HN: OpenCV over WebRTC (in Go) (github.com/pion)",
    "points": 18,
    "submitter": "Sean-Der",
    "submit_time": "2025-09-07T21:31:29 1757280689",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=45162368",
    "comments": [
      "Neat demo \u2014 cool to see GoCV + Pion working together over WebRTC. Curious if you\u2019ve tried running object detection or overlays before sending the stream?reply",
      "I used to do some basic CV stuff back when I did the First Robotics Competition (FRC) in high school, so it's cool to see it being done over WebRTC!reply"
    ],
    "link": "https://github.com/pion/example-webrtc-applications/blob/master/gocv-to-webrtc/README.md",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n           There was an error while loading. Please reload this page.\nThere was an error while loading. Please reload this page."
  }
]