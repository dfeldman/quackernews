[
  {
    "title": "Making a 3D modeler in C in a week (danielchasehooper.com)",
    "points": 312,
    "submitter": "jasim",
    "submit_time": "2024-05-02T17:48:14",
    "num_comments": 69,
    "comments_url": "https://news.ycombinator.com/item?id=40239164",
    "comments": [
      "I agree entirely with the author on the limitations of Raylib. I'm currently working on a tower-defense style game that I started in Raylib, but I'm running into many of the same limitations (and more). Things such as toggling fullscreen not working consistently across platforms, not being able to enumerate screen modes, toggling rendering features at runtime, saving compiled shaders etc., etc. Having said that, I appreciate Ray's work on this library and will continue to sponsor him. Raylib is great for quickly banging out a prototype, but not much beyond that unless you're okay with living with severe limitations.Lesson learned, for sure, but I'm too far into the development to swap all of the Raylib stuff out for SDL (or something else) now.",
      "Kind of share the same feeling, started a project about 2 months ago and chose to use Raylib, and while the basic stuff is really simple to get going, the more you use it, the more random minor inconveniences you run into, but at this point I've invested too much into this project to back out of using Raylib. My biggest issue with it right now is the font handling and text rendering, I think I'll have to switch from TTF fonts to pre-baked bitmap fonts for it (which will suck for localization later).\nThe biggest two features I'm missing after switching from Love2D is being able to render multi-color text (with Raylib, you have to manually split up the text into chunks based on color markup, then apply width offset, then call the draw function for each chunk, while also taking into account things like linebreaks and such), not to mention that it seems to tank the FPS a lot when you try to draw a lot of text on the screen (perhaps the draw call batching is broken for text?) and being able to easily chop up textures and make them wrap or tile, Raylib used to have tiled texture draw function in the past but for some reason they removed it.",
      "I'm the organizer for the conference [0] mentioned in TFA.We had a professional UI/UX designer react to ShapeUp [1], and one of the things she commented on was the font being hard to visually parse.I laughed a little when the author yelled \"raylib!\" to make sure blame was assigned appropriately XD. I'm currently the top GitHub sponsor for raylib, so there's no hate, but I wish he changed some of his defaults.[0] https://handmadecities.com/seattle[1] https://vimeo.com/887532756/2972a82e55#t=49m58s (timestamped)",
      "Raylib has a lot of issues that are never going to be fixed, but I wouldn't blame fullscreen on it. Fullscreen is just absolutely unusably FUBARed on windows and has been for decades. It's probably the same for other platforms. The modern strategy is to just do borderless windowed and pretend true fullscreen doesn't exist.",
      "I do the same, I do wonder however, if there are performance issue at the OS level, from running (on a 4K screen) 4K borderless vs. 4K fullscreen.Like, the whole giving the application maximum priority would work the same?",
      "> just do borderless windowed and pretend true fullscreen doesn't exist.Hah, good to know I am not the only one.",
      "True, it\u2019s just one of the many issues that came to mind while writing this.My solution to the issue is also full screen borderless combined with resolution scaling.",
      "Quick appreciation for the detail that Raylib is named after the creator's name Ray and not ray-tracing, fun.Things Unexpectedly Named After People: https://notes.rolandcrosby.com/posts/unexpectedly-eponymous/",
      "How do you know Ray was not named after ray-tracing?",
      "The author's name is the first hint, and the lack of ray tracing the second"
    ],
    "link": "https://danielchasehooper.com/posts/shapeup/",
    "first_paragraph": "May 2, 2024\u30fb8 minute read"
  },
  {
    "title": "An analysis of the rabbit R1 APK (emergetools.com)",
    "points": 38,
    "submitter": "jshchnz",
    "submit_time": "2024-05-02T22:58:52",
    "num_comments": 14,
    "comments_url": "https://news.ycombinator.com/item?id=40242297",
    "comments": [
      "As an Android developer I don\u2019t understand the reason behind mixing Jetpack Compose and Flutter. I\u2019m not an expert on cross platforms, I mostly work on Compose, so if anyone wants to share.",
      "Probably just fast moving startup stuff. Different developers working on different features with different preferred toolsets. Can normalize it all later, right now launch is most important.",
      "Why does it matter if it is an android app? Why would they redesign the wheel?Criticism should be reserved for poor execution and hype over substance.",
      "Well, if there's no reason to redesign the wheel then maybe they should stop claiming that the \"rabbit r1 is not an Android app\" themselves. I would venture to guess the reason why this is emphasized, other than that, is that multiple reviewers made the point that it really should've just been an app.",
      "One of the criticisms of this device is that it would have made more sense as an app on your phone.The fact that it is already implemented as just an app makes the point all the more valid.My only guess is that the physical device adds some additional mystique to this \"AI in a box\" that makes it easier to attract investors.",
      "I agree with your take.  This device kind of reminds me of the kiosk use case.  There are times where having a single device, that does one thing well, feels better than having to search through a crowded smartphone for an app.",
      "I don't understand what this device does better than \u2014 say \u2014 any 5 year old smartphone.",
      "Does anyone have a link to the APK, or details of their OTA update mechanism so I can pull it myself?",
      "They seem to be eagerly awaiting for GPT5 API to get their LAM working.  The longer they wait the easier it gets",
      "save you a click \n> We didn't find a \"LAM\" in the APK, but that doesn't mean it isn't happening in the backend. It also doesn't mean it is happening in the backend.\n> rabbit is an android launcher"
    ],
    "link": "https://www.emergetools.com/deep-dives/rabbit-r1",
    "first_paragraph": "You might've seen the news that the Rabbit R1, a handheld AI device, is actually \"just an Android app\". The Rabbit CEO has since put out a statement claiming that the \"rabbit r1 is not an Android app\" and that \"rabbit OS and LAM run on the cloud with a very bespoke AOSP and lower level firmware modifications\"."
  },
  {
    "title": "Building a rocket engine from scratch (ablspacesystems.com)",
    "points": 133,
    "submitter": "sr-latch",
    "submit_time": "2024-05-02T19:54:48",
    "num_comments": 31,
    "comments_url": "https://news.ycombinator.com/item?id=40240724",
    "comments": [
      "NASA's report server is a national treasure, especially the material from the 50s and 60s that he references.  Some of the most crisp and succinct technical writing you'll find, and you can infer a lot about how they ran projects.   Declassified NRO reports are also very good - you can see the Lockheed Skunk Works principles in action. Example: https://www.nro.gov/Portals/135/documents/foia/declass/WS117...",
      "If there's two things I've learned about chemistry from ExplosionsAndFire in YouTube it's- Yellow is bad- The 60s were awesome",
      "English is great for technical writing.",
      "It probably helps that you have to be exceedingly thoughful about every keystroke & word less you need to completely retype the document or page!",
      "\"lest\" perhaps?At least you don't have to retype the whole sentence. ;)",
      "\"At one point, I received a well-deserved earful from our machinist about how tightly spaced the turbine blades were. The program was taking nearly a month to run and required tiny end mills that broke often. We performed a turbine blade count study to see if we could use fewer blades with more space between them. It turned out the performance impact of running fewer blades was minimal, so we cut the number down, allowing our machinist to use larger, less fragile tools. Machine time dropped to less than a day, which was a significant win for turbine cost and machine time. It was also a good lesson in thinking comprehensively about a design\u2019s manufacturability (those passages between the blades looked so big on the computer screen!) in addition to its performance. \"Once again people learn the hard way that it's valuable to have tight feedback cycles and embedded knowledge on your team.",
      "And also the value of a completely obsessed engineer. If the mech eng designing the parts is also the type to build things in his spare time, this type of machining problem would stand out right away.Of course, not everything can ever be anticipated, so tight feedback loops are fantastic when you can get them.",
      "I'd agree with this take more. It's just cheaper and faster to just know whys and plan ahead than waiting for failures, if you could.I've been tinkering with 3D printers long enough that I've trivially halved print times after seeing long print time predictions. Lots of my brackets and parts fits together on first try and needs no supports. Rapid turnaround did help in _acquiring_ those skills, but now I could just waterfall little projects and tight looping is not that important.",
      "Valuing \"completely obsessed\" employees is a great way to build a company with toxic burnout culture.  Some people want lives outside of work and are still good at their jobs.",
      "Or some people are so good at their jobs that even while being completely obsessed, they still have great work-life balance.I interact with a lot of people like the author in the article from this industry. And while yes, their worklife balance skews \"work\", they all have interesting hobbies and find time to hang out with friends, go on adventures, and live a pretty full life.Unless you're on the Starship team at SpaceX. Truly, hats off to y'all at Boca Chica some intense hours you are pulling there."
    ],
    "link": "https://blog.ablspacesystems.com/p/building-e2",
    "first_paragraph": ""
  },
  {
    "title": "The world's loudest Lisp program to the rescue (funcall.org)",
    "points": 121,
    "submitter": "kryptiskt",
    "submit_time": "2024-05-02T07:50:34",
    "num_comments": 25,
    "comments_url": "https://news.ycombinator.com/item?id=40233736",
    "comments": [
      "Great writeup! I am a long time user and fan of Common Lisp, and this is one of the more interesting use cases I have seen!",
      "Thank you Mark! There are blessed and cursed projects out there, and this one has definitely been the former.",
      "Author here, if you have any questions.",
      "How was working with posix threads? I've only dug into SBCL's various thread tools",
      "On Common Lisp, I loaded a nearly 30 yo eliza Chatbot written in CL, \nit ran almost straight under SBCL with just omitting an error:https://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/areas...       sbcl --load eliza.lsp\n       (top-level)\n       (hello how are you)\n\nDo not use punctuation. Use (goodbye) to exit.From a Unix user like me, SBCL/CL looks a bit bloaty and non-Unix, but I have to acknowledge that CL and Emacs' Elisp had a great history on compatibility and easyness due to the homoiconicity. In plain English: \neverything it's handled in the same way everywhere.\nThe syntax will be the same on every function.",
      "Is it really established wisdom that multiple inheritance might be an anti-pattern? Anyone care to elaborate?",
      "A nice pattern from Common Lisp is to inherit the parts of an object from different superclasses.  Method combination means one can write methods for those superclasses and then have them automatically combined in a subclass.Example:  if one has tree nodes with various slots that represent children and you want to write a tree traversal function, you put each slot in a superclass, inherit from those superclasses in the correct order, and then write a method for each superclass that calls the child at that slot.  The methods are combined in the right order automatically in a PROGN method combination.",
      "I think the implementation in C++ put it out of fashion, as later languages (e.g. Java) deliberately restricted it to avoid the complexity.  The main criticism I saw was the potential for (variants of) the \"diamond\" where A is subclassed by B and C, then both of those are subclassed by D.  Does D get two copies of A's state?  It's hard to come up with an intuitive behaviour.More recently, the move seems to be away from class based object orientation (including inheritance) entirely.On the other side of things, I've never heard people talk about Python's multiple inheritance with the same tone used for C++ - but then there are cultural differences in the language communities too.",
      "Something I\u2019ve found interesting is that most widely-used class-based inheritance languages eventually added multiple inheritance of implementations back in: PHP added traits that can contain method implementations; Java added default implementations on interfaces; etc.",
      "The famous \"super considered harmful\" post ( https://fuhm.net/super-harmful/ ) pointed out the key problem with diamonds, and it's mainly a problem with constructors. Allowing mixins that can have method implementations but only allowing one class parent with a constructor is a pretty good spot in the design space, and is what a lot of languages have converged on."
    ],
    "link": "https://blog.funcall.org//lisp%20psychoacoustics/2024/05/01/worlds-loudest-lisp-program/",
    "first_paragraph": "It is interesting that while I think of myself as a generalist developer the vast portion of my career has been towards embedded and systems programming. I\u2019m firmly a Common Lisp guy at heart but embedded tech landscape is the entrenched realm of C sprinkled with some C++ and nowadays Rust. However I had incredible fortune to work for the last few years on a substantial embedded system project in Common Lisp."
  },
  {
    "title": "The life and times of an Abstract Syntax Tree (trailofbits.com)",
    "points": 20,
    "submitter": "jnord",
    "submit_time": "2024-05-02T22:47:05",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=40242224",
    "comments": [
      "Starting a paragraph about how to \"safely\" remove safeguards, and then tongue-in-cheek joking about Rust, kind of looks worse when your very first example isn't safe and liable to segfault even before the \"proverbial gun\" variant :)It needs to be> auto &lhs = *node_storage.emplace_back(make_unique(...));instead of dereferencing lhs on the third line: emplace_back returns a reference to the inserted item, so it's a &unique_ptr...and that reference is invalidated by the rhs emplace_back reallocating the vector.Rust also has a number of easy to use ways to do the same thing - slotmap or typed_arena are the standard, or just doing the vector indices scheme manually like at the bottom: this post is talking in circles around the fact the vector is really being used as an arena allocator without saying that, and so has obvious problems with it being extremely fragile to anyone who reads the type and expects it to be vector-like. It would probably do better explicitly saying that and linking to the wikipedia page or whatever, so the reader can look into the proper way of doing the code pattern.",
      "There's another, much nicer, solution to the contiguous allocation problem: use a proper arena allocator. This is essentially the article's `std::deque` option, but without the downsides of \"every node is the same size\" or Microsoft's deque implementation.You can get 90% of the way there by expanding the `vector`+`reserve` approach to keep a list of vectors, and allocate a new one whenever the previous one fills up. Replace the vectors with untyped byte buffers, and you can fill them with objects of different sizes.This is quite reasonable to do even in Rust, e.g. with bumpalo: https://docs.rs/bumpalo/latest/bumpalo/.",
      "I admit I was also thinking arena allocator the whole time I was reading that. I think it would work rather well since you are building up a tree piece by piece."
    ],
    "link": "https://blog.trailofbits.com/2024/05/02/the-life-and-times-of-an-abstract-syntax-tree/",
    "first_paragraph": "By Francesco Bertolaccini"
  },
  {
    "title": "Passkey Implementation: Misconceptions, pitfalls and unknown unknowns (corbado.com)",
    "points": 40,
    "submitter": "vdelitz",
    "submit_time": "2024-04-30T18:52:07",
    "num_comments": 13,
    "comments_url": "https://news.ycombinator.com/item?id=40214736",
    "comments": [
      "About three weeks ago, I grabbed some samples out of a freezer at -80C without gloves because it was quick.  Yes it was stupid! (It's also quite common that someone who needs to \"grab one sample real quick\" does this.) The fingers on my right hand felt prickly for a couple minutes after that but no harm, it seemed.  Well it took a couple weeks but the fingertips on my right hand all started blistering and one finger basically has a second-degree burn.  My left hand, which I didn't use on the freezer, seems to be experiencing mirroring blisters, and I have no explanation since I didn't do anything stupid or otherwise to burn/blister them.  If I were relying on passkeys and I couldn't register multiple keys, like one for each of my ten fingers plus face plus hardware token, I'd be locked out of my passkey-protected accounts for... I mean I honestly don't know how long, my fingerprints could still be healing a month from now.So between that and the kinks that still need to be worked out regarding exporting and FAANG lock-in, I'll keep using my passwords.  And wearing gloves when using -80C freezers.",
      "Very thorough article, nice! I'll add some other pain points I experienced:- You need to let users register more than 1 passkey, but how to show them which is which? There are lists like this one[1] and FIDO provides a (maybe irrelevant?) list on their site[2] stuck inside of a JWT. I ended up using that JSON list + registration date + browser UA that registered it + \"currently using\" indicator when the current session derives from that specific passkey. Still kind of feels like a mess.- The popular libraries seem to follow a kind of \"shadow spec\" where they agreed on using the URL-friendly variant of base64, which doesn't have native browser support. Not a big deal (just a couple helper functions needed) but kind of confusing if you're trying to implement the client or server bits from scratch. [Edit: as explained by a reply below, this is part of the actual spec!]- I still don't know whether it's possible to use both usernameless and usernameful passkeys simultaneously. The APIs seem to be mutually exclusive, differentiated by some options (some of which are already deprecated?) and requiring empty lists to be passed in certain places. I'm trying to bolt on passkeys to a pre-existing auth flow and all I want is the closest thing to \"use the browser's built in password manager\". Ended up giving up on resident keys for now.[1]: https://github.com/passkeydeveloper/passkey-authenticator-aa...[2]: https://fidoalliance.org/metadata/",
      "We ask the user to name each passkey. One more modal dialog during registration, but seems to work well.",
      "> The popular libraries seem to follow a kind of \"shadow spec\" where they agreed on using the URL-friendly variant of base64WebAuthn itself uses base64url rather than base64. See, e.g., the `id` field here: https://www.w3.org/TR/webauthn-2/#iface-pkcredential(It was probably a mistake, but it predates me so I don't know the motivation.)> I still don't know whether it's possible to use both usernameless and usernameful passkeys simultaneously.Non-discoverable credentials can only be used if their credential ID is passed in an allowlist. Discoverable credentials (a.k.a. \"resident\" in the API, although that name is a bit misleading) _can_ be enumerated in an allowlist. So they can work together, but to have the allowlist you must collect a username first or have some other way of know which account is pertinent to the current session.",
      "Aha, so it is part of the spec. Thanks for clarifying that. Appreciate the advice on discoverable credentials as well! I was probably leaving out the discoverable creds from the allowlist. Getting the timing down for when to ask for credentials was a bit tricky but I think I see the whole picture now.I will say though, when it all works out it's a really nice way to log in, and my users are happy about it.",
      "Do you allow users to rename their passkeys in your user interface? I very much like how GitHub handles this, take a look in that view if you have a GitHub account. You also get nice info like \"Seen from this browser\" and \"Synced\" (non device bound passkeys) indicators if applicable.https://github.com/settings/security (Passkeys section)https://docs.github.com/en/authentication/authenticating-wit...",
      "That's a good idea, thanks for the suggestion! Maybe I'll let them rename the keys with the provider as the default name. Haven't played with GitHub's implementation yet but I'll play around with it.",
      "I still haven\u2019t really migrated to passkeys yet. Until Bitwarden on iOS properly supports them I won\u2019t fully switch. I don\u2019t want to have to manage a passkey on every device. So I will wait until I can sync between all my devices.But when I did play with them a bit it seemed so full of weird pitfalls. Aren\u2019t I supposed to be able to use my phones passkey to login on my PC with a QR code? I never got that to work. The article implies that might be a windows 10 vs 11 issue- but why? It\u2019s a QR code. Windows 10 should be capable of displaying a QR code. I tried it just now. Windows pulls up a \u201cmaking sure it\u2019s you\u201d box, with no buttons other than cancel, and no option to use the passkey from elsewhere. This computer doesn\u2019t have a passkey, what is windows doing?",
      "I have a nodejs passkey implementation over at AuthC https://github.com/authcompanion/authcompanion2 a simple user management server. For javascript developers https://github.com/MasterKale/SimpleWebAuthn has been a good way to get started with a poc before venturing deeper into webauthn (passkeys) spec.",
      "Two assumptions I have, and I'd love for people to shoot me down on this:1. Most applications will get \"Passkey\" support by dint of OIDC SSO support; OIDC IdPs are the things that will implement Passkeys (SIWA and SIWG for \"retail\" users).2. Direct Passkey adoption in applications will round towards zero, maybe excepting huge applications like Insta; people will do Passkeys with their Google account, but not with (say) Doordash.If those premises hold, I probably don't need to be sold (though this post is helpful and incredibly detailed) on why not to do my own direct implementation of Passkeys; it makes more sense for us to nail OIDC."
    ],
    "link": "https://www.corbado.com/blog/passkey-implementation-pitfalls-misconceptions-unknowns",
    "first_paragraph": "Created: April 27, 2024"
  },
  {
    "title": "Google's Synonym Extraction Methods (2010) (mattcutts.com)",
    "points": 38,
    "submitter": "bms2297",
    "submit_time": "2024-05-02T23:05:57",
    "num_comments": 9,
    "comments_url": "https://news.ycombinator.com/item?id=40242335",
    "comments": [
      "One of the most important components of Pre-2010 Google's search system was its synonym discovery mechanism. Simply put, queries would be \"expanded\" with synonyms. Google automatically generated synonym choices that took into account the context of surrounding words, with the understanding that synonyms are highly context dependent. Steven Baker, John Lamping, and a couple of others were key engineers of the system.Does anyone with a NLP background care to take some guesses on how the synonym extraction methodology worked? My only piece of information is that it likely used the query log itself to do so.",
      "I was on the team too, with less impact than the names you mentioned.  The team filed a number of patents that describe parts of how it worked.  You can query a patent search engine with terms like [baker synonyms].  Looking now I think Steve was on most of the patents and you can also gather adjacent coauthor names from there.[I am not a fan of patents, but to the extent they have any positives they in principle serve to share knowledge about how inventions work.  Also I am not a lawyer but I think patents last 20 years from filing date and these were filed ~20 years ago maybe?]",
      "Around 2001 i was using Wordnet to do the same in Motorola Labs days.https://en.wikipedia.org/wiki/WordNet",
      "Wordnet is insufficient for disambiguation, right? That\u2019s why you need the query log.",
      "Also under-rated feature of 2010-era search was Matt Cutts, author of the article.  He was an outlier at Google in that he did real community engagement as well as anti-spam, which is a huge contrast to today\u2019s Google and how the internet has reacted to present-day SEO.While the Matt Cuts era search tech is interesting, it\u2019s crucial to keep in mind that the dataset was very different then too as a result of Matt Cutts\u2019 own attitude towards spam and SEO.Back in 2010 LDA was big and Google had used probabilistic networks e.g. Rephil / large noisy-OR networks as modelshttps://uh.edu/nsm/computer-science/events/seminars/2016/110...Would the same things work today given how SEO spam and Google ads work? The same models are probably useful but it\u2019s the noise and the long tail of the data that makes the problem hard.",
      "> A lot of people seem to think that Google only does simple-minded matching of the users\u2019 keywords with words that we indexedOh what a dream if that were true! Instead, every year, the 'synonyms' get broader and broader. To me it looks like they're using synonyms of synonyms (of synonyms).One thing is surely true: Google abhors a vacuum, they will show you results, no matter how tenuously connected to your query.",
      "> Oh what a dream if that were true! Instead, every year, the 'synonyms' get broader and broader. To me it looks like they're using synonyms of synonyms (of synonyms).Forget about synonyms of synonyms - I've seen antonyms  bolded as matches in google search results. I have to imagine I'm not the only one.",
      "Given this was published in 2010, and https://en.wikipedia.org/wiki/Word2vec was  published in 2013, perhaps this was an early precursor?From the article linked from this blog post: \"Enabling computers to understand language remains one of the hardest problems in artificial intelligence.\"",
      "(2010)"
    ],
    "link": "https://www.mattcutts.com/blog/google-synonyms/",
    "first_paragraph": "Matt Cutts: Gadgets, Google, and SEO"
  },
  {
    "title": "Teranoptia \u2013 a typeface that allows you to imagine chimeric creatures (tunera.xyz)",
    "points": 368,
    "submitter": "dchest",
    "submit_time": "2024-05-02T09:49:35",
    "num_comments": 39,
    "comments_url": "https://news.ycombinator.com/item?id=40234383",
    "comments": [
      "This is really cool, I've had so much fun putting together critters this morning!I threw together a little page on my site that has a textarea where you can try out the font, if you want to experiment without having to download it yourself.https://epiccoleman.com/posts/2024-05-02-teranoptia-playgrou...I'd like to toss together a little table of the symbols too, and I also thought it would be cool to use html2canvas to let people download a picture of their creation. Maybe I'll get around to that after work tonight.",
      "The author of the font made it also Glyph Drawing Club \"compatible\", which is a modular shape builder I've built that works with font files. You can just drag and drop an otf or ttf file on the app window and it'll load the glyphs as svg shapes to draw with. The neat thing is that it works in two dimensions, and you can also rotate (with r hotkey) or invert (with i hotkey) the glyphs, and output the drawing as SVG or PNG.https://glyphdrawing.club",
      "Wow, that is really cool. I'll definitely be playing with this later, thanks for the tip!",
      "The creatures at the bottom of the page are editable already.",
      "D'oh! Of course they are haha. It didn't even occur to me to try.Edit: I guess one neat thing about my page is that you get a readout of the characters in your critter. Obviously you could just copy-paste from that field at the bottom of the Tunera page into any other text field and find out that way, but I did find it helpful when I was trying to experiment.",
      "Thanks, I didn't realize this.",
      "Thanks. Kinda expected (or at least I do, being accustomed to Google Fonts) nowadays a font-hosting site to have something like that.edit: Just saw sibling comment that placeholder text is editable. Hadn't noticed it.",
      "Your /assets/me.jpg is a 1.3MB image, but is only displayed at very small thumbnail size on your page.",
      "Great feedback, I'll look into reducing the size of that image, especially for the post headers. Thanks for checking out the site!",
      "Me and the 6 year old have been making Pok\u00e9mon cards and generating AI character images based on chimeras. This morning on the way to school we dreamt up a knight+scorpion with tons of armor. Basic: knightstrike, stage 1: knightbite, stage 2: knightflight.Totally installing this font on the kid\u2019s rasp pi. This will be a fun way to explore the keyboard. Love it."
    ],
    "link": "https://www.tunera.xyz/fonts/teranoptia/",
    "first_paragraph": "Teranoptia is a typeface without letters, a peculiar contraption that allows you to imagine chimeric creatures just by typing letters with your keyboard. Its design has been inspired by the Bayeux Tapestry and by medieval illustrations, as well as by children's books. You can use it to create border ornaments, to daydream about monsters or just to spice your layouts with marginalia."
  },
  {
    "title": "Piccolo \u2013 A Stackless Lua Interpreter (kyju.org)",
    "points": 138,
    "submitter": "vvoruganti",
    "submit_time": "2024-05-02T17:38:01",
    "num_comments": 12,
    "comments_url": "https://news.ycombinator.com/item?id=40239029",
    "comments": [
      "Monospace fontPlease don\u2019t use monospaced fonts for long-form text.It\u2019s extremely different to read because your eye struggles to see the \u201cshape\u201d of each word, when everything is equally spaced apart.",
      "I love how there are many Piccolo REPLs embedded in the article and interleaved with the paragraphs.Piccolo looks amazing, I got a perfect use case for it, and I'm excited for when I get the chance to use it, thank you for working on it.",
      "A bit off topic: I just wrote a bunch of lua C debug api code  (lua_sethook) to pre-emptively run and context-switch multiple lua \"coroutines\" (well not so \"co\").Is this library offering a lua implementation more well-designed for this use-case? I got all this code to unload the coroutine stack to store and and reload it before continuing it later. Does having C bindings to this library makes sense?",
      "I think yes?My understanding is that the \"stackless\" concept here means that it does not store its execution state in the \"C runtime stack\" (or Rust, in this case).So, there is some blob of memory describing that info, managed by Piccolo, rather than it residing on the \"real\" OS execution stack.In particular, for call chains like: Lua -> C -> Lua -> C (or so), it is normally hard to save/restore the \"C\" parts of that chain, since you need to peek into the not-normally-accessible and platform-specific C runtime stack details. I wonder: how are you doing it in your system?In Piccolo, I imagine it would be easier, since even the \"-> C ->\" portions of the stack are being managed by Piccolo, not the base C runtime. I don't know what the APIs to access that stuff actually look like, though.Aside: have you looked at Pluto/Eris for Lua serialization of coroutines?----EDIT Yes, it seems like the section The \"Big Lie\" is right up your alley (:",
      "Well the only thing that's really itching me is the fact that the whole lua debug.* section is documented as>You should exert care when using this library. Several of its functions violate basic assumptions about Lua code (e.g., that variables local to a function cannot be accessed from outside; that userdata metatables cannot be changed by Lua code; that Lua programs do not crash) and therefore can compromise otherwise secure code\n(from the manual)kinda creeps me out.",
      "reading beyond the first paragraphs, I see this practically what he advocates to do :P",
      "I wonder if a Rust reimplementation of Lua will, one day, be faster than LuaJIT.",
      "Good point, it is well known that speed of machine code varies greatly depending on what language was used to generate it. Jokes aside, I really don't see a point in this. The safety guarantees of Rust are thrown out of the window the second you call dynamically generated code.",
      "Clearly that isn't the case, surely Mike Pall would have heard of it, when he brought back LuaJIT from the future, that is.",
      "Not without being a JIT. See Cranelift. I've used it to make a Befunge JIT in Rust"
    ],
    "link": "https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/",
    "first_paragraph": "2024-05-01"
  },
  {
    "title": "They thought they were joining an accelerator \u2013 instead they lost their startups (techcrunch.com)",
    "points": 109,
    "submitter": "e2e4",
    "submit_time": "2024-05-02T21:24:42",
    "num_comments": 52,
    "comments_url": "https://news.ycombinator.com/item?id=40241525",
    "comments": [
      "> So she paid a $7,500 deposit and was all set to join Newchip when a founder friend told her to \u201cnever pay for introductions.\u201dHopefully everyone knows this here, but if you paid for an introduction it's a negative signal: just cold email.That being said, I'll make intros for only $6,500 and no warrants.",
      "Don't listen to this charlatan. For only $6,499 I'll introduce you to a chap who won't charge you a cent over $6,498 for an introduction.",
      "Of note from the article: she complained and was refunded the money after being stood up for the meeting, but they never cancelled the contract she paid to sign that gave them the right to buy her out of her own company for pennies, so once it passed to bankruptcy the creditors still took her company.",
      "Wouldn't a contract like this be considered unenforceable? There were no services rendered, no exchange of value",
      "Add TechStars to the list of accelerators to be avoided at all costs. They make an investment in your company on terms they can claw back the money at any time. Most of these accelerators provide little to no value, in my experience. Unless you need to know what \u201cproduct market fit\u201d means. Hilarious.",
      "> They make an investment in your company on terms they can claw back the money at any timeIt is a loan then, not an investment.",
      "Any source to your avoid TechStars advice?",
      "This piece goes into some detail: https://www.founderscoop.com/2024/what-went-wrong-at-techsta.... An erudite and incisive autopsy of a disintegrating accelerator.I'm no longer in the startup scene so I can't vouch for its facts, however.",
      "> https://www.founderscoop.com/2024/what-went-wrong-at-techsta...Thank you, it's what I'm looking for to understand why.",
      "Most VCs add zero value aside from the money. Bootstrapping is always better, if you can do it, of course.Exhibit A: Naval Ravikant, the flagship SV investor, widely regarded to as \"a wise man\", just released a kind of crappy messaging app that flopped. Imagine having unlimited leverage, unlimited money, unlimited reputation, a huge audience already in place and still that not being enough to put out a competent product. Now imagine this guy asking for 20-30% of your company equity in exchange for \"advice\", lol."
    ],
    "link": "https://techcrunch.com/2024/05/02/they-thought-they-were-joining-an-accelerator-instead-they-lost-their-startups/",
    "first_paragraph": "Lacey Hunter thought all was well as she put her startup through the three-month Newchip accelerator. Then the organization filed for bankruptcy in May 2023. Things went from bad to worse later that year when she discovered warrants of her company \u2014 rights to buy an ownership stake \u2014 had become part of the proceedings, which ultimately forced her to shut down her company."
  },
  {
    "title": "Gene banks aren\u2019t enough to save the world\u2019s food (longnow.org)",
    "points": 118,
    "submitter": "WithinReason",
    "submit_time": "2024-05-02T16:15:54",
    "num_comments": 58,
    "comments_url": "https://news.ycombinator.com/item?id=40237947",
    "comments": [
      "https://web.archive.org/web/20240502200255/https://longnow.o...https://archive.ph/lmdjF",
      "I recently came across the videos of Oregon State horticulturalist Andrew Millison, who is an amazingly clear presenter about permaculture: https://www.youtube.com/@amillison/videosFor example, he has nice videos about chinampas in Mexico https://www.youtube.com/watch?v=86gyW0vUmVs , a medieval Indian canal tunnel of a style found throughout Iran https://www.youtube.com/watch?v=Kplvq0C-cdE , efforts to return a Hawaiian watershed to something like its historical state https://www.youtube.com/watch?v=q7q8friw1p8 , the Indian Paani Foundation's \"water cup\" to revitalize drought stricken villages https://www.youtube.com/watch?v=DXqkSh7P7Lc , and the difficulty of using ancient iron-saturated aquifers for irrigation in western Egypt https://www.youtube.com/watch?v=QBC5wOLF1hQ",
      "I had some time several months ago and happened to look through a copy of Lo\u2014TEK. Design by Radical Indigenism instead of reading on my phone. It has some good sections about the styles of permaculture you mentioned. But it is more of a collection of short chapters on each technique rather than a deep dive into any one.https://uk.bookshop.org/p/books/julia-watson-lo-tek-design-b...",
      "Home gardeners seem like a pretty good option here. For more regular vegetables, this is already a thing that exists with seed libraries and exchanges, and programs that preserve heirloom varietals and sell the seeds to gardeners. Buying these seeds is basically just a way to help pay for the continued cultivation by the breeder (unfortunately, unless you really know what you are doing and are quite careful, preserving a specific variety on your own in a home garden is difficult-verging-on-impossible, despite what 1000 online guides to \"seed saving\" will tell you).The harder thing is the grains, since those typically require so much more work to get from the plant to the plate. I've looked into growing my own wheat before (I already have a large garden and have enough space that I could theoretically grow enough wheat to cover a substantial portion of my annual flour use), but the small scale/DIY options for threshing, sorting, grinding, and sifting are just not quite practical (for the level of effort I'm willing to put in, which I'm quite sure is higher than most home gardeners).If a small scale solution to harvesting and processing wheat can be made relatively cheap and simple, I'd bet you could get home gardeners to support the continued cultivation of these varieties in the same way that they frequently support heirloom tomatoes etc.Again, to be very clear, the gardeners themselves are (mostly) not doing the preserving. The plants home gardeners grow are a dead-end genetically (usually not being preserved at all, and even when they are, almost certainly representing mixes of several different varieties), but buy purchasing seeds from the larger scale growers, they are paying to support the continued cultivation of those varieties.",
      "Wowa, something I have experience with.I've harvested 25lbs of wheat berries from a boulevard in my city. I then threshed, winnowed it myself. I still have some of the flour and berries left and use it to make bread.I did my threshing using a lawn mower on a big tarp. This actually worked fairly well. Were I to do it again I would probably want a more repeatable setup. Ive seen some good strategies on youtube.The winnowing I did with a leaf blower, and worked pretty well, I think I would use this strategy again, but I suspect if you were going to do it more often it would be very easy to build something that would help mechanically.I have a friend with a little home flour mill which took a while but was perfect for turning it into flour. If you were to do it fresh when you wanted to make bread these little mills are fantastic.There's a book I highly recommend reading called Small Scale Grain Raising [1] that has a lot of good tips, and ways to do this kinda stuff.In this book they recommend using a leaf shredder or wood chipper which would be incredibly effective.[1] https://www.chelseagreen.com/product/small-scale-grain-raisi...",
      "I did a small patch of wheat and barley. I also malted it to make my own beer.I just used a box fan for winnowing. I built a 5 gallon bucket thresher to use with a drill. Worked really well.I'm doing winter wheat this year for bread.",
      "I'd be interested to hear about the bucket thresher. Most of the DIY options I found when I was looking where larger with custom flail mechanisms and bike-chain drives etc. Honestly, building the thresher itself seemed like kind of a cool project on it's own, but it was just more effort than I was willing to put in. But a 5 gallon bucket option that runs of a drill sounds much more my speed.How much did you process? What is the maximum amount you think you would have been willing to process with that method?",
      "How did that boulevard end up planted with edible wheat?",
      "I'd be more worried about how polluted it is",
      "You are not going to believe what they use to harvest and deliver wheat"
    ],
    "link": "https://longnow.org/ideas/to-save-it-eat-it/",
    "first_paragraph": "Photo by Avinash Kumar on Unsplash"
  },
  {
    "title": "How did Ancient Greek music sound? (youtube.com)",
    "points": 165,
    "submitter": "tintinnabula",
    "submit_time": "2024-05-02T03:46:11",
    "num_comments": 76,
    "comments_url": "https://news.ycombinator.com/item?id=40232492",
    "comments": [
      "Youtube for folks who prefer not to click twitter links: https://www.youtube.com/watch?v=4hOK7bU0S1Y",
      "Thanks! we've changed the URL to that from https://twitter.com/classicstudies/status/165222693571865805... above.",
      "Are Twitter links discouraged on HN?",
      "That's not why I changed the current URL. As for Twitter links in general - it's a mess right now. A lot of significant content only exists in that form, so I wouldn't go so far as to say they're discouraged; but it's good to check if a better / more accessible source with the same information is available.",
      "Thanks for the original link, X videos load way faster and with less bloat than Youtube videos for me.",
      "I have some very basic understanding of greek, so I'm not an expert by any stretch of the imagination. But the way that they pronounce (sing) diphthongs is not quite right and I feel that makes the song sound... rougher somehow.",
      "They are also probably trying to reproduce Ancient Greek pronunciation, which treats diphthongs differently. I believe in Ancient Greek the sounds were pronounced closer to how they are spelled, and the collapse into diphthongs happened later (nt -> d, mp -> b, ai -> e, etc.).",
      "No one knows, nor could they ever know.",
      "To some degree that's true, to some degree it's not.Given enough of the right samples and their context, you can make strong informed guesses about pronunciation from how words are used in structured samples like poetry/plays that embed rhythm, rhyme, etc in established ways; from patterns in the way words shift over time; etcThere are quite a lot of signals you can feel confident drawing from, but of course you can't get to 100% accuracy even if you had perfect insight or even heard the word spoken because pronunciation does still vary by individual, family, community, context, etcI don't know what's right here myself or how established the consensus is around what might be right, but the discussion you're responding to isn't frivolous or unreasonable on its face.",
      "There is plenty of evidence, well documented, of how ancient Greek languages, and Attic in particular, sounded. Transliterations of Latin, Egyptian, Persian names, and words taken from other languages, and Latin transliterations of Greek names and words. Non-orthographic spellings and misspellings. Rhymes and the preservation of supersegmental qualities in poetry. Grammarians describing in detail how likely barbarians were to mispronounce certain words and how to best pronounce words. There's more to learn, but it's not unknowable."
    ],
    "link": "https://www.youtube.com/watch?v=4hOK7bU0S1Y",
    "first_paragraph": ""
  },
  {
    "title": "Every map of China is wrong (medium.com/anastasia.bizyayeva)",
    "points": 53,
    "submitter": "bschne",
    "submit_time": "2024-05-01T06:08:54",
    "num_comments": 28,
    "comments_url": "https://news.ycombinator.com/item?id=40220072",
    "comments": [
      "So Openstreetmap must be illegal in China!And indeed it is: https://wiki.openstreetmap.org/wiki/ChinaOf course that doesn't stop people from mapping every bench in China https://www.openstreetmap.org/search?query=China#map=3/33.99...",
      "Indeed, despite its apparent illegality, China seems to be fairly well-supported and well-mapped by OpenStreetMap, at least in major cities. And is entirely mapped in normal WGS-84 without the obfuscation problem.In any case, according to Wikipedia, open-source code is available to convert between WGS-84 and the obfuscated GJC-02 coordinates.Since technology seems to have caught up with it, is there any advantage (military or otherwise) for China to persist with obfuscation? Much like the US gave up on GPS \"selective availability\" years ago, there would seem now days to be more economic advantage to ditching obfuscation than there is security advantage of keeping it. Is not as if the missiles of China's enemies are going to get confused by China's obfuscated coordinates.Is it just because of inertia that GJC-02 still exists?",
      "It seems that even taking geotagged photos is illegal in China, indeed some camera models automatically disable geotagging when inside China: https://ogleearth.com/2012/05/why-do-panasonic-leica-fujifil...",
      "Thanks for the details. It is always interesting how the most innocent things are seen as danger by an autocracy.",
      "Everything which is not allowed is forbidden.https://en.wikipedia.org/wiki/Everything_which_is_not_forbid...",
      "Sir John Laws, nominative determinism in action.",
      "In the many places in the US its illegal to photograph the police.  In new York its illegal to photograph certain ports or landmarks.  It is illegal to photograph US railroad tracks.  Photographers are routinely harassed and detained by police for exercising their rights.The us also regulates space photography of the earth",
      "Only the last sentence of your first paragraph is true: it\u2019s legal to photograph the police and public spaces _but_ doing so may involve you needing to deal with lawless cops and that can be extremely risky depending on who you are and what mood they\u2019re in. Dealing with that culture should be one of our top priorities.",
      "At some point it was illegal in NYC to go out with a with a mask on, while it was also made illegal to go out without a mask on.(That was when they were both protests that made them ban masks (that obscure the face), and Covid that made them mandate masks.  But I think the laws were written broadly enough that both covering and not covering your face were technically forbidden.)",
      "For the record: it is legal to photograph police in all of the US, and is a protected 1st amendment right. Some states or localities might try to outlaw it, but they always lose when challenged. Some police may simply ignore the law and punish you for exercising your rights, but that's different than it being illegal.With regards to photography on US railroad tracks, there is no law against it. However, railroad tracks are private property and in the US private property owners can control your photography on their property or trespass you from their property, and due to the danger of pedestrians on tracks, railroads understandably disallow pedestrians on tracks for photography."
    ],
    "link": "https://medium.com/@anastasia.bizyayeva/every-map-of-china-is-wrong-bc2bce145db2",
    "first_paragraph": ""
  },
  {
    "title": "Got an old Raspberry Pi spare? Try RISC OS. It is, something else (theregister.com)",
    "points": 135,
    "submitter": "m_c",
    "submit_time": "2024-05-02T19:55:59",
    "num_comments": 38,
    "comments_url": "https://news.ycombinator.com/item?id=40240737",
    "comments": [
      "It was ahead of its time in UX, but rather behind in the foundations. It's a single user system with no real security, and there was no system of shared libraries - to share code between applications, it was usual to put the shared code in a kernel module and call the kernel. Even the standard C library worked this way.Amusingly, when you invoked the system console -which was at a lower level than the gui system, effectively pausing it - the command line appeared at the bottom of the screen and the frozen gui scrolled up as you entered more commands; until you exit the system console. (It was also possible to get a command line in a window, which could do slightly less - I forget exactly what)",
      "Sharing code? I like my apps bundling a whole browser to render a couple buttons",
      "I'm not even sure it was ahead in its UX; it had a three button mouse, and daily operations needed all three mouse buttons. I had to use them for years at school and I feel you could never quite be sure what the third button would do. In some cases, it was like what shift-click does today, in other cases it selected menu items without closing the menu, in other cases it moved windows without bringing them to front and in yet still different cases it opened a _different_ menu to the one the middle-click did.For menus, I feel it was the worst of all systems. The Mac and Amiga had menus consistently at the top of the screen, and the Mac was good for discoverability in that it showed you the menus were there without you having to click a button. Windows also did that, but menus were attached to windows (bleh). RISC OS was worst of all, _every_ menu is a context menu, including app-level menus - and you got different menus depending on whether you middle-clicked on the icon bar icon, or you right-clicked on the icon bar icon.There was no standard file requester, _everything_ was drag and drop; to load a file, you had to drag it onto the application (although yes, default file associations allow you to double-click it). To save, first make sure you've got a filer window of the directory you want to save to open and visible on screen, then middle-click in the window of the file you're working on, navigate to File -> Save -> a tiny box with a file icon appears, you get to type the filename, then you have to _drag_ the file icon to the folder to save. And if you accidentally mouse-out of that box while typing the name, you lose the name.The OS was also ridiculous in some of its APIs, particularly that there were a million and one things under the calls OS_Byte and OS_Word - yes, really, API calls all clustered together because they return a byte or return a word. It's a design holdover from the original BBC Micro's OSBYTE and OSWORD calls. There's also a pile of crap multiplexed behind \"VDU\" calls, and much like terminal emulators, there's a lot of behaviour you can invoke by printing specific control sequences to the text screen, including mode-switching.It had a weird system where _all_ OS calls were either \"I'll handle errors\" (e.g. SWI XOS_WriteC) _or_ \"let the system handle errors\" (SWI OS_WriteC), which in most cases means that if the OS call ever had an error, it stopped and exited your entire program. The problem with this approach is lots of programmers chose to write software that falls over at the slightest provocation, rather than think to deal with every error and decide how much to deal with recovering it. So, for example, let's say you've been working in a paint package on your masterpiece, you save to disk, and there's a read/write error. Goodbye masterpiece.You can get a flavour of its programming environment from http://www.riscos.com/support/developers/prm/It also had its own filesystem metadata craziness; there were no file extensions, but rather file type metadata saved separately (the Mac also had this madness), and it also saved the \"load address\" along with the file.Nonetheless, what I did like about it was:1. That the whole OS was ROM-resident and you can boot a device with no media needed at all, within 3 seconds of turning it on. AmigaOS was _nearly_ all ROM-resident, but nonetheless required a boot disk to get to Workbench (all you need on that boot disk to get to Workbench is a ~200 byte program that launches it; it was clearly a deliberate choice to insist on a bootdisk, and I think it would've been better if it didn't)2. That it pioneered \"an app is a special kind of directory\", so you can keep all your app's assets inside a folder. Mac OS at this time was using the awful resource-fork system to do this, but by Mac OS X it had seen the light and create apps and resource bundles3. That it had a built-in BASIC interpreter, and this was a very fine BASIC because it had a full assembler built into it and it had fantastic BASIC-to-machine-code interoperability. You could write all the bits that needed to be fast in assembler, while writing the rest in BASIC. There were even a few commercial games released written in BASIC+Assembler.Overall, AmigaOS was a much better OS than RISC OS, but I do still have space in my heart for the plucky British operating system.",
      "> you got different menus depending on whether you middle-clicked on the icon bar icon, or you right-clicked on the icon bar iconAre you sure you're talking about RISC OS? Because you're got the overview right but your details are weird. Right-clicking never pops a menu in RISC OS. Only the middle button does that. That's why the buttons in RISC OS have names. They're not \"left, middle, and right\" they are \"select, menu, and adjust\".The \"everything is an object\" drag-and-drop was absurdly powerful. You're not limited to dragging into a directory, you can equally well \"save\" a file directly into another application, avoiding the middle step of dumping it onto the disk first.Personally, I find that the trend in making all UIs as easy as possible for the beginner to be a step backwards. Yes indeed, beginners can get going quicker, but then you've very quickly learned everything and there's no where to go. The pro user cannot work faster. The pro user cannot do more. We're all stuck behind fisher price interfaces.If you treat users as if they are children, they will always use your software like a child.",
      "> Because you're got the overview right but your details are weird.Having just booted up RedSquirrel, yes, I accept I'm slightly misremembering. Right-clicking doesn't open a menu, it is consistently middle-click.However, it is still somewhat inconsistent. In several applications (for example, !Maestro or a filer icon), left and right click on the icon bar do the same thing, while in others (for example !Edit), only left click opens a new window and right click does nothing.Playing around with RISC OS 3.10 again, I'm also reminded of the nonsense that is menu items with arrows on them (indicating sub-menus, or sub-windows like save boxes) require you to successfully slide the mouse through the arrow to open them. Almost all other menus I've seen will open sub-menus as soon as you land _anywhere_ on the menu item.While drag-and-drop may be powerful, the ergonomics of the UI were atrocious. I don't think anyone at Acorn had heard of Fitts' Law. The tiny save box also required you had exactly the right filer window open, ready and waiting. You couldn't easily change your mind like you can with a file requester (and also with modern MacOS's spring-loaded folders).I also think the OS was designed with the expectation that overlapping windows would be _normal_, and I don't think that's ever been the case, certainly not how I use computers. Most windows I have open are fullscreen, and I switch between them (most commonly with the alt-tab concept that Windows brought). I might have _internal_ windows inside one app's window (for example, multiple code editing windows and terminals in an IDE, or tools, palettes and layers in graphics editing), but only on special occasions do I have two separate _application_ windows visibly open on the same screen, and when I do, they're usually side by side, not overlapping.",
      "Acorn was a curious company. It managed to get incredible amounts of work done, by assigning big projects to individuals instead of teams. My memory is not to be relied on at this lapse of time, but I seem to recall that in the final years there was a browser maintained by one guy, a port of Java by two, and an implementation of directX by another. Obviously all those projects were much smaller back then (around 98) but still, those devs were doing the work of what another company had a team to do. And in fact this does work, as communication overhead is reduced, but in many cases the increase in productivity loses strategically to the slower time to market.",
      "From personal experience it's amazing how much more productive I am on solo projects vs working with other people. When you're solo you can just go, but in a team everything needs to be discussed or at least communicated.",
      "Old joke but - Two engineers can do in two months what one engineer can do in one month.But this sort of goes with the African proverb, \"If you want to go fast, go alone. If you want to go far, go together.\"",
      "Scaling software development has been THE vexing problem since day one. There's no doubt that the most efficient system fits in the head of a single person; the challenge is then what?",
      "Related to this subject is Casey Muratori's video about Conway's law and a possible extension to it. The communication overhead of working in teams, and the fact it's harder to address cross-cutting concerns in them, is a key theme in it.https://www.youtube.com/watch?v=5IUj1EZwpJYThere is also Descartes' quote about how a work produced by one master is often better than one in which many are involved, because of the unifying vision."
    ],
    "link": "https://www.theregister.com/2024/05/02/rool_530_is_here/",
    "first_paragraph": ""
  },
  {
    "title": "Show HN: An extension to track your Wikipedia adventures (chromewebstore.google.com)",
    "points": 146,
    "submitter": "demegire",
    "submit_time": "2024-05-02T14:36:18",
    "num_comments": 52,
    "comments_url": "https://news.ycombinator.com/item?id=40236797",
    "comments": [
      "I wrote a plugin just like this, and every day, I have it present me with a quiz based on a summaries of the first paragraph of the pages I read over the day.Basically, I was reading way too much Wikipedia and not actually storing much information, so I have the extension shame me if I don't remember what I read.",
      "That's genius. Have you published this as an extension? I'd love automatically-written flashcards to quiz myself on what I've read that day...",
      "https://news.ycombinator.com/item?id=40151952 ;)",
      "Have you tried out a tangled-tree visualization? [1] I've found it to be super useful when visualizing these sorts of relationships in a compact way, and it naturally sorts the data topologically.[1] https://observablehq.com/@nitaku/tangled-tree-visualization-...",
      "Is there a source code for the visualization?",
      "Very cool! One small point of pedantry:> A tree with multiple inheritance (sometimes called tangled tree) cannot be represented by using a classic tree visualization. It is technically a directed acyclic graph (DAG) with one (or more) nodes identified as root.What is the difference between a DAG and a tangled tree? Isn't any DAG a tangled tree? I don't see immediately why a new definition is required.",
      "I'm not entirely familiar with tangled trees, but it seems like one of the larger differences is that a tangled tree isn't necessarily acrylic. For this example, someone could navigate away from one page, but potentially be linked back to it later down the adventure.",
      "This looks really neat",
      "I feel like there's a lot of knowledge or information that we're \"leaving on the plate\". For instance, the sites we visit, the files we edit, the branches and PRs we create, etc etc. All of that is related, but it feels like that context is being lost or discarded.An example might be: I have to include new AWS resources in a deployment, so I look up information about them, find examples and read about potential problems, security information, etc etc. That then becomes edits in a terraform file somewhere, with a Jita ticket, my own knowledge database (Emacs org-roam files in my case, Obsidian etc for other people). Then the feature branch gets a PR to dev, we might discuss changes in Teams (ugh) or a meeting. All of that seems ripe to be linked together conceptually, but the computer has no way to do that.It makes me wonder if that could be fed into the right machine learning thing to at least start tracking this sort of work stuff. Heck just synchronizing my Firefox bookmarks (ff lets you tag your bookmarks) with my org-roam instance's tags would be useful. Tagged files in my knowledge base could be automatically linked to similarly tagged bookmarks.",
      "My thoughts on this are to slow down and document and explore that knowledge and information. If it is really valuable, the \"loss\" in efficiency from slowing down will be offset by the gain in skill/utility from really grokking the stuff.If it's not...then there's really nothing \"left\" on the table \u2014 if ever turns out to be valuable, you'll probably come across it again, when needed.I constantly get a similar feeling. I'm speeding around from task to task, just grasping enough to get the current task done so I can get to the next one and the next one...And somehow this is value-creating? Apparently it is, but it seems almost accidental, at that rate.I'd rather slow down and appreciate the value as it moves through me, into whatever I'm doing.I usually get more from the process, at the same time."
    ],
    "link": "https://chromewebstore.google.com/detail/wiki-journey/lehenbcbjcnkhkikgopniimobmmdcfog",
    "first_paragraph": "Google recommends using Chrome when using extensions and themes."
  },
  {
    "title": "Pseudo Graceful Process Termination Through Code Injection (sigma-star.at)",
    "points": 25,
    "submitter": "Deeg9rie9usi",
    "submit_time": "2024-05-02T20:25:32",
    "num_comments": 7,
    "comments_url": "https://news.ycombinator.com/item?id=40241002",
    "comments": [
      "This is cute, but why not just do this with gdb? All-stop mode is on by default so it will stop all threads when you attach, and then you can simply invoke the exit_group() syscall.    tty1$ ./program\n    \n    tty2$ gdb attach $(ps aux | grep program | head -1 | awk '{ print $2 }')\n    Attaching to process 708267\n    [New LWP 708268]\n    [New LWP 708269]\n    [New LWP 708270]\n    [New LWP 708271]\n    [Thread debugging using libthread_db enabled]\n    Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n    0x00007f00b1633117 in ?? () from /lib/x86_64-linux-gnu/libc.so.6\n    \n    (gdb) p (long)syscall(231, 0)\n    [Thread 0x7f00565e6640 (LWP 708271) exited]\n    [Thread 0x7f005a5e8640 (LWP 708270) exited]\n    [Thread 0x7f005ade9640 (LWP 708269) exited]\n    [Thread 0x7f005d5ee640 (LWP 708268) exited]\n    [Inferior 1 (process 708267) exited normally]\n    The program being debugged exited while in a function called from GDB.\n    Evaluation of the expression containing the function\n    (syscall) will be abandoned.\n    (gdb) quit\n    \n    tty1$ echo $?\n    0",
      "syscall is only available if gdb is able to resolve libc. So for example this won\u2019t work to stop a process running in a container, since gdb won\u2019t be able to see the libc in the container\u2019s filesystem. I did make my own variant using gdb, though, nicely explained here: https://thomasw.dev/post/killbutmakeitlooklikeanaccident/",
      "Nice! Even better.",
      "I guess one goal of the experiment was understanding and learning how to do it by hand (in C) instead of relying on gdb.",
      "> However, what if the need arises to forcefully terminate a process, disguising it as a successful exit? ... Since the parent process would detect the non-zero exit code, there was a high likelihood of making things worse.I'm still trying to imagine what situation that is. I still cannot think about any real case where this is something you need.If there is, I guess this is a very rare case? As it was already commented, I guess just gdb then?But the technical details on how they do it are interesting nevertheless.",
      "One use case I have faced more than once are stuck processes in legacy build systems. For example, generating docs takes ages. Just killing the generator process will fail the build because the parent will notice. And since the build system is buggy/old, restarting the build will start from zero.",
      "Using gdb is probably easier."
    ],
    "link": "https://sigma-star.at/blog/2024/02/exit0-code-injection/",
    "first_paragraph": "On UNIX systems, terminating programs involves sending signals, such as SIGTERM or SIGKILL1, to the target process.\nSIGTERM allows a process to gracefully handle the termination signal, whereas SIGKILL abruptly ends the process.\nAfter termination, the parent process takes charge by reading the exit status and acting accordingly.\nAn exit code of 0 signifies success, whereas other codes denote failures, including termination by a signal or application errors."
  },
  {
    "title": "Hobby's algorithm for aesthetic B\u00e9zier splines (jakelow.com)",
    "points": 26,
    "submitter": "abetusk",
    "submit_time": "2024-05-02T20:31:19",
    "num_comments": 5,
    "comments_url": "https://news.ycombinator.com/item?id=40241057",
    "comments": [
      "In many tiled video games, roads, tracks and other paths tend to be designed without the knowledge on 2nd derivative continuity (or ignoring it for aesthetic reasons). So it would consist of straight segments, and rounded segments (and maybe some intersections). The rounded segments will be simply quarters of a circle. The problem with this is that while the path is continuous (no teleportation), and the velocity is continuous (no sudden direction change), the acceleration isn't continuous - there's no acceleration on the straight segments, and then suddenly there is acceleration on the rounded segment, and that acceleration, for an arc, is constant. In real life there's an easing added to the paths of e.g. railways, so that the sudden acceleration doesn't surprise passengers. In tiles you could also design the turns to be C\u00b2 continuous, but it  might be aesthetically displeasing by looking like being handdrawn rather than mathematically constructed.I'm saying all this, because it seems Hobby's algorithm is something designed precisely to construct splines that maximize this aesthetically pleasing C\u00b9 continuity... However it tends to explode splines by favoring arc connections, so I think some optimization is needed to limit that behavior: https://i.imgur.com/W9ssWTu.png",
      "Indeed. And this is where arc-length parameterization would help by linearizing t so you can then overlay it with various timing and easing functions.",
      "As the article mentions, the curves are unstable. This is delightfully apparent when you drag one control point in a circle around another. Interestingly, it can also make fairly sharp corners if the control points approach each other.",
      "Seems to me that a post about this algorithm really should have included a mention of Metafont.",
      "And also Asymptote, which extends to 3D."
    ],
    "link": "https://www.jakelow.com/blog/hobby-curves",
    "first_paragraph": "Hobby\u2019s algorithm is a technique for fitting a curve onto a sequence of points on the plane, such that it passes through all of the points in order. The resulting curves appear smooth and tend to form pleasant, relaxed shapes."
  },
  {
    "title": "TSMC Jumps into Silicon Photonics, Lays Out Roadmap for 12.8 Tbps Interconnect (anandtech.com)",
    "points": 51,
    "submitter": "PaulHoule",
    "submit_time": "2024-05-02T21:44:24",
    "num_comments": 6,
    "comments_url": "https://news.ycombinator.com/item?id=40241694",
    "comments": [],
    "link": "https://www.anandtech.com/show/21373/tsmc-adds-silicon-photonics-coupe-roadmap-128tbps-on-package",
    "first_paragraph": "Optical connectivity\u00a0\u2013 and especially silicon photonics\u00a0\u2013 is expected to become a crucial technology to enable connectivity for next-generation datacenters, particularly those designed HPC applications. With ever-increasing bandwidth requirements needed to keep up with (and keep scaling out) system performance, copper signaling alone won't be enough to keep up. To that end, several companies are developing silicon photonics solutions, including fab providers like TSMC, who this week outlined its 3D Optical Engine roadmap as part of its 2024 North American Technology Symposium, laying out its plan to bring up to 12.8 Tbps optical connectivity to TSMC-fabbed processors."
  },
  {
    "title": "Pleasure or pain? He maps the neural circuits that decide (quantamagazine.org)",
    "points": 37,
    "submitter": "chapulin",
    "submit_time": "2024-05-02T17:21:43",
    "num_comments": 16,
    "comments_url": "https://news.ycombinator.com/item?id=40238788",
    "comments": [
      "What a beautiful area of research.  Kudos to Pr Abdus-Saboor and his team.",
      "Is this an astroturf? the entire article seems SEOd too",
      "I agree, I plan to keep an eye on what they are doing.  Reading this article is triggering an impulse in me to begin some research on some tangent ideas. While the probability of following that urge is relatively low, the idea is going into my list.",
      "Is this seo? I dont care about the ENTIRE life story, just give me the recipe. Still dont know what he did.",
      "It\u2019s an interview which does cover what he\u2019s worked on and what he\u2019s working on now. I\u2019d recommend actually reading TFA but here\u2019s a sample of what he did:> In my final year as a postdoc, I genetically engineered mice to have gentle touch neurons that responded to blue light. My plan was to stimulate the neurons with blue light and see what the mice did.> When I started my own lab in 2018, we were ready to start those experiments. I still remember the day the students came into my office to show me what they had found. It was like this eureka moment. When we activated neurons through the skin on the mice\u2019s backs, the animals behaved as if they were being stroked there. That launched the whole project. We did a lot more behavioral tests and traced the pathway for social touch from the skin to the spinal cord to the reward centers in the brain.",
      "It sounds like you just dislike magazines. The entire point of a magazine is to spend more time and make an enjoyable read with a longer form article. Just because you prefer newspapers doesn't mean it makes sense to shit on magazines: some of us like magazines.",
      "Perhaps struck a string?",
      "This isn't a recipe.  It's an article about a human.  His story is the point.  His science is cool too, if you're actually interested in the science, it's super easy to find his publications.",
      "It's even worse that half the article is just massive, fullscreen pictures of this guy. I don't know how people \"read\" these rags.",
      "God forbid we gaze upon the visage of a scientist.  It must be horribly jarring to read a textbook and see pictures of Einstein and Curie..."
    ],
    "link": "https://www.quantamagazine.org/pleasure-or-pain-he-maps-the-neural-circuits-that-decide-20240416/",
    "first_paragraph": "April 16, 2024"
  }
]