[
  {
    "title": "Why I'm quitting the Washington Post (anntelnaes.substack.com)",
    "points": 19,
    "submitter": "danso",
    "submit_time": "2025-01-04T01:01:55 1735952515",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://anntelnaes.substack.com/p/why-im-quitting-the-washington-post",
    "first_paragraph": ""
  },
  {
    "title": "A path to O1 open source (arxiv.org)",
    "points": 103,
    "submitter": "bchelli",
    "submit_time": "2025-01-03T22:49:08 1735944548",
    "num_comments": 59,
    "comments_url": "https://news.ycombinator.com/item?id=42590322",
    "comments": [
      "From the first few paragraphs it doesn't pass the sniff test for me.\"Now AI has made everything more complex!\" \"AI is embedded in everything we do\"...Sounds like marketing gibberish and obfuscation, combined with self promotion.That's just my read at first sniff.\n \nreply",
      "> has claimed that the main techinique behinds o1 is the reinforcement learining.Typos in the first sentence of the paper doesn't give confidence that I am about to read something worthwhile.\n \nreply",
      "At least you know a person wrote it\n \nreply",
      "I don\u2019t think anyone who upvoted this has read more than one sentence of this paper.\n \nreply",
      "This paper has been available for a few weeks, and I wrote an article [1] exploring how to apply its inner workings to the design of multi-agent systems. If you can design \"reasoning\" at the model level, you can also design \"reasoning\" in larger, more complex systems using the same principles.https://melvintercan.com/p/lessons-from-reasoning-designing\n \nreply",
      "It\u2019s interesting even if not true or correct.You could also choose to enrich the discussion by elaborating on why you think this is worthless instead.\n \nreply",
      "Is it me or the first link on the site http://ability.openai is broken? Is openai a tld now?\n \nreply",
      "That seems, ironically, to be an AI proofreader mistake.The correct URL is https://cdn.openai.com/o1-system-card-20241205.pdf , at least according to https://arxiv.org/html/2412.14135v1 (which contains typos that OP's submissions doesn\u2019t).\n \nreply",
      "They should correct the name to closedai before they get the TLD, since there's an administrative cost to these TLDs.All of them are here though. No .openai. https://www.iana.org/domains/root/db.open is among the worst. :/> Purchasing a .open domain name isn't available to the general public. This particular extension is owned by American Express and currently isn't for sale or open to registration, limiting its use to only selected entities associated with American Express. It's primarily designed to serve the interests of the corporation and its customers' claims or needs.https://tld-list.com/tld/open - Who is able to buy a .open domain name?\n \nreply",
      ".open is as open as OpenAI so I guess it's a good fit :)\n \nreply"
    ],
    "link": "https://arxiv.org/abs/2412.14135",
    "first_paragraph": "The arXiv Privacy Policy has changed. By continuing to use arxiv.org, you are agreeing to the privacy policy.Help | Advanced SearcharXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.\narXiv Operational Status \n                    Get status notifications via\n                    email\n                    or slack\n"
  },
  {
    "title": "VoxelSpace: Terrain rendering algorithm in less than 20 lines of code (2020) (github.com/s-macke)",
    "points": 110,
    "submitter": "lnyan",
    "submit_time": "2025-01-03T20:01:29 1735934489",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=42588956",
    "comments": [
      "This is very neat. I miss the era when novel and elegant algorithms like this delivered magical experiences.This could just be from getting old, but I feel like games have lost the magic they had when availability of hardware resources was limited. Back in the 80s, 90s and early 2000s we saw games push the medium forward practically every year, and certainly every generation. Developers squeezed all the performance they could from the hardware, using novel techniques and pure wizardry. Hardware advancements certainly helped, but it was never in abundance as it is today, so developers couldn't get complacent. Necessity is indeed the mother of invention.These days I find fantasy platforms like the PICO-8 much more interesting than the latest rehashed release from any AAA studio. I don't understand how games that are essentially asset flips can be so successful year after year.\n \nreply",
      "That magic is still there, it's just overshadowed by capital. It's hard to find magic in a sea of marketing. Try Noita, it's quite fun.\n \nreply",
      "This is mostly rose colored 1/4\" thick welding goggles, I think. There are some mind-bendingly good moments in modern AAA video games. Sure there is some repeat sequelitus but there's original stuff too, and the tech definitely enables it.I can remember a lot of old really, really, really bad videos games too!\n \nreply",
      "I\u2019ll never forget my disappointment when I discovered that the higher resolution offered by a better GPU meant more display pixels, not more triangles.  I thought it would make all the models in Descent 3 smoother.  :)\n \nreply",
      "Every time I see a voxel landscape it reminds me of this:https://en.wikipedia.org/wiki/Comanche_(video_game_series)\n \nreply",
      "I just say mars.com (no, not a domain. A program. A video: https://www.youtube.com/watch?v=_zSjpIyMt0k)Edit: Pouet has it: https://www.pouet.net/prod.php?which=4662\n \nreply",
      "Also found a JavaScript implementation of this demo. Thanks for sharing it!\nhttp://web.archive.org/web/20140107070635/http://ppl-pilot.c...\n \nreply",
      "and to be clear mars.com ran /smoothly/ on an 8Mhz 286.\n \nreply",
      "Hey, I made a game using this technique herehttps://eri0o.itch.io/i-rented-a-boatIt's made in Adventure Game Studio. It was made in a previous version of the engine that we hadn't optimized yet and I was too lazy to update it on itch page (but will one day). I have a write up there explaining how I made it but there are more details in the AGS forums.\n \nreply",
      "Its a neat way to render, but I don't think it qualifies as voxel, it can't render arbitrary volumes, and the data storage can't contain more than a single position for a given x,y. It's just a neat implementation of a heightmap renderer no?\n \nreply"
    ],
    "link": "https://github.com/s-macke/VoxelSpace",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Terrain rendering algorithm in less than 20 lines of code\n      Let us go back to the year 1992. The CPUs were 1000 times slower than today and the acceleration via a GPU was unknown or unaffordable. 3D games were calculated exclusively on the CPU and the rendering engine rendered filled polygons with a single color.\nGame Gunship 2000 published by MicroProse in 1991It was during that year NovaLogic published the game Comanche.\nGame Comanche published by NovaLogic in 1992The graphics were breathtaking for the time being and in my opinion 3 years ahead of its time. You see many more details such as textures on mountains and valleys, and for the first time a neat shading and even shadows. Sure, it's pixelated, but all games in those years were pixelated.Comanche uses a technique called Voxel Space, which is based on the same ideas like"
  },
  {
    "title": "F-Droid Fake Signer PoC (github.com/obfusk)",
    "points": 57,
    "submitter": "pabs3",
    "submit_time": "2025-01-03T22:47:11 1735944431",
    "num_comments": 14,
    "comments_url": "https://news.ycombinator.com/item?id=42590307",
    "comments": [
      "While none of that applies to F-Droids primary use case (the primary F-Droid repo builds all apps from source itself), it nonetheless looks like they failed to correctly handle the issue.The only reason this didn't turn into a disaster was pure luck.\n \nreply",
      ">The only reason this didn't turn into a disaster was pure luck.Is it? Or is it a case of \"It rather involved being on the other side of this airtight hatchway\"[1]? The apk signature done by fdroidserver seems totally superfluous. Android is already going to verify the certificate if you try to update an app, and presumably whatever upload mechanism is already authenticated some other way (eg. api token or username/password), so it's unclear what the signature validation adds, aside from maybe preventing installation failures.[1] https://devblogs.microsoft.com/oldnewthing/20060508-22/?p=31...\n \nreply",
      "> Android is already going to verify the certificate..Will it if it's a non Google distro of Android?\n \nreply",
      "Yeah that's the big benefit of F-Droid, reproducible builds. It builds directly from github. I like that aspect of it a lot, it adds a lot of security that other app stores don't have.But yeah other repos don't :(\n \nreply",
      "Tangential, but:I often wonder how secure these open source projects actually are.  I'm curious about using Waydroid in SteamOS, but it looks like it only runs LineageOS (apparently a derivative of CyanogenMod).I know that people claim that open source is more secure because anyone can audit it, but I wonder how closely its security actually interrogated.  Seems like it could be a massive instance of the bystander effect.All of it gives me a bias towards using official sources from companies like Apple and Google, who presumably hire the talent and institute the processes to do things right.  And in any case, having years/decades of popularity is its own form of security.  You know anyone who cares has already taken shots at Android and iOS, and they're still standing.\n \nreply",
      "Google isn't gonna build a ROM for waydroid so someone's going to have to make a build of Android, whom you'll have to trust. Google doesn't build ROMs for anything but their own phones.LineageOS is popular in this field because in essence it's a derivative of AOSP (the Android project as shipped by Google) with modest modifications to support a crapload of devices, instead of the handful that AOSP supports. This makes it easier to build and easier to support new platforms.The bulk of the security in AOSP (and thus, LineageOS) comes from all the mitigations that are already built into the system by Google, and the bulk of the core system that goes unmodified. The biggest issue is usually the kernel, which may go unpatched when the manufacturer abandons it (just like the rest of the manufacturer's ROM), and porting all the kernel modifications to newer versions is often incredibly tricky.\n \nreply",
      "I think most of the Open Source projects are inadequate from security PoV but they are not at a place that can do harm.Android is extremely complex so I think many of the custom ROMs possibly have some security rookie mistakes and quite a bit security bugs due to mishmash of drivers. Android is still better than most of the Linux distros due to its architecture though. The default setup of many distros doesn't have much isolation if at all.\n \nreply",
      ">I know that people claim that open source is more secure because anyone can audit it, but I wonder how closely its security actually interrogated.The answer is that, no, nobody akshuarry audits anything. This has been proven time and time again, especially in the last few years.>All of it gives me a bias towards using official sources from companies like Apple and Google, who presumably hire the talent and institute the processes to do things right.What you get from commercial vendors is liability, you get to demand they take responsibility because you paid them cold hard cash. Free products have no such guarantees, you are your own liability.\n \nreply",
      "And we've seen time and time again how that liability \"harms\" them when they whoopsie daisy leak a bunch of data they shouldn't have gathered in the first place...\n \nreply",
      "Is it as bad as they're making it out to be? The fdroidserver get_first_signer_certificate can give a different result to apksigner, but then fdroidserver calls apksigner anyway for verification, and F-Droid mitigates the issue in various other ways.I think F-Droid were acting in the right up to that point; and then the latest update (regex newlines) is 0day? Has there been a response from F-Droid about the updates?\n \nreply"
    ],
    "link": "https://github.com/obfusk/fdroid-fakesigner-poc",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        F-Droid Fake Signer PoC\n      PoC for fdroidserver AllowedAPKSigningKeys certificate pinning bypass.Published: 2024-04-08; updated: 2024-04-14, 2024-04-20, 2024-12-30.We started looking into Android APK Signing Block oddities at the request of\nF-Droid [1] on 2021-08-25; we opened F-Droid issue \"APK Signing Block\nconsiderations\" [2] on 2022-10-19.  No action was taken as a result.We published the \"Android APK Signing Block Payload PoC\" [3] to the Reproducible\nBuilds mailing list [4] on 2023-01-31.But the Android APK Signature Scheme v2/v3 actually allows embedding arbitrary\ndata (or code) in the signing block, meaning that two APKs with the exact same\nvalid signature -- though not a bit-by-bit identical signing block -- can\nbehave differently.Jason Donenfeld reported \"Potential security hazard: apk_signer_fingerprint()\nlooks at certs"
  },
  {
    "title": "A marriage of solar energy and farming (ksjd.org)",
    "points": 13,
    "submitter": "dr_dshiv",
    "submit_time": "2025-01-04T00:13:13 1735949593",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.ksjd.org/2024-12-31/in-colorado-a-marriage-of-solar-energy-and-farming-provides-a-model-for-a-more-sustainable-future",
    "first_paragraph": ""
  },
  {
    "title": "SpaceSim (pavelsevecek.github.io)",
    "points": 240,
    "submitter": "Luc",
    "submit_time": "2025-01-03T17:05:17 1735923917",
    "num_comments": 33,
    "comments_url": "https://news.ycombinator.com/item?id=42587356",
    "comments": [
      "I just did this install, then went to remove and it attempted to remove `/usr/local/bin`\n \nreply",
      "Well, that's just one way to get \"space\" :)\n \nreply",
      "typing in 'rm' in any script I write scares the bejeebus out of me. I tend to write 'echo rm' so I get a chance to review while testing to catch this specific type of issue.\n \nreply",
      "Can use -i to confirm deletions also, to not have to edit and re-do the command. The downside is being asked for everything individually rather than confirming one (big) list, so not sure if this fits your use-case\n \nreply",
      "Installer and game work perfectly on Intel Integrated Graphics on Linux with Wine 9.22\n \nreply",
      "Note that it does build natively for Linux (and other platforms) from source, and the github page:https://github.com/pavelsevecek/OpenSPHincludes an old Debian package you can install (although for Debian 10, and doesn't work on recent Ubuntu/Mint installs either)...\n \nreply",
      "Are there any easy examples one can just run once installed?Or can anyone on HN give me any hints on a valid flow chart\n \nreply",
      "It would be fun if we could define planets with our own materials, like bananas (influenced by xkcd), diamonds or whatever other silly substance we like :-)\n \nreply",
      "Or chocolate (Terry Pratchett: Thief of time) IIRC\n \nreply",
      "Cf. https://spaceengine.org/\n \nreply"
    ],
    "link": "https://pavelsevecek.github.io/",
    "first_paragraph": "A new graphical application that uses the OpenSPH solver, but with a user interface that is more interactive, intuitive, and easy to use. This version is still under development.If you have any questions, ideas for what to change, or you notice a bug, come chat on the Discord server. You can support the development by becoming a \r\n\t\t\tPatron.OpenSPH is a library and graphical application used primarily for scientific simulations.\r\n\t\t\t\t\t\tSimulations are set up using a node-based editor that allows you to customize initial conditions\r\n\t\t\t\t\t\tand individual simulation steps.\r\n\t\t\t\t\t\tThese tutorials will help you get familiar with the environment of OpenSPH.SPH impact simulation \r\n                                with Dpb=428 km target, showing the origin of the Hygiea family.N-body simulation with soft-particle model.Self-gravitational reaccumulation and formation of rubble-pile asteroids, simulated using SPH.SPH simulation of a self-gravitating cloud of ideal gas.N-body simulation of two gal"
  },
  {
    "title": "What we learned copying all the best code assistants (val.town)",
    "points": 124,
    "submitter": "stevekrouse",
    "submit_time": "2025-01-03T14:45:52 1735915552",
    "num_comments": 32,
    "comments_url": "https://news.ycombinator.com/item?id=42586042",
    "comments": [
      "Windsurf + Haskell w/ CLI tools has been pretty amazing. Windsurf's agent will loop for minutes on its own to figure out the right structure of a program. You just need to tell it to:- use the hoogle cli to search for the right types and functions- include a comprehensive test suite- run a build after every code change- run tests after every successful buildGHC + a Claude-based agent is a thing to behold.\n \nreply",
      "What's the maximum file size for which this is useful in your experience? I have been refactoring some project solely to enable AI code editors to edit it. Some users in the discord suggest a maximum file size of 500LOC or small, which seems unreasonable.\n \nreply",
      "Woah, that sounds awesome! I'd love to see how you set that up and how much it can do without your intervention/approval for various actions. Might you have a video of your workflow that you could share?\n \nreply",
      "Sure, I'll record a little something with Loom for you tomorrow.\n \nreply",
      "fascinating, would love to see this as well when you do.\n \nreply",
      "It's really interesting seeing the progression here, integrating AI-assisted coding tools into something like Val Town is a great arena for exploring different patterns for this stuff.Worth checking out their Cerebras-powered demo too - LLMs at 2000 tokens/second make applying proposed changes absurdly interactive: https://cerebrascoder.com/\n \nreply",
      "> The biggest problem with all current codegen systems is the speed of generationI don't see this complained about nearly as much as I'd expect. Groq has been out for over a year, I'm surprised OpenAI not acquired them and figured out how to 10x to 20x their speed on gpt4.\n \nreply",
      "Yeah I don't agree. I'm building a product in the space, and the number one problem is correctness, not latency.People are very happy to sit there for minutes if the correctness is high and the quality is high. It's still 100x or 1000x faster than finding 3rd party developers to work for you.I wish the models were getting better but recently they've felt very stuck and this is it, so agent architectures will be the answer in the short term. That's what's working for us at srcbook rn.\n \nreply",
      "This post is the latest in a series about Townie, our AI assistant.Our first had a nice discussion on HN: https://blog.val.town/blog/codegen/The other posts in the series:- https://blog.val.town/blog/townie/- https://blog.val.town/blog/building-a-code-writing-robot/\n \nreply",
      "I'm interested in what stopped you from finishing diffs and diff based editing. I built an AI software engineering assistant at my last company and we got decent results with Aider's method (and prompts, and hidden conversation starter etc). I did have to have a fallback to raw output, and a way to ask it to try again. But for the most part it worked well and unlocked editing large files (and quickly).\n \nreply"
    ],
    "link": "https://blog.val.town/blog/fast-follow/",
    "first_paragraph": ""
  },
  {
    "title": "B-Trees: More Than I Thought I'd Want to Know (benjamincongdon.me)",
    "points": 31,
    "submitter": "hochmartinez",
    "submit_time": "2025-01-03T09:04:50 1735895090",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://benjamincongdon.me/blog/2021/08/17/B-Trees-More-Than-I-Thought-Id-Want-to-Know/",
    "first_paragraph": "Recently, I\u2019ve been reading through the excellent\nDatabase Internals\n(Alex Petrov, 2019). The first half of the book is dedicated to the\nimplementation of database storage engines \u2013 the subsystem(s) of a DBMS that\nhandles long-term persistence of data. A surprising amount of this section\ndiscusses the implementation and optimization of various B-Tree data structures.In my college Data Structures and Algorithms course, we covered B-Trees, but I\ndidn\u2019t grok why I\u2019d choose to use one. As presented, B-Trees were essentially\n\u201cbetter\u201d Binary Search Trees, with some hand-waving done that they had improved\nperformance when used in database applications. I remember needing to memorize a\nbunch of equations to determine the carrying capacity of a M-degree B-Tree, and\na vague understanding of B-Tree lookup/insertion/deletion, but not much else.\nWhich is a shame! They\u2019re interesting structures.I this was partially a failure of visualization, and partly a failure of\nproviding motivating examples. On"
  },
  {
    "title": "Yemeni Coffee Shops Are Everywhere in Texas: Alcohol-Free Spaces That Open Late (texasmonthly.com)",
    "points": 20,
    "submitter": "Geekette",
    "submit_time": "2025-01-03T11:11:39 1735902699",
    "num_comments": 12,
    "comments_url": "https://news.ycombinator.com/item?id=42584610",
    "comments": [
      "I'm definitely the target audience for alcohol-free spaces that open late - hopefully this makes its way to the PNW!\n \nreply",
      "Seattle is an 8 pm city. I'd love for anything to be open late here.\n \nreply",
      "There used to be late night coffee shops, and more late night restaurants.That mostly went away years ago, basically completely died in COVID, and the labor shortages in the service industry never eased up enough to maintain staffing at places that had late night hours. And I do mean not enough people; the housing shortage is so acute that service workers cannot find places to live.\n \nreply",
      "Ithaca used to have 24 hour businesses but since the pandemic and the 10x-ing of the homeless colony they are long gone.\n \nreply",
      "I've noticed this becoming popular, but funny enough they don't do decaf.\n \nreply",
      "I think decaf is a very \"American\" specific thing? Haven't really seen it in Asia or Middle East.\n \nreply",
      "Lots of places have decaf in Korea.\n \nreply",
      "Uncertain, but it might be useful for a coffee place open at night :)\n \nreply",
      "It's the only silver lining about the Yemeni Civil War. There is a fairly large Yemeni American population now due to displacement from the war.There's a fairly large community in SF in Tendernob near the Yemeni consulate and the Yemeni mosque.Highly recommend trying the Masoob and Mandi at Yemen Kitchen in Tenderloin.\n \nreply",
      "Dang. I kinda wish they had not done an article about them. Now they're going to  attract the racist mouth breathers. Armed racist mouth breathers. I guess you can't stick your head in the sand and wish they didn't exist, but I wish there was a way to make them not exist. Legally, that is.\n \nreply"
    ],
    "link": "https://www.texasmonthly.com/food/yemeni-coffee-shops-booming-in-texas/",
    "first_paragraph": ""
  },
  {
    "title": "Rust, Reflection and Access Rules (fractalfir.github.io)",
    "points": 23,
    "submitter": "misonic",
    "submit_time": "2025-01-02T00:48:57 1735778937",
    "num_comments": 14,
    "comments_url": "https://news.ycombinator.com/item?id=42570609",
    "comments": [
      "It seems a bit weird to me to dedicate all this space to talking about access to private fields and respecting field access rules, and not even suggest the idea that a reflection API should actually provide different levels of information depending on where you're invoking it from. Which is to say, if I'm writing code inside the module that defines a type, then I should be able to reflect on that type's private fields as my code can otherwise access those private fields. And if I'm writing code from outside the module then I shouldn't be able to reflect on those private fields.One way to accomplish this would be to have reflection add a private method to a reflectable type that returns a mirror that includes information on the private fields. This does require the capability to reflect to be opt-in (and I think this article is assuming that reflection is globally enabled on all types rather than being opt-in), but reflection could plausibly be done as something like  #[derive(Reflectable)]\n  struct Foo {\n      pub i: i32,\n      x: i32\n  }\n\nsuch that this expands to something like  struct Foo {\n      pub i: i32,\n      x: i32\n  }\n\n  impl Foo {\n    fn private_mirror() -> Mirror {\n      /* construct mirror for all fields */\n    }\n  }\n\n  impl Reflectable for Foo {\n    fn mirror() -> Mirror {\n      /* construct mirror for public fields */\n    }\n  }\n\nThis way code from within the module can call `private_mirror()` to get a mirror to pass to reflection APIs (and Mirror could implement Reflectable to return itself like how Iterator implements IntoIterator) in order to do things like implement serialization.\n \nreply",
      "If I learned right now that Rust had a reflection API then I\u2019d assume that it\u2019s fundamentally unsafe when it comes to handling non public fields. For exactly the reasons the article lists.I think the API with safe public reflection and unsafe private reflection is easy to motivate.The author doesn\u2019t really provide any reason why it\u2019s a bad idea other than \u201cpeople might abuse it\u201d. The SemVer argument I don\u2019t understand: the versioning is for the public API. Nobody promises that somelib 1.0.0 and 1.0.1 behave remotely the same if I peek behind the curtain.\n \nreply",
      "The SemVer argument is that a 1.0.0 to 1.0.1 bump shouldn't cause any downstream code to stop compiling. In this case this really just means that reflection shouldn't allow you to construct an instance of a type from its public fields if the type is annotated with #[non_exhaustive]. This is also an argument against even having an unsafe reflection API that allows access to private fields, because being able to construct an instance of a type from its private fields means depending on something that SemVer normally protects you from, and an API being unsafe isn't supposed to be an opt-out for SemVer.\n \nreply",
      "I didn\u2019t follow that argument, where would reflection be used here? Was the problem that if parentlib 1.0.0 used reflection on childlib 1.0.0 then potentially bumping childlib to 1.0.1 would cause it to completely break the functionality of parentlib?In that case yes, that\u2019s what I\u2019d expect would happen. And I\u2019d still think it\u2019s useful functionality.\n \nreply",
      "SemVer says that updating childlib from 1.0.0 to 1.0.1 cannot cause parentlib to stop compiling. If the update does cause dependents to stop compiling then this must be a major version update.Rust does have some subtle holes in its rules for SemVer here where there are changes you can make in a minor version that have the capability of breaking your caller (and this is sort of ignored by the logic that the caller could have been more explicit in how it called the method, either using Universal Function Call Syntax or, in the case of inferred types breaking, specified an explicit type, but this does still cause issues from time to time), but overall it tries hard to stick to this rule. So any official Reflection API needs to take SemVer into account. Being able to access private fields from outside the crate that defines the type is always going to be a really big SemVer issue as private fields otherwise do not affect the public API of a crate (only the presence or absence of private fields on a type matters to public API). Similarly, outside of the defining crate, reflection can't allow for the creation of a #[non_exhaustive] type from its public fields as the type may gain more fields in a non-breaking update.\n \nreply",
      "You should probably have access to all fields you would otherwise be able to see (eg pub crate or private within the same module)\n \nreply",
      "> Reflection interacts with the safety features of Rust in a somewhat counter-intuitive way. Those interactions force any reflection API to obey certain rules.I know enough Bevy and Rust to know that Bevy does have their own Reflection library (https://docs.rs/bevy_reflect/latest/bevy_reflect/), but I don't know the internals of it, anyone happens to know that who can compare it to what the author is ideaing about? As a Bevy user and library author, the Reflect API Bevy uses is simple enough at least.\n \nreply",
      "I get what the article is saying. I enjoy Rust, as I enjoy dabbling in other more esoteric programming languages, like Zig. But one thing I miss from the days of early programming is the hacker spirit, in a way. As it master, I should be able to force my machine into giving me access of private fields. I want to be able to poke holes in stuff, to break things and at times, I want the ability to do something stupid just because I want to see what would happen. I feel the same for overly strict compilers. The number one thing I hate about Zig is the compiler treating me like a child when I have unreferenced variables.Modern languages should enable what older languages couldn\u2018t. They shouldn\u2018t get in my way needlessly.\n \nreply",
      "unsafe is there when you need it, you can poke all the bytes and hack the planet as much as you want as soon as you acknowledge the language can't keep you safe anymore.\n \nreply",
      "No language since assembly enables new features that you could not have done in assembly.Languages are invented to enforce standard and build higher level abstraction aka disable feature.\n \nreply"
    ],
    "link": "https://fractalfir.github.io/generated_html/refl_priv.html",
    "first_paragraph": "Reflection is something a lot of people wish the Rust language had: It is not hard to stumble across somebody with an interesting use case for it.People want to use it for serialization, GCs, better interop, and so, so much more.If you can think of a task, there is somebody out there wishing they could implement it using reflection.Sadly, it does not look like it is coming any time soon.Still, silly things like \u201cthis feature does not exist yet\u201d can\u2019t stop us from talking about how it could or even must work.Reflection interacts with the safety features of Rust in a somewhat counter-intuitive way. Those interactions force any reflection API to obey certain rules.Those restrictions may seem obvious to people designing a reflection API, or to Rust experts, but they seem to be rarely mentioned.This article will try to explain those rules in simple, digestible terms. I will not only show how things have to work, but I will also explain why those requirements exist.Additionally, I will explo"
  },
  {
    "title": "Show HN: Execute SQL against Bluesky firehose (github.com/turbolytics)",
    "points": 53,
    "submitter": "dm03514",
    "submit_time": "2024-12-31T13:13:20 1735650800",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=42558496",
    "comments": [
      "Hello, I\u2019ve been working on a project that embeds duckdb for stream processing.I just added support for websocket sources which enables sql over the Bluesky firehouse.https://github.com/turbolytics/sql-flow?tab=readme-ov-file#c...Duckdb does all the sql execution, and python is responsible for sourcing the data.The project is still quite young and I\u2019m very much still experimenting, but I\u2019d love any feedback. Thank you.\n \nreply",
      "How do you position this relative to Flink SQL?\n \nreply"
    ],
    "link": "https://github.com/turbolytics/sql-flow",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        DuckDB for streaming data\n      SQLFlow enables SQL-based stream-processing, powered by DuckDB. SQLFlow embeds duckdb, supporting kafka stream processing logic using pure sql.SQLFlow executes SQL against streaming data, such as Kafka or webhooks. Think of SQLFlow as a way to run sql against a continuous stream of data. The data outputs can be shipped to sinks, such as Kafka.Docker is the easiest way to get started.The dev invoke command enables testing a SQLFlow pipeline configuration on a batch of test data. This enables fast feedback local development before launching a SQLFlow consumer that reads from kafka.The heart of SQLFlow is the pipeline configuration file. Each configuration file specifies:Every instance of SQLFlow needs a pipeline configuration file.SQLFlow supports DuckDB over websocket. Running SQL against the Bluesky f"
  },
  {
    "title": "Mandelbrot deep zoom theory and practice (2021) (mathr.co.uk)",
    "points": 125,
    "submitter": "fanf2",
    "submit_time": "2025-01-03T15:42:02 1735918922",
    "num_comments": 43,
    "comments_url": "https://news.ycombinator.com/item?id=42586590",
    "comments": [
      "Wonderful article on fractals and fractal zooming/rendering! I had never considered the inherent limitations and complications of maintaining accuracy when doing deep zooms. Some questions that came up for me while reading the article:1. What are the fundamental limits on how deeply a fractal can be accurately zoomed? What's the best way to understand and map this limit mathematically?2. Is it possible to renormalize a fractal (perhaps only \"well behaved\"/\"clean\" fractals like Mandelbrot) at an arbitrary level of zoom by deriving a new formula for the fractal at that level of zoom? (Intuition says No, well, maybe but with additional complexities/limitations; perhaps just pushing the problem around). (My experience with fractal math is limited.) I'll admit this is where I met my own limits of knowledge in the article as it discussed this as normalizing the mantissa, and the limit is that now you need to compute each pixel on CPU.3. If we assume that there are fundamental limits on zoom, mathematically speaking, then should we consider an alternative that looks perfect with no artifacts (though it would not be technically accurate) at arbitrarily deep levels of zoom? Is it in principle possible to have the mega-zoomed-in fractal appear flawless, or is it provable that at some level of zoom there is simply no way to render any coherent fractal or appearance of one?I always thought of fractals as a view into infinity from the 2D plane (indeed the term \"fractal\" is meant to convey a fractional dimension above 2). But, I never considered our limits as sentient beings with physical computers that would never be able to fully explore a fractal, thus it is only an infinity in idea, and not in reality, to us.\n \nreply",
      "> What are the fundamental limits on how deeply a fractal can be accurately zoomed?This question is causing all sorts of confusion.There is no fundamental limit on how much detail a fractal contains, but if you want to render it, there's always going to be a practical limit on how far it can accurately be zoomed.Our current computers kinda struggle with hexadecuple precision floats (512-bit).\n \nreply",
      "1. No limit. But you need to find an interesting point, the information is encoded in the numerous digits of this (x,y) point for Mandelbrot. Otherwise you\u2019ll end up in a flat space at some point when zooming2. Renormalization to do what ? In the case of Mandelbrot you can use a neighbor point to create the Julia of it and have similar patterns in a more predictable way3. You can compute the perfect version but it takes more time, this article discusses optimizations and shortcuts\n \nreply",
      "1. There must be a limit; there are only around 10^80 atoms in our universe, so even a universe-sized supercomputer could not calculate an arbitrarily deep zoom that required 10^81 bits of precision. Right?2. Renormalization just \"moves the problem around\" since you lose precision when you recalculate the image algorithm at a specific zoom level. This would create discrepancies as you zoom in and out.3. You cannot; because of the fundamental limits on computing power. I think you cannot compute a mathematically accurate and perfect Mandelbrot set at an arbitrarily high level of zoom, say 10^81, because we don't have enough compute or memory available to have the required precision\n \nreply",
      "1. You asked about the fundamental limits, not the practical limits. Obviously practically you're limited by how much memory you have and how much time you're willing to let the computer run to draw the fractal.\n \nreply",
      "> could not calculate an arbitrarily deep zoom that required 10^81 bits of precision. Right?I\u2019m here to nitpick.Number of bits is not strictly 1:1 to number of particles. I would propose to use distances between particles to encode information.\n \nreply",
      "... and how would you decode that information? Heisenberg sends his regards.EDIT: ... and of course the point isn't that it's 1:1 wrt. bits and atoms, but I think the point was that there is obviously some maximum information density -- too much information in \"one place\" leads to a black hole.\n \nreply",
      "1. Mandelbrot is infinite. The number pi is infinite too and contains more information than the universe2. I dont know what you mean or look for with normalization so I can\u2019t answer more3. It depends on what you mean by computing Mandelbrot. We are always making approximations for visualisation by humans, that\u2019s what we\u2019re talking about here. If you mean we will never discover more digits in pi than there is atoms in the universe then yes I agree but that\u2019s a different problem\n \nreply",
      "We can create enough compute and SRAM memory for a few hundred million dollars. If we apply science there are virtually no limits within in a few years.See my other post in this discussion.\n \nreply",
      "In the case of Mandelbrot, there is a self similar renormalization process, so you can obtain such a formula. For the \"fixed points\" of the renormalization process, the formula is super simple; for other points, you might need more computations, but it's nevertheless an efficient method. There is a paper of Bartholdi where he explains this in terms of automata.\n \nreply"
    ],
    "link": "https://mathr.co.uk/blog/2021-05-14_deep_zoom_theory_and_practice.html",
    "first_paragraph": "The complex beauty of the world's most famous fractal, the Mandelbrot set,\nemerges from the repeated iteration of a simple formula:Zooming into the intricate boundary of the shape reveals ever more detail,\nbut one needs higher precision numbers and higher iteration counts as you\ngo deeper.  The computational cost rises quickly with the classical\nrendering algorithms which use high precision numbers for each pixel.In 2013, K.I. Martin's SuperFractalThing and accompanying white paper\nsft_maths.pdf\npopularized a pair of new acceleration techniques.  First one notes that\nthe formula \\(z \\to z^2 + c\\) is continuous, so nearby points remain\nnearby under iteration.  This means you can iterate one point at high\nprecision (the reference orbit) and compute differences from the reference\norbit for each pixel in low precision (the perturbed orbits).  Secondly,\niterating the perturbed formula one ends up with a polynomial series in\nthe initial pertubation in \\(c\\), which depends only on the referen"
  },
  {
    "title": "Extend (YC W23) is hiring engineers to build LLM document processing (ashbyhq.com)",
    "points": 0,
    "submitter": "",
    "submit_time": "2025-01-03T21:01:16 1735938076",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://jobs.ashbyhq.com/extend/9d4d8974-bd9b-432d-84ec-8268e5a8ed37",
    "first_paragraph": ""
  },
  {
    "title": "Show HN: A remake of my 2004 PDA video game (nicollet.net)",
    "points": 62,
    "submitter": "victorNicollet",
    "submit_time": "2024-12-31T10:55:56 1735642556",
    "num_comments": 10,
    "comments_url": "https://news.ycombinator.com/item?id=42557920",
    "comments": [
      "This is pretty fun! There's an annoying issue when playing from mobile safari on iOS where the canvas scrolls along with your finger. I think there's an HTML directive that can probably fix that but the name escapes me at this time.\n \nreply",
      "Cool (and intense!) game :) Pretty impressive you had something like that running on a PDA 20 years ago, I was probably playing J2ME games on a Sony Ericsson at that point so don't know the performance of those.This constraint + your solution was pretty interesting:>  Only use technologies that can be expected to still be present (and backwards-compatible) 20 years from now.I'd bet on that in 20 years TypeScript will no longer be maintained and also no longer be the most popular transpilation source language for JavaScript. Seems the JavaScript ecosystem always eventually finds a new \"source\" language even though everyone at the time is certain it won't happen with this current one.Probably still wouldn't be hard to get the game running though, will still be easy to install old TypeScript compiler and run it.\n \nreply",
      "Congratulations, looks great, and feels addicting. I wonder if keeping ship offset from touch point was intentional game design choice?And regarding testing on Safari, if you have access to any Linux distribution, you can try testing on GNOME Web, it uses WebKit, same rendering engine as Safari (with probably some minor differences).Finally, you should put this game up on itch.io, as I am sure some players might like to leave some monetary support.\n \nreply",
      "Very cool! I'm actually curious to learn more about how the bin conversion works. The pack files are pretty interesting!\n \nreply",
      "Great stuff! Amazing that playing a game written in 2004 which follows the style of games written in 1994 feels current in 2025 just because it runs in my web browser. But nonetheless it did feel modern and it was also really good fun.\n \nreply",
      "I didn't understand how the pick-up system worked nor how to trigger the progress bar once it filled up. But I made it to the end on Normal with 3.7 million points.Nice work. Loved these sorts of games as a kid.\n \nreply",
      "Congrats!. Curious if you tried to run your game in C++ of 2024. What kind of improvements did you see (speed, performance, etc..) compared to doing it in 2004.\n \nreply",
      "Sadly I could no longer build the C++ version of the game because of some missing proprietary dependencies, but I don't expect there would have been noticeable improvements: it was already running at 60FPS on computers from the time, even in PocketPC emulation mode.\n \nreply",
      "It works fine in Opera on an old Android tablet.\n \nreply",
      "Maybe by 2045 AI will be sufficiently advanced to simply say \"make this old game run on my new PC\", and the AI will read through every line of code, pixel of textures, and make a faithful playable reproduction in seconds.If that's the case, it really doesn't matter what technologies you use.\n \nreply"
    ],
    "link": "https://nicollet.net/blog/darklaga/remake.html",
    "first_paragraph": "\n      This article is a technical discussion of how the 2024 remake was built. You can play the game online, or read an older article about the 2004 version.\n    \n      In 2022, I found an archive DVD with the C++ source code, sprites, sounds and music of my 2004 video game Darklaga Cannonball Symphony. It could no longer be built (due to missing proprietary dependencies), so I decided to re-implement it as a late evening hobby project. As an additional challenge to porting a game I wrote when I was 20 years younger, I decided on two additional constraints: \n    \n      The complete source code of the remake can be found in this GitHub repository, and can be played online here.\n    \n      The remake is a web page that runs directly in the browser. It consists of a single HTML page darklaga.html which downloads a single binary blob darklaga.bin containing the JavaScript code, the sprites and the sounds. \n    \n      Only two permissions are requested:\n    \n      Both are non-essential (t"
  },
  {
    "title": "Why Canada Should Join the EU (economist.com)",
    "points": 145,
    "submitter": "gpi",
    "submit_time": "2025-01-03T07:07:14 1735888034",
    "num_comments": 335,
    "comments_url": "https://news.ycombinator.com/item?id=42583297",
    "comments": [
      "http://archive.today/7ZsY3",
      "> Europeans could learn from Canada how to allow immigration in a fashion that the population embraces rather than toleratesClearly the author is ignorant. Canadians are sick of immigration. Young Canadians doubly so. Racism is becoming more acceptable by the day.\n \nreply",
      "You're right. I don't live in Canada anymore, but even my moderate and liberal friends in Canada regularly complain about immigrants. That sentiment feels very new to me, though. I think Canada did have a positive view of immigrants for a long time.\n \nreply",
      "In Canada, one cannot lump all immigrants together even those from the same part of the world.  Canada used to be pretty strict on immigration only allowing highly skilled individuals from all over the world.  But in the last decade this has changed to just importing as many bodies as possible.  I won't go into the reasons for this change but it has dramatically altered the character of the country in this time.We have essentially imported an entire massive underclass to run all our fast food restaurants and other such jobs.\n \nreply",
      "Canada is in a demographic crisis: The birthrate is too low, the population is aging and the country can\u2019t afford to provide people with all of the social benefits AND have no laborers paying in to the benefit system. Importing lots of young labor rebalances the demographics and bolsters funding of benefits, at the expense of a housing crisis and social tensions. The alternative is to deeply cut benefits, which is political suicide for any party that dares to try.\n \nreply",
      "How is this largely under-educated, low-skill workforce working menial/minimum wage jobs going to rescue the entitlements system? Canada's Southern neighbor has a similar issue: despite what may be morally correct, it's been a net negative for taxpayers, and the US doesn't have near the number of expensive social programs.\n \nreply",
      "> it\u2019s been a net negative for taxpayersThis analysis[1] from the Cato Institute found the opposite: \u201cimmigrants pay more in taxes than they consume in benefits\u201d.[1] https://www.cato.org/blog/fiscal-impact-immigration-united-s...",
      "Canada could have imported as many young educated people as it wanted from Eastern European countries, Russia, former USSR members etc. What happens in reality is they can't get enough points due to some truly moronic rules. Yet somehow we mostly have people from other parts of the world whose main specialty is food delivery.",
      "I don't think we have that much of demographic crisis.  First of all, the aging population is the one with all the wealth.  And secondly, as Boomers, they are a very large generation but will soon be dying off.  But more to point, this is nothing new.  We have always had immigration to offset low birth rate.I'm more inclined to believe that the recent importing people en masse has benefited a few large employers of low skilled workers, continue to increase the cost of real-estate which has become more than 50% of our GDP, and artificially pumped up the GDP purely through population increases.  Canada might have better off if it wasn't mostly unaffected by the 2008 financial crisis; instead we have been kicking that can down the road for almost two decades.Canada probably shouldn't have gotten itself into this mess but it's easy to see how it happened and also why it's so hard to change course.\n \nreply",
      ">Importing lots of young laborEverything old is new again, in this case slavery.What century is this, the 17th? I thought we graduated from hauling tons of slaves across oceans.\n \nreply"
    ],
    "link": "https://www.economist.com/europe/2025/01/02/why-canada-should-join-the-eu",
    "first_paragraph": ""
  },
  {
    "title": "Swc4j: SWC for Java (github.com/caoccao)",
    "points": 6,
    "submitter": "stefankuehnel",
    "submit_time": "2025-01-03T23:52:00 1735948320",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://github.com/caoccao/swc4j",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        swc4j (SWC for Java) is an ultra-fast JavaScript and TypeScript compilation and bundling tool on JVM.\n       swc4j (SWC for Java) is an ultra-fast JavaScript and TypeScript compilation and bundling tool on JVM. It is part of the Javet portfolio serving the processing of JavaScript and TypeScript code before the code is executed in Node.js or V8 on JVM.APACHE LICENSE, VERSION 2.0\n        swc4j (SWC for Java) is an ultra-fast JavaScript and TypeScript compilation and bundling tool on JVM.\n      "
  },
  {
    "title": "Show HN: Org-Supertag (github.com/yibie)",
    "points": 77,
    "submitter": "oliverchan2024",
    "submit_time": "2024-12-31T11:44:14 1735645454",
    "num_comments": 42,
    "comments_url": "https://news.ycombinator.com/item?id=42558143",
    "comments": [
      "Looks like pretty much the same idea around Org-Roam, which is already well established set of packages. There already exists a vibrant community with things that extend Org-Roam itself. Not sure how this would be any better than that, yet I cheer and appreciate any interesting ideas on that front.Also, briefly checked https://tana.inc - which inspired the package, chuckled at: \"The world's most powerful notes\", and got the same question: \"How is it more 'powerful' than Logseq, Obsidian, Org-Roam?\"\n \nreply",
      "Is org-roam still alive?  Last release almost 3 years ago.  Could be because it's nearly perfect, which, if so, great.\n \nreply",
      "Org mode is something in emacs, for the rest of us who don't have that context.\n \nreply",
      "Org-mode is not just 'something', it's a powerful Emacs extension that transforms plain text documents into dynamic, interactive, and organized systems for notes, to-do lists, and project management, while seamlessly integrating code execution across multiple programming languages with data flow between embedded computational blocks.Practical example? You can be annotating a PDF, while having executable code blocks in different languages, e.g., you can run http or sql query, then pass the results into a python, javascript or shell scripting block, and then output the final result into a diagram. So, you'd be reading the book, taking notes and mess around with practical code snippets at the same time.I have tried so many different note-taking apps, philosophies and techniques over the years. Nothing even comes close to what I can do today in Org-mode. It totally shatters everything else and kicks the shit out of the ballpark.\n \nreply",
      "Hey I'm a long term emacs/org mode user.  This look super interesting, one quick suggestion, even though I'm confident I can make the installation instructions work, a lot of people just install packages from melpa, i.e. list-packages, cntl-s to find in melpa and then install.  I know there's a lot of advantages to some other methods, but people pick and choose where they want to learn the new way or stick with old tried and true way.  Again at first glance it looks super interesting.\n \nreply",
      "Thank you for your appreciation and suggestions. I\u2019m not quite sure how to publish it to MELPA, but I\u2019ll figure it out as soon as possible.\n \nreply",
      "The description is pretty abstract. What concrete problem does this package solve? Some example uses would be helpful.\n \nreply",
      "You're right, I'm working on it.\n \nreply",
      "The Tana super tag concept is pretty neat.I prefer these outlined based notes tools ( org mode, roam, Tana ) over the document based ones (Obsidian, etc) or db ones ( notion ).It feels like a personal taste thing. I naturally think in lists and to-dos.\n \nreply",
      "I like outliers too! I think the best opensource option, besides emacs, is logseq which is now developing a tag concept very close to Tana's supertag: https://test.logseq.com/They are looking for a name for the concept, so suggestions are welcome!\n \nreply"
    ],
    "link": "https://github.com/yibie/org-supertag",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Enhance org-mode tag system, borrow idea from tana.\n      \u4e2d\u6587\u7248\u8bf4\u660eOrg-supertag is a package that enhances org-mode\u2019s tag functionality. It empowers tags to not only assign attributes to nodes but also directly manipulate them, enabling more flexible knowledge management.Org-supertag adopts a non-intrusive design, coexisting harmoniously with org-mode\u2019s original features while providing more possibilities.Traditional linear note-taking systems have limitations:Tag systems provide a higher-dimensional organization method:This organization method not only makes knowledge easier to retrieve and reuse but, more importantly, can stimulate connections between knowledge points, creating a compound effect. Tags, as a metadata management tool, have applications far beyond knowledge management.Here\u2019s my concept diagram:A node is an abstract infor"
  },
  {
    "title": "Oral history of Caroline Rose, writer of Inside Macintosh (2023) [video] (youtube.com)",
    "points": 36,
    "submitter": "msephton",
    "submit_time": "2025-01-03T13:08:08 1735909688",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=42585332",
    "comments": [
      "Be sure to check out her stories on Folkore.org:https://www.folklore.org/0-index.html?author=Caroline+Roseand esp.:https://www.folklore.org/Inside_Macintosh.html\n \nreply",
      "Ah, remembering the phone-book Inside Mac volumes! Those were the days.(Kids these days with StackExchange and Copilot have no idea.... now get off my lawn!)\n \nreply",
      "Ah, yes. Back in the '90s I'd visit Wordsworths in Harvard Square every few weeks to pick up the latest volume of Apple developer documentation. Great bookstore, great books. (Didn't use most of them, but it definitely made me feel hip in an Apple-centric way.)\n \nreply",
      "The Computer History Museum's long form interviews are a wonderful resource.\n \nreply"
    ],
    "link": "https://www.youtube.com/watch?v=RikO_3jedlY",
    "first_paragraph": ""
  },
  {
    "title": "The Evolution of SRE at Google (usenix.org)",
    "points": 134,
    "submitter": "r4um",
    "submit_time": "2025-01-03T11:38:49 1735904329",
    "num_comments": 72,
    "comments_url": "https://news.ycombinator.com/item?id=42584750",
    "comments": [
      "This reminds me very much of Sidney Dekker's work, particularly The Field Guide to Understanding Human Failure, and Drift Into Failure.The former focuses on evaluating the system as a whole, and identifying the state of mind of the participants of the accidents and evaluating what led them to believe that they were making the correct decisions, with the understanding that nobody wants to crash a plane.The latter book talks more about how multiple seemingly independent changes to complex loosely coupled systems can introduce gaps in safety coverage that aren't immediately obvious, and how those things could be avoided.I think the CAST approach looks appealing. It seems as though it does require a lot of analysis of failures and near-misses to be best utilized, and the hardest part of implementing it will undoubtably be the people, who often take the \"there wasn't a failure, why should we spend time and energy investigating a success\" mindset.\n \nreply",
      "Yes you're 100% right. Dekker is a valuable complement to CAST & STAMP because Dekker emphasizes people aspects of psychology, goals, beliefs, etc., while CAST emphasizes engineering aspects of processes, practices, metrics, etc.CAST describes how to pragmatically bring together the people aspects and the engineering aspects, by having stakeholders write a short explicit safety philosophy:https://github.com/joelparkerhenderson/safety-philosophy\n \nreply",
      "The article describes Causal Analysis based on Systems Theory (CAST) which is akin to many-factor root cause analysis.I am a big fan of CAST for software teams, and of MIT Prof. Nancy Leveson who leads CAST.My CAST summary notes for tech teams:https://github.com/joelparkerhenderson/causal-analysis-based...MIT CAST Handbook:http://sunnyday.mit.edu/CAST-Handbook.pdf\n \nreply",
      "I was listening to a Titus Winters podcast, and I\u2019m not sure he exactly put it like this, but I took it away as:There are two problems with automated testing. 1) tests take too long to run 2) difficult to root cause breakages.Most devs solve this with making unit tests ever more granular with heavy use of mocks/fakes. This  \u201csolves\u201d both problems in a narrow sense: the tests run faster and are obvious to root cause breakages.But you didn\u2019t actually solve the problem. Since the entire point of writing tests in the first place was to answer the question: \u201cdoes my system work\u201d? Granular and mocked unit tests don\u2019t help much.However, going back to the original question, we can actually reframe the problems as: 1) a work scheduling problem and 2) a signal processing problem.Those are pretty well understood problems with good solutions. It\u2019s just that this is a somewhat novel way of thinking of tests, so it hasn\u2019t really been integrated into the open source tool chain.You could imagine integration tests automatically be correlated to a micro service release. Some CI automation constantly running expensive tests over a range of commits and automatically bisecting on failure. Etc.Put another way, automated tests don\u2019t go far enough. We need yet another higher layer of abstraction. Computers are better at deciding what tests to run and when, and are also better at interpreting the results.\n \nreply",
      "> Put another way, automated tests don\u2019t go far enough. We need yet another higher layer of abstraction. Computers are better at deciding what tests to run and when, and are also better at interpreting the results.Sounds like you might be interested in https://antithesis.com/ (no affiliation).\n \nreply",
      "Are there any resources to show how to apply this in practice? This is too theoretical to grok for me, there are too many terms. It seems too time-consuming to understand (and to perform IMO)\n \nreply",
      "> This is too theoretical to grok for meHere's a fast, easy, practical way to think about CAST:1. Causal: Novices may believe accidents are due to one \"root cause\" or a few \"probable causes\", but it turns out that accidents are actually due to many interacting causes.2. Analysis: Novices may blame people, but it's smarter to do blame-free examination of why the loss occurred, and how it occurred i.e. \"ask why and how, not who\".3. Systems: Novices may fix just one thing that broke, but it turns out it's better to discover multiple causes, then plan multiple ways to improve the whole system.\n \nreply",
      "I think the single biggest thing about Google SREs (at least in the early years) was that if your team was going to launch a new product, you had to have an SRE to help and to maintain the service.Google deliberately limited the amount of SREs, so you had to prove your stuff worked and sell it to the SRE to even get a chance to launch.Constraints help to make good ideas better...\n \nreply",
      "This culture was, imo, directly responsible for google's failure to launch a facebook competitor early enough for it to matter.The Orkut project was basically banned from being launched or marketed as an official google product because it was deemed \"not production ready\" by SRE. Despite that it gained huge market share in Brazil and a few other countries before eventually losing to FB. By the time their \"production ready\" product (G+) launched it was hilariously late.Facebook probably would have won anyway, but who knows what might have happened if Google had actually leaned into this very successful project instead of treating it like an unwanted step-child.\n \nreply",
      "It's not good when you have an SRE on hand to act as a babysitter of sorts. That is how some companies use SREs these days. They do the toil and sysadmin work so the product engineers can focus on features. Exactly what we hoped to avoid, but here we are.\n \nreply"
    ],
    "link": "https://www.usenix.org/publications/loginonline/evolution-sre-google",
    "first_paragraph": "Billions of people around the world use Google\u2019s products every day, and they count on those products to work reliably. Behind the scenes, Google\u2019s services\u00a0 have increased dramatically in scale over the last 25 years \u2014 and failures have become rarer even as the scale has grown. Google\u2019s SRE team has pioneered methods to keep failures rare by engineering reliability into every part of the stack. SREs have scaled up methods that have gotten us very far\u2014Service Level Objectives (SLOs), error budgets, isolation strategies, thorough postmortems, progressive rollouts, and other techniques. In the face of increasing system complexity and emerging challenges, we at Google are always asking ourselves: what's next? How can we continue to push the boundaries of reliability and safety?To address these challenges, Google SRE has embraced systems theory and control theory. We have adopted the STAMP (System-Theoretic Accident Model and Processes) framework, developed by Professor Nancy Leveson at MI"
  },
  {
    "title": "Show HN: Dimity Jones in Puzzle Castle: An Electronic Escape Novel (obnakwa.itch.io)",
    "points": 21,
    "submitter": "larryboyko",
    "submit_time": "2025-01-02T00:17:52 1735777072",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=42570429",
    "comments": [
      "It does look pretty cool, even though I'm not a massive puzzle-fan. The writing style is lively and the snippets shown do seem to draw you in.You mention that it was left unfinished - did you finish it or is it still unfinished?\n \nreply",
      "I believe I'd call it finished now; hopefully Christine would agree. :)\n \nreply",
      "I've been playing with this off and on since the previous post, and it's such a cool idea. Thank you for sharing it.Are there any differences between the previous version on github and this version on itch.io?\n \nreply"
    ],
    "link": "https://obnakwa.itch.io/dimityjones",
    "first_paragraph": "A downloadable escape novelDimity Jones in Puzzle Castle is in the form of a\u00a0single text file, of which only the\u00a0first chapter is readable. Subsequent chapters\u00a0must be deciphered by you, using the answers to puzzles that you must solve!With eighty-nine conundrums to crack and\u00a0ciphers to decode, this 110,000-word novel is unlike any other, offering\u00a0dozens of hours of delight, befuddlement, and heart-pounding adventure to readers of all ages who love puzzles, programming, and poetry ... or at least poet-villains.\"Thank you so much for this. It's an amazing work, both technically and artistically, and I'm having a wonderful time working through it.\"\"This has been a unique and amazing experience on many different levels, I am very grateful to you for creating it.\"\"It's original and fun, Interactive Fiction meets Advent of Code.\"\"I have been somewhat nerd-sniped by this.\"\"I've been having a lot of fun solving the Puzzle Castle, even if it's been nerd-sniping me from work.\"\"Thanks so much fo"
  }
]