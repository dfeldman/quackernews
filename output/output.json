[
  {
    "title": "Immersive Math (immersivemath.com)",
    "points": 403,
    "submitter": "oumua_don17",
    "submit_time": "2024-05-11T17:16:08",
    "num_comments": 34,
    "comments_url": "https://news.ycombinator.com/item?id=40329388",
    "comments": [
      "Very cool!Does anyone have a list of other similar texts?There's:- Geometry: Joyce's Java version of Euclid's _Elements_: https://mathcs.clarku.edu/~djoyce/java/elements/elements.htm...- Physics: https://www.motionmountain.net/- Chemistry: The Elements by Theodore Gray https://apps.apple.com/us/app/the-elements-by-theodore-gray/...A nifty thing my kids enjoyed was the website version of the book, _Bembo's Zoo_ (which sadly is no longer on-line: https://soundeffects.fandom.com/wiki/Bembo%27s_Zoo_(Websites... )",
      "https://schoolyourself.org/ \nwith  different ideas abouthttps://www.youtube.com/watch?v=4cQIbZa7P80 Computer-Assisted Instructionhttp://dmentrard.free.fr/GEOGEBRA/Maths/export4.25/golf.html\nsome people manage to create some applets in geogebrahttps://xenaproject.wordpress.com/2022/07/29/teaching-formal...\na way to teach theorem provingmaybe I'll remember something else and add it here",
      "https://explorabl.es/https://github.com/blob42/awesome-explorables",
      "Thank God people are moving towards this modality. I have a fervent hatred for textbooks and publishers. The former are antiquated, static, badly formatted, and often ride with distracting garbage in the margin, or worse inline. It makes actually reading them far more difficult than needs be, with unremarkable asides that may span pages and that are easy to get pulled into. While I understand that they have a purpose, they aren't for everyone so having a platform with the dynamism of a webpage is something that I hope will inevitably lend itself to future development along this course. Not to mention being able to have interactive questions that give quick feedback rather than requiring turning through pages to find out if you're on the right track... And this interactive stuff is just an excellent means to drive meaning from terse and difficult to explain systems.Cheers to the folks that put this together, a thousand thanks for the travails you've been through to blaze these trails!",
      "My undergrad math professor created one of the first fully online linear algebra texts: http://linear.ups.edu/html/fcla.html It's integrated with Sage, a Python library for studying (among other things) number theory. Another prof at the same university also wrote his own linear book, using a lot more illustrations, but as a traditional textbook.I see this book as a solid evolution in both directions. Nicely done!",
      "I hope that this sets a standard for future textbooks/publications. I haven\u2019t been able to grasp several concepts in math unless I was able to properly visualize it, which most modern textbooks do with a terribly compressed and unsaturated JPG.",
      "Previous posts on HN:1) 2015 (78 comments):https://news.ycombinator.com/item?id=101837252) 2019 (140 comments):https://news.ycombinator.com/item?id=19264048",
      "The web site says math, but it seems to be only about linear algebra.",
      "Which \"subject\" would you normally ascribe linear algebra to?It looks like this is a first module within the Immersive math system.  No doubt there will be more.Why not look at what is presented rather than what is not?",
      "Jeez! Are you for real?Talking about math, and such upside-down logic. Math and logic are closely related, you (don't) know.>Which \"subject\" would you normally ascribe linear algebra to?Snide. Math, obviously. Did anything I said earlier make you think differently? Look more closely at what I wrote in my earlier comment.I have a degree in math, boyyyy. ;)I wonder what your degree and education are in, if any, at all. Probably not in math or logic, or any hard science, considering the obvious and blatant contradiction between your second and third sentences above:>It looks like this is a first module within the Immersive math system. No doubt there will be more.What makes you have no doubt about something that is in the future, or may not even happen? Ha ha ha.>Why not look at what is presented rather than what is not?\"It looks\" and \"no doubt\" versus \"what is not\"!>Why not look at what is presented rather than what is not?That is just what I did in my earlier comment. In other words, I wrote based on exactly and only what was presented (linear algebra in the content, and math in the website title), rather than what is not - to use your own words.>"
    ],
    "link": "http://immersivemath.com/ila/index.html",
    "first_paragraph": "by J. Str\u00f6m, K. \u00c5str\u00f6m, and T. Akenine-M\u00f6ller\n\nv1.1. ISBN: 978-91-637-9354-7"
  },
  {
    "title": "Vision Transformers Need Registers (openreview.net)",
    "points": 88,
    "submitter": "cscurmudgeon",
    "submit_time": "2024-05-11T18:08:18",
    "num_comments": 13,
    "comments_url": "https://news.ycombinator.com/item?id=40329675",
    "comments": [
      "According to the paper, the \"registers\" are additional learnable tokens that are appended to the input sequence of a Vision Transformer model during training.They are added after the patch embedding layer, with a learnable value, similar to the [CLS] token and then at the end of the Vision Transformer, the register tokens are discarded, and only the [CLS] token and patch tokens are used as image representations.The register tokens provide a place for the model to store, process and retrieve global information during the forward pass, without repurposing patch tokens for this role.Adding register tokens removes the artifacts and high-norm \"outlier\" tokens that otherwise appear in the feature maps of trained Vision Transformer models.Using register tokens leads to smoother feature maps, improved performance on dense prediction tasks, and enables better unsupervised object discovery compared to the same models trained without the additional register tokens.This is a neat result. For just a 2% increase in inference cost, you can significantly improve ViT model performance. Close to a free lunch.",
      "This all token business is very shady, and the whole probability theory. You add token here and there and magic happens. Discreet math people can not take this lightly. Stochastic regexes is one thing, but this on a completely different level of mathematical debauchery.Absolutely amazing this works.",
      "Vision transformers are essentially just JPEG but with learned features rather than the Fourier transform.",
      "The modern Alchemy.",
      "There was an attempt to add several CLS tokens to BERT, with less spectacular results: https://arxiv.org/pdf/2210.05043",
      "So is that what all the visual cues are in real life, things like fashion accessories, uniforms etc.?",
      "are there lessons here for regular (non vision) transformers? sounds close to attention sinks/pause tokens?",
      "For these tokens you first need to unembed the result of the final layer, the re-embed the resulting token on the next pass. Has anyone investigated passing the raw output of one pass to the input of the next?",
      "Interesting. One other potential benefit is an easier quantization of the activations.",
      "Related? \"Let's Think Dot by Dot: Hidden Computation in Transformer Language Models\"\nhttps://arxiv.org/abs/2404.15758>      Chain-of-thought responses from language models improve performance across most benchmarks. However, it remains unclear to what extent these performance gains can be attributed to human-like task decomposition or simply the greater computation that additional tokens allow. We show that transformers can use meaningless filler tokens (e.g., '......') in place of a chain of thought to solve two hard algorithmic tasks they could not solve when responding without intermediate tokens. However, we find empirically that learning to use filler tokens is difficult and requires specific, dense supervision to converge. We also provide a theoretical characterization of the class of problems where filler tokens are useful in terms of the quantifier depth of a first-order formula. For problems satisfying this characterization, chain-of-thought tokens need not provide information about the intermediate computational steps involved in multi-token computations. In summary, our results show that additional tokens can provide computational benefits independent of token choice. The fact that intermediate tokens can act as filler tokens raises concerns about large language models engaging in unauditable, hidden computations that are increasingly detached from the observed chain-of-thought tokens.> In this work, we demonstrate that transformers trained on the next-token prediction objective can achieve improved performance on certain tasks when given filler tokens, achieving perfect accuracy whereas the no-filler, immediate-answer setting achieves only low accuracy.--I wonder if we could get benefits from adding special computation/register tokens to text LLMs?More discussion:- https://news.ycombinator.com/item?id=40182695- https://www.reddit.com/r/LocalLLaMA/comments/1cf2w5a/transfo..."
    ],
    "link": "https://openreview.net/forum?id=2dnO3LLiJ1",
    "first_paragraph": "OpenReview is a long-term project to advance science through improved peer review, with legal nonprofit status through Code for Science & Society. We gratefully acknowledge the support of the OpenReview Sponsors. \u00a9 2024 OpenReview"
  },
  {
    "title": "PeaZip: Open-source file compression and encryption software (peazip.github.io)",
    "points": 199,
    "submitter": "thunderbong",
    "submit_time": "2024-05-11T12:19:00",
    "num_comments": 70,
    "comments_url": "https://news.ycombinator.com/item?id=40327631",
    "comments": [
      "PeaZip is great software, and doubly so because it is written using Lazarus and compiled with Free Pascal. I highly recommend giving it a try, if only to experience that high quality software can be built using tools that lead you somewhat off the beaten path.Unfortunately, its lead developer has recently posted[0] that he has to undergo what seems to be complicated, major eye surgery, and that he will probably be unable to continue development :([0]: https://old.reddit.com/r/PeaZip/comments/1bn7pu0/communicati...",
      "+100 for Lazarus and FreePascal",
      "Seems like he's doing OK, thank goodness! https://old.reddit.com/r/PeaZip/comments/1cpdvum/peazip_980_...",
      "Neither the existence of this link nor anything in it contradicts the developer's earlier post.  It looks like the situation was inaccurately summarized by the HN user with the top comment here\u2014the PeaZip developer didn't announce that he or she was going to stop working on PeaZip.",
      "> Drag & drop from app to system is certainly a mayor usability boost, but it is not simple to implement as it requires a dedicated solution for each supported OS and desktop environment.Off topic, but this is why many devs choose electron.",
      "> and desktop environmentOff topic, but this is why many devs choose not to support Linux. Every distro is its own special snowflake",
      "> Off topic, but this is why many devs choose not to support Linux. Every distro is its own special snowflakemost DE use the same standards (dbus etc) so no",
      "Somewhat related: GID (for Generic Image Decoder) is written in Ada and significantly outperforms ImageMagick (written in C) in some benchmarks.https://gautiersblog.blogspot.com/2024/03/benchmarking-gener...",
      "I like seeing software written in Free Pascal, they tend to be small and performant. Cheat Engine[0] is another example.[0] https://github.com/cheat-engine/cheat-engine",
      "I searched around and found this tutorial[0] on the official wiki. Seems like a decent intro to the history & syntax of the language. There\u2019s also another tutorial[1] on the more modern iteration of the language, as well as some video tutorials[2] on using the IDE for GUI development.[0]: https://wiki.freepascal.org/Basic_Pascal_Tutorial/Introducti...[1]: https://castle-engine.io/modern_pascal[2]: https://wiki.freepascal.org/Lazarus_videos"
    ],
    "link": "https://peazip.github.io/",
    "first_paragraph": "OPEN\r\nSOURCE FILE COMPRESSION AND ENCRYPTION SOFTWARE"
  },
  {
    "title": "Why the CORDIC algorithm lives rent-free in my head (github.com/francisrstokes)",
    "points": 294,
    "submitter": "todsacerdoti",
    "submit_time": "2024-05-11T07:18:39",
    "num_comments": 50,
    "comments_url": "https://news.ycombinator.com/item?id=40326563",
    "comments": [
      "While the author mentions this is mostly applicable to things like FPGAs, there's also an application in gamedev (or any distributed physics simulation). Floating point calculations are tricky to get deterministic across platforms[0]. One solution is to skip floats entirely and implement a fixed-point physics engine. You'd need something like CORDIC to implement all the trig functionality.I started working on such a thing as a fun side project a few years ago but never finished it. One of these days I hope to get back to it.[0]: https://randomascii.wordpress.com/2013/07/16/floating-point-...",
      "That blog post is now a decade old, but includes an important quote:> The IEEE standard does guarantee some things. It guarantees more than the floating-point-math-is-mystical crowd realizes, but less than some programmers might think.Summarizing the blog post, it highlights a few things though some less clearly than I would like:  * x87 was wonky\n\n  * You need to ensure rounding modes, flush-to-zero, etc. are consistently set\n\n  * Some older processors don't have FMA\n\n  * Approximate instructions (mmsqrtps et al.) don't have a consistent spec\n\n  * Compilers may reassociate expressions\n\n\nFor small routines and self-written libraries, it's straightforward, if painful to ensure you avoid all of that.Briefly mentioned in the blog post is IEEE-754 (2008) made the spec more explicit, and effectively assumed the death of x87. It's 2024 now, so you can definitely avoid x87. Similarly, FMA is part of the IEEE-754 2008 spec, and has been built into all modern processors since (Haswell and later on Intel).There are still cross-architecture differences like 8-wide AVX2 vs 4-wide NEON that can trip you up, but if you are writing assembly or intrinsics or just C that  inspect with Compiler Explorer or objdump, you can look at the output and say \"Yep, that'll be consistent\".",
      "> but if you are writing assembly or intrinsics or just C that inspect with Compiler Explorer or objdump, you can look at the output and say \"Yep, that'll be consistent\".Surely people have written tooling for those checks for various CPUs?Also, is it that \u2018simple\u2019? Reading https://github.com/llvm/llvm-project/issues/62479, calculations that the compiler does and that only end up in the executable as constants can make results different between architectures or compilers (possibly even compiler runs, if it runs multi-threaded and constant folding order depends on timing, but I find it hard to imagine how exactly that would happen).So, you\u2019d want to check constants in the code, too, but then, there\u2019s no guarantee that compilers do the same constant folding. You can try to get more consistent by being really diligent in using constexpr, but that doesn\u2019t guarantee that, either.",
      "Years ago, I was programming in Ada and ran across a case where the value of a constant in a program differed from the same constant being converted at runtime. Took a while to track that one down.",
      "The same reasoning applies though. The compiler is just another program. Outside of doing constant folding on things that are unspec'ed or not required (like mmsqrtps and most transcendentals), you should get consistent results even between architectures.Of course the specific line linked to in that GH issue is showing that LLVM will attempt constant folding of various trig functions:https://github.com/llvm/llvm-project/blob/faa43a80f70c639f40...but the IEEE-754 spec does also recommend correctly rounded results for those (https://en.wikipedia.org/wiki/IEEE_754#Recommended_operation...).The majority of code I'm talking about though uses constants that are some long, explicit number, and doesn't do any math on them that would then be amenable to constant folding itself.That said, lines like:https://github.com/llvm/llvm-project/blob/faa43a80f70c639f40...are more worrying, since that may differ from what people expect dynamically (though the underlying stuff supports different denormal rules).Either way, thanks for highlighting this! Clearly the answer is to just use LLVM/clang regardless of backend :).",
      "The author did mention about fixed point was very popular for gamedev before floating point becoming popular due the increased in hardware capability, and most likely CORDIC was being used as well together with fixed point.> In fact, before IEEE 754 became the popular standard that it is today, fixed point was used all the time (go and ask any gamedev who worked on stuff between 1980 and 2000ish and they'll tell you all about it).",
      "I believe that was mostly for performance reasons, not determinism, right?",
      "Was gamedev between 1980 and 2000ish, can confirm. PS1 had no floating point unit.",
      "This was the cause of the signature jiggly textures that were pervasive in PS1 games",
      "Fun facts, in addition to sine and cosine calculation and generation, CORDIC can also be used for many operations including log, exponent, square root, vector magnitude, polar-cartesian conversion and vector rotation. Spoiler alerts, the authors provided the teaser regarding these propects in the conclusions.I've got the feeling that by using quaternion instead of conventional orthonormal matrices, CORDIC based operations can be executed more efficiently (less compute cycles and memory) and effectively (less errors) [1].[1] CORDIC Framework for Quaternion-based Joint Angle Computation to Classify Arm Movements:https://core.ac.uk/works/8439118"
    ],
    "link": "https://github.com/francisrstokes/githublog/blob/main/2024/5/10/cordic.md",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously."
  },
  {
    "title": "System Analysis and Programming (1966) (scientificamerican.com)",
    "points": 48,
    "submitter": "aragonite",
    "submit_time": "2024-05-11T16:42:45",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=40329173",
    "comments": [
      "The link to the 2011 Norvig blog is broken. Correct link is https://www.scientificamerican.com/blog/at-scientific-americ... (Edit: a better-formatted version is at http://norvig.com/sciam/sciam.html)Link to the PDF version of Strachey 1966: https://pdfupload.io/docs/05a2ef03",
      "There used to be a thing called the Systems and Procedures Association, was a thing in the 60s as commercial use of computers really took off.  Not sure if they are still around.",
      "If you search using Google for Strachey you get 15 hits for Lytton Strachey before you get to Christopher Strachey.  That's a shame because I'm sure that Christopher Strachey has had a more lasting impact on the world."
    ],
    "link": "https://www.scientificamerican.com/article/system-analysis-and-programming-christopher-strachey/",
    "first_paragraph": "August 23, 2011"
  },
  {
    "title": "100k Stars (chromeexperiments.com)",
    "points": 151,
    "submitter": "sans_souse",
    "submit_time": "2024-05-10T07:45:31",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=40316345",
    "comments": [
      "Great visualization, though (ironically, as one of the first Chrome experiments) the music no longer works on Chrome by default (go to site settings > sound and set it to \"Allow\" to hear it), and it is somewhat outdated now (for example, it states that no exoplanets have been discovered orbiting Proxima Centauri (and that the 'proposed' JWST is required to find these planets)).",
      "When I first went to Josemar bank as a kid there was a display talking about how exploits may theoretically exist. This would have been early 1990s.I went a few years ago with my kids, about the same age I was, and they had a counter which was in the thousands.",
      "I like this visualization, but it got me thinking about how we often portray the universe in media. It seems like we always end up with the same message: 'Look how small and insignificant we are.' It's like we're drawn to the idea that our existence is just a tiny blip on the universe's radar.I think this perspective is a bit one-dimensional. It seems almost nihilistic.",
      "It\u2019s actually comforting to non-believers in a way that religion is to believers. Except it has the benefit of being obviously true.https://www.oliverburkeman.com/nobigdeal",
      "Technically true, but non-comprehensive / reductionist, and arguably misinformative.Also: religion is technically also \"obviously\" true, though what is \"true\" is a function of one's frame of reference.",
      "> Look how small and insignificant we are ..... It seems almost nihilistic.It isn't nihilistic. It is a simple fact.As an aside, if you have not yet listened to the Hitch Hikers Guide to the Galaxy radio plays (and you should!) you will know this is a major plot device.",
      "We\u2019re Mostly harmless. We\u2019re significant enough to have a researcher double the length of our entry in space-Wikipedia.",
      "You can look at it the other way. Compared to qubits, were fucking gods.",
      "We're the middle child of the universe.",
      "How does one measure significance? Science? Logic? Common sense? What's obvious? Some stories?"
    ],
    "link": "https://stars.chromeexperiments.com/",
    "first_paragraph": "3,840\u00b0K (cooler)"
  },
  {
    "title": "Most of Europe is glowing pink under the aurora (foto-webcam.eu)",
    "points": 1445,
    "submitter": "luispa",
    "submit_time": "2024-05-10T21:59:03",
    "num_comments": 351,
    "comments_url": "https://news.ycombinator.com/item?id=40324179",
    "comments": [
      "I feel I need to report my experience from Denmark, Jutland.It started with white broad streaks, which most of all looked like fog, but then perhaps after 10 minutes or so, we saw colors of red, purple and green begin to emerge from the these streaks. Most astoundingly it all seemed to emanate from a fluctuating point in the middle of the sky. If you looked closely at this point  you could see it fall into itself, morphing and shifting continuously.We went around the house and we could purple streaks at the top and orange to red patches at the bottom of the sky.Colors observed:\nWhitish blue,  \nGreen,\nPurple,  \nRed,\nand OrangeAn absolutely a beautiful experience.",
      "I was out flying a camera drone on the river Dee between Liverpool and North Wales filming the sunset,  when I started getting magnetic interference warnings. At the same time, I started to see flashes in the sky. Then my vision was filled with sparkling lights. A few minutes later I got an aurora warning from my brother and the aurora app. KP 8-9As the sun went down I was waking through a woodland. I thought the dark would help my eyes to see the aurora, and I could point my camera away from the light pollution of Liverpool and maybe catch some colour with a long exposure.Suddenly, I realised the colour of the aurora was coming through the trees, and getting brighter. I wasn't expecting it to be visible to naked eye like this. In these latitudes the advice is to set your camera to highest iso and slowest shutter speed and hope to catch a little colour. I wasn't expecting this! So I packed up quick and ran through the woods and into open fields. There, directly above me was this intense white light, with white arms forming a sort-of cross. The longest arm formed an arch over the whole sky, and where they reached the earth, on either side they became colourful, like a twinkling rainbow stretching out to space.I didn't have the equipment or the wits to get a good photo. I just threw myself on the ground and lay on my back watching.Wildest thing I ever saw. Absolutely awesome.When I regain my composure, I will upload some photos somewhere (where, though?) and edit this comment.",
      "> and edit this comment.You have like 30min to edit and there's a timeout for replies too so maybe put the link in your profile if it gets later <3",
      "Which app have you been using for the aurora warning?",
      "Not who you were replying to, but I've had the AuroraWatch UK app installed for a while now (and yes, we enjoyed last night's display, after being alerted by the app).",
      "Someone shared something similar on Twitter: https://x.com/packyM/status/1789113052723314918",
      "Wow that's magnificent.",
      "Can somebody link not to Twitter, please?",
      "Just Twitter ones.",
      "Thank you for sharing that. I wonder at what speed the morphing happen, also a sense of proportion. Very hard to capture that in anything but direct experience."
    ],
    "link": "https://www.foto-webcam.eu/webcam/lucknerhaus/",
    "first_paragraph": ""
  },
  {
    "title": "Billions in Dirty Money Flies Under the Radar at Busiest Airports (wsj.com)",
    "points": 40,
    "submitter": "kripy",
    "submit_time": "2024-05-11T22:07:09",
    "num_comments": 26,
    "comments_url": "https://news.ycombinator.com/item?id=40330930",
    "comments": [
      "> Most airports worldwide, including in the U.S., don\u2019t scan passenger luggage for cash, a costly undertaking in equipment and personnel.I think this is false. Anytime I've flown with cash in my checked in luggage, it was always stolen and it was obvious someone went through my suitcase. Then I stopped doing that obviously. (happened in U.S. and Indonesia)",
      "How dare you question the TSA, the best and brightest of us. \\sAs a funny counter, I recently traveled through 6 TSA checkpoints with a loaded magazine in my bag. I had it from when I was at my farm, oops. Was a little concerned because I was in Boston when they found it (I\u2019m based out of Tennessee). But they let me go and confiscated it.Point being, if they can\u2019t find a loaded magazine, I doubt they\u2019d be able to find money intentionally. Then again, might have more incentive to find the money",
      "Boston is not a gun friendly town. You got lucky.",
      "Yeah, I generally agree.That said, there\u2019s a couple things:1. You\u2019re technically allowed to travel through anywhere with any firearms in the US (I only had a magazine, not a fire arm) legally. That includes planes, but you have to check the bags. That said, they can still arrest you and not follow the law.2. I carry a conceal carry permit with reciprocity with most states for this very reason. I actually showed it to them and it made things much smoother",
      "> ...heaved seven heavy suitcases onto the conveyor belt...> ...and a few million more dollars worth of cash in eight suitcases...> ...In October 2020, two other women weren\u2019t so lucky. They were questioned at a Heathrow departure gate by officers of the Border Force, the agency in charge of U.K. customs and immigration. One of the women told officers she checked five suitcases to Dubai because she wasn\u2019t sure what to wear...I'm utterly baffled at why a money smuggling operation would be done with a conspicuous 5 to 8 suitcases at a time, rather than just 1 or 2.They were offered \"around $3,750\" to fly suitcases containing around $500,000 each. Which is not a high percentage even for just a single suitcase.So even besides the extra risk of attracting attention from so many suitcases, you'd think they'd want to spread them out more just for risk reduction generally -- in case the checked luggage is lost, in case a courier decides to abscond with the cash themselves, etc.",
      "Survivor bias? maybe they just don't catch the ones that only had two suitcases of cash.",
      "My best guess is a lack of willing participants combined with pressure from up top to move money to keep the operation going/meet targets.We also don't know how much of that 500k is profit - maybe the margins in organised crime aren't what they used to be. Each $3,750 saved is money they can put straight into their pocket as their boss might never find out how many mules they ended up using.Or maybe the reporting is fishy",
      "3750 for committing serious crimes seems so low, one can only imagine the desperation or lack of value understanding involved with participants.Or coercion.",
      "The \"kia boys\" are out stealing car after car for $100 from interviews online.Incentives seem lower than we all think?",
      "I think it\u2019s pretty simple. To many people, $3,750 is a huge amount of money. It\u2019s easily several months salary.I think a lot of people would be relatively unaware of how illegal a given thing is and would instead see the amount of money being offered as representative of the risk. Too much and they would get suspicious."
    ],
    "link": "https://www.wsj.com/business/airlines/heathrow-dubai-airports-billions-dirty-money-9f49cc7f",
    "first_paragraph": ""
  },
  {
    "title": "$64B Gamble: SoftBank Arm Plan to Launch AI Chip in 2025 (geekynews.org)",
    "points": 3,
    "submitter": "prestonlau",
    "submit_time": "2024-05-12T00:57:49",
    "num_comments": 0,
    "comments_url": "",
    "comments": [],
    "link": "https://geekynews.org/0304blog",
    "first_paragraph": ""
  },
  {
    "title": "Home ownership is not the boon to older Americans that it once was (nytimes.com)",
    "points": 18,
    "submitter": "MilnerRoute",
    "submit_time": "2024-05-12T00:11:32",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=40331435",
    "comments": [
      "How can one not understand that their house increasing in value means the house they want to buy also (proportional) increases in value?! Are those older Americans represented in the article thinking that their house will increase in value to 700K while the apartments they wanted will stay at 100K for 20 years?",
      "Until Covid hit, it kind of worked, as long as you sold and moved far enough away.Now Midwest prices are moderately close to California prices that it\u2019s not as easily done.And it never worked very well in the same metro unless you seriously downsized - from large house to small condo.",
      "I don't know but you can see that this misunderstanding is extremely widespread, bordering on universal. Name any American politician who does not agree with the idea that the way to help poor people is to get them to \"build wealth\" through homeownership, a scheme under which some future person must necessarily become impoverished.",
      "The rising price of a house you own means very little if everything is going up - plus throw in inflation, interest rate, and taxes. If you move now, you are going to pay more unless you significantly downsize.",
      "Related:A 71-year-old Californian explains why she's one of many boomers reluctant to sell their large homes and downsize \u2014 and it has nothing to do with moneyEliza Relman Mar 24, 2024https://www.businessinsider.com/71-year-old-boomer-cant-find...The gist:   Frieden and her husband are prioritizing accessibility, so they've looked mostly at larger condominium buildings with elevators. But they'd also like a small outdoor space, like a balcony, enough wall space for their art, and a home office and spare bedroom for visitors.\n\n    But there are very few bigger units available, Frieden said. Most of the condos are small one- or two-bedrooms without any outdoor space and with modern, open-plan layouts that appeal more to younger people's tastes and lifestyles.\n\n   \"They feel and seem like they're built for young people,\" Frieden said of the condo buildings. \"They even market, 'the greatest thing about our complex is the gym and the shared courtyard, shared rooftop environment, the bike racks' \u2014 all of these things that might not be first on the mind of a senior.\"",
      "I don\u2019t understand. A two bedroom for a couple is plenty.The guest bedroom can also be the office in the 2nd bedroom.  Many complexes have a few units for hoteling guests in the building which is very nice.Balconies have been absent for years, maybe liability risk and more value as usable square feet. But there is usually some nice courtyards, rooftop pools, and of course nearby parks in any city.  I guess they don\u2019t want to share the space with others from the sound of it?  But places like the villages have thriving 3rd places, and during the workday retirees will have the run of the rooftop pool and courtyards.Elderly should absolutely be using the gym and pool. Many communities have shared gardens where you can get a plot to grown on.Are these untenable compromises?",
      "So, to summarize this article, it's a short piece about one specific couple. There's not a single piece of data about other people that might be in a similar situation, there's not a single piece of relevant data about the housing market, in fact, there's not a single solitary bit of input from the author. The entire story is 6 paragraphs that quote one person saying they're having trouble downsizing out of their home.This somehow translates to a title with a broad sweeping statement about all older Americans? And how home ownership is a problem for older Americans? How is this journalism? How is this published in the New York Times? Did the author even fact check anything this couple told them? Did they research into their situation at all? Who knows.Is there more to the article that I can't see because I'm not subscribed, and it's not making it evident? I just don't understand what this is.",
      "I think you\u2019re only seeing the intro to the article, and then perhaps your ad blocker is preventing the \u201csubscribe to see more\u201d bit from showing up. The actual article is longer than six paragraphs and has some statistics and quotes from more people, including a researcher studying the space.",
      "> The entire story is 6 paragraphs There's more than 30 paragraphs in that story.",
      "Every time I hear news about boomers not being able to downsize, I think \u201cwell isn\u2019t it the good ol consequences of my actions\u201d. The nimbys made it impossible to build and created a system where landlords benefited from just being born early. The rest of the generations have been dealing with this problem for years, welcome to the party."
    ],
    "link": "https://www.nytimes.com/2024/04/20/health/seniors-home-equity-mortgages.html",
    "first_paragraph": ""
  },
  {
    "title": "Making Sense of Acquire-Release Semantics (davekilian.com)",
    "points": 80,
    "submitter": "sph",
    "submit_time": "2024-05-10T08:59:13",
    "num_comments": 35,
    "comments_url": "https://news.ycombinator.com/item?id=40316780",
    "comments": [
      "Well written article, nice and to the point. Do recommend.Decades ago I declared myself too stupid to use shared memory with threading; I have learned to avoid this whenever possible, or abstract away the memory access under a safe layer as soon as possible. One of the greatest decisions of my career.Memory model semantics is one of the parts of systems programming that is generally poorly understood; I have had long discussions with senior programmers who have spent their careers carelessly threading their code without realizing what is happening under the hood. Not only did some of them not properly understand the acquire/release model, but they were not even aware of its existence.For a more in-depth explanation, I recommend Sutter's excellent talk \"Atomic <> weapons\": https://www.youtube.com/watch?v=A8eCGOqgvH4. It is a two hour lecture, but it will be worth your time.",
      "That atomics talk by Sutter is a superbly high quality explanation, albeit long. He addresses the topic with exceptional rigor and plenty of examples that show what can and can't happen. It for sure took me from 0 to 100 knowledge on thread safety.",
      "> Decades ago I declared myself too stupid to use shared memory with threading; I have learned to avoid this whenever possible, or abstract away the memory access under a safe layer as soon as possible. One of the greatest decisions of my career.This probably qualifies you to do shared memory threading, when it is needed. Such as debugging those abstraction layers. Knowing you don't understand it puts you in the right frame of mind to carefully do the work.",
      "The article says a lot about CPUs reordering memory instructions - is this actually the main cause of the issues with the shown code?Speaking of x86 specifically, instructions are aggressively reordered but as far as I understood it, the results are generally committed in order. The ISA has rules about what memory reorderings can occur, and looks like most reorderings are forbidden.\nThis stackoverflow explains it well: https://stackoverflow.com/a/50310563/7064452In this queue example I'd say the elephant in the room is the compiler, not the CPU. The code has no language-level synchronisation, therefore the compiler is free to do whatever - it's not surprising memory ops get reordered. If you want to be pedantic, the code is UB with no synchronisation present. Perhaps besides the point to discuss CPU behaviour in this light.",
      "All CPUs commit in order and except precisely, because most other options are insane, or would drive you to it.  However: single thread commit order =/= observability order.Observability order of memory operations --- which are the only operations that matter --- are governed by the memory consistency model of the architecture.\nx86 has what's generally referred to as strong ordering on memory operations.On x86, part of it means that stores from the same core cannot be observed out of order from each other, nor can loads.So assuming the compiler does not move the `tail++` up, or move the assignment out of the if-statement (both of which are achieved by marking them `volatile`), the code should actually work on x86.\nThe `tail++` change cannot be observed before the write to the queue and the reading from the queue cannot be observed before the reading of the `tail` and `head` variables.On RISC-V and Arm, you need more as they have substantially weaker memory consistency.  The RISC-V specs have some examples of interesting outcomes you can have.  Some of it involves time-travel.But in the end: yes the reordering done by the CPU is the issue.  The compiler can and does reorder stuff when it thinks that it'll unlock more instruction-level parallelism, but no amount of volatile is going to make that queue universally usable on RISC-V.  No matter what the compiler does.  Even perfectly preserving the single-thread semantics of the code, not reordering a single instruction, the CPU can move stuff around in terms of observability.\nThe alternative is that the compiler inserts a barrier/fence after every instruction.There are trade-offs.  Poorly written code for x86 can absolutely tank performance because of ordering violations requiring code to be replayed, though that is sometimes a problem in even weaker consistency models as well.",
      "The article does mention in the end that a trivial translation of the queue code to x86 will work.It is broken on other architectures though (aside of the obvious UB because of races).",
      "Yes, having worked on one of the out-of-order Intel CPU's, I can tell you that you are correct.  Instructions may be \"complete\", as in their results can be forwarded to later operations, but the instruction isn't \"retired\" until it is known that it can not raise an exception, or be cancelled because of branch mis-predict, etc.  Programmer-visible architectural state as defined in the ISA is not written until instruction retirement.  CPU re-ordering instructions is not going to change semantics (in X86 and similar architectures... there are some archs that relax that guarantee).Compilers are notorious for doing dumb things around locks.... the gnu C for AVR architecture, for instance, looks at the SEI instruction (SEt Interrupt mask bit) and notices that it doesn't modify memory or registers, so hoists it to the top of functions.   Eh.. No, SEI; CLI; <code> <critical section> <code> is not what I intended...Also... CPU's with data caches can to smart things with architecturally-defined locking instructions such as \"test-and-set' or 'compare-and-exchange' such that the instructions are always cache-coherent across CPU's.  If you try to roll-your-own locking code, you had best understand how the cache invalidation mechanism works in your chosen CPU or you are going to have a bad day.",
      "No matter how many times I read about these, I'm always left just slightly confused. Acquire/release is about the ordering of instructions within a thread of execution. So if I have a writer writing X, then writing Y, then I need write-release to make sure that the compiler actually puts the instructions for Y after the instructions for X in the machine code. If I want to guarantee that the results of those writes are visible to another thread, then I need a memory fence to force flushing of the caches out to main memory basically?The author mentions the queue as originally written is technically correct for x86/x86_64. This is true only in the sense that neither the producer or consumer can experience partial reads / partial writes, right? It is still possible that if, say, the consumer were busy waiting for an item to be available then it will spin for as long as it takes for the CPU to decide to flush the producer's writes out to main memory?Whenever I see these concepts discussed, it is in the context of the C++ stdatomic library. If I were writing a program in C99, I would assume it would still be possible to communicate the same intent / restrictions to the compiler, but I'm not sure because I haven't been able to find any resources that discuss doing so. How might one communicate that to the compiler, assuming they are on x86/x86_64 where in theory the CPU should just do the right thing with the right machine code?Finally, does target architecture influence the compiler's behavior in this regard at all? For example, if we take x86/x86_64 as having acquire/release semantics without any further work, does telling the compiler that my target architecture is x86/x86_64 imply that those semantics should be used throughout the program?",
      "I just wanted to clarify something about flushing caches: fences do not flush the caches in any way.  Inside the CPU there is a data structure called the load store queue.  It keeps track of pending loads and stores, of which there could be many.  This is done so that the processor can run ahead and request things from the caches or to be populated into the caches without having to stop dead the moment it has to wait for any one access.  The memory fencing influences how entries in the load store queue are allowed to provide values to the rest of the CPU execution units.  On weak orderes processors like ARM, the load store queue is allowed to forward values to the execution pipelines as soon as they are available from the caches, except if a store and load are to the same address.  X86 only allows values to go from loads to the pipeline in program order.  It can start operations early, but if it detects that a store comes in for a load that's not the oldest it has to throw away the work done based on the speculated load.Stores are a little special in that the CPU can declare a store as complete without actually writing data to the cache system.  So the stores go into a store buffer while the target cache line is still being acquired.  Loads have to check the store buffer.  On x86 the store buffer releases values to the cache in order, and on ARM the store buffer drains in any order.  However both CPU architectures allow loads to read values from the store buffer without them being in the cache and without the normal load queue ordering. They also allow loads to occur to different addresses before stora.  So on x86 a store followed by a load can execute as the load first then the store.Fences logically force the store buffer to flush and the load queue to  resolve values from the cache. So everything before the fence is in the caching subsystem, where standard coherency ensures they're visible when requested.  Then new operations start filling the load store queue, but they are known to be later than operations before the fence.",
      "That clarifies fences more for me a little bit more. Thanks for the insight."
    ],
    "link": "https://davekilian.com/acquire-release.html",
    "first_paragraph": ""
  },
  {
    "title": "Show HN: Wag, MFA and Enrollment for WireGuard (github.com/nhas)",
    "points": 118,
    "submitter": "Nullence",
    "submit_time": "2024-05-11T07:31:23",
    "num_comments": 32,
    "comments_url": "https://news.ycombinator.com/item?id=40326615",
    "comments": [
      "This looks nice, but a couple of things> curl http://public.server.address:8080/register_device?key=e83253...> The service will return a fully templated responseIt looks like the \"registration\" involves the server generating a private key then sending to the client, rather than the client generating a private key and sending the public key to the server.Not only that but your example is http! Probably worth replacing that part at least in case people think http is a reasonable option.> To authenticate the user should browse to the servers vpn address, in the example, case 192.168.1.1:8080, where they will be prompted for their 2fa code.So when the session times out, is there any way for the client to realise this? Or does their ssh session (or whatever) just stop working?I've on and off looked for a wireguard client which can do something like the captive portal detection on wifi. Ideally it would be an extra line in the config file (like persistentkeepalive), which does a URL pull. Could be checked periodically (like with the keepalive). If it returns \"OK\", then fine, if it doesn't return then there's a network problem, but if it returns a \"Location\" header, the client would pop up a browser at that location, allowing for session reauthentication or whatever.I haven't found one.",
      "> I've on and off looked for a wireguard client which can do something like the captive portal detection on wifi. Ideally it would be an extra line in the config file (like persistentkeepalive), which does a URL pull. Could be checked periodically (like with the keepalive). If it returns \"OK\", then fine, if it doesn't return then there's a network problem, but if it returns a \"Location\" header, the client would pop up a browser at that location, allowing for session reauthentication or whatever.That would be really cool. I hope the author of this will consider it.",
      "Have you tackled the issue of session management or are you planning to do so?\nEssentially wireguard key are just eternal session keys.I would expect software that implements the wireguard transport layer to implement session management to be called a working VPN server solution. This means a second channel to the server for periodically rotating session keys, terminating sessions, changing IP addresses, configuring new routes and repeating authentication if necessary.",
      "I'd use firezone for that. It has an option that forces the user to login to the platform regularly. Coupling that with an external identity provider via oidc is a very solid and simple solution for session management.",
      "Just a quick note -- 1.0 goes a little further and rotates the WireGuard keys upon each auth session, so the private key never leaves the tunnel process memory. You need the Firezone client for that, though.",
      "It seems to me that if I were building a VPN client like Global Protect but using WG, I'd have an eternal per client auth key that is used to set up an initial tunnel to the VPN controller, over that you perform auth, etc, then you're given another session key, which is valid as long as that session is. The first tunnel would disconnect as soon as you finished authenticating and got your actual session key.",
      "Why even have the first tunnel? You could do the entire thing out of hand over a web interface or other mechanism. If the public address of the WG server (or the authn server) is known and available, then there\u2019s no real difference in setting up the connection over a persistent WG channel vs an HTTPS service.Both solutions are custom for that VPN, so I\u2019d just have one WG tunnel that\u2019s controlled through a secured (web)service. The bonus is that you wouldn\u2019t need a hard coded initial key. (You\u2019d still need some authentication mechanism, but it could be more than fixed public/private key pairs).",
      "Do you protect against bruteforcing the TOTP code?  I.e. via rate-limiting or a set amount of retries? I took a quick glance at the code and couldn't find anything to this effect.The scenario I'm imagining is: someone opens the TOTP entry UI in their browser, opens devtools, and starts to loop through all possible TOTP codes.",
      "I think thats here:https://github.com/NHAS/wag/blob/cdbdbec3393fa86bf6c823117c8...",
      "I can't speak to the specifics of this particular implementation but usually if someone has the login (username + password) to get to totp that user has already been compromised.."
    ],
    "link": "https://github.com/NHAS/wag",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously."
  },
  {
    "title": "BCPL evolved from CPL. (2021) [pdf] (cam.ac.uk)",
    "points": 12,
    "submitter": "fanf2",
    "submit_time": "2024-05-10T10:42:03",
    "num_comments": 8,
    "comments_url": "https://news.ycombinator.com/item?id=40317325",
    "comments": [
      "A very interesting paper. BCPL was the language used for the Xerox Alto computer, e.g. to build the first graphic WYSIWYG text editor and desktop publishing application.Martin Richards, How BCPL Evolved from CPL, The Computer Journal, Volume 56, Issue 5, May 2013, Pages 664\u2013670, https://doi.org/10.1093/comjnl/bxs026Published: 20 March 2012 (not 2021)",
      "Christopher Strachey the designer of CPL deserves a shout out. He also wrote a very early checkers program, invented time sharing, created denotational semantics with Dana Scott, came up with the idea of L values and R values, and coined the term currying.",
      "In the late 1980s I wrote much of the code for my PhD in BCPL, despite C being available.  It was clean, clear, and when you wrote code it was obvious what it was going to do.  The type-less nature wasn't a problem, and co-routines were invaluable, bordering on indispensable.I also assisted in bootstrapping BCPL on a self-built machine, and it was so easy.  I liked it, though I'm not sure I'd go back to it.I also chatted with Martin Richards for a while about MCPL, but never found the time to dive into that.Fun times.",
      "MCPL's one of my influences[0] so that line's continuing. Dum spiro speroRichards wanted to build a flight simulator a while back, so he added floating[1] point. Richards 1 - Yaks 0: that yak got shorn.[0] I guess I should ask Richards how much influence he got from Backus?[1] would Moore have done it in fixed? or are there stability problems with that?",
      "> a stripped down and syntactically changed version of BCPL, called B, was the language on which the C programming language was based.https://en.wikipedia.org/wiki/BCPL",
      "Fun fact: for a year or so I shared an office with Colin Whitby-Strevens (co-author with MR of the BCPL book). Also have written BCPL although not a great deal. I think I had a 6809 compiler once upon a time.",
      "Started with BCPL on CP/M when I couldn\u2019t get a C compiler."
    ],
    "link": "https://www.cl.cam.ac.uk/~mr10/cpl2bcpl.pdf",
    "first_paragraph": ""
  },
  {
    "title": "Unix and Multics (2019) (multicians.org)",
    "points": 99,
    "submitter": "aragonite",
    "submit_time": "2024-05-10T05:25:26",
    "num_comments": 56,
    "comments_url": "https://news.ycombinator.com/item?id=40315724",
    "comments": [
      "> We went to lunch afterward, and I remarked to Dennis that easily half the code I was writing in Multics was error recovery code. He said, \"We left all that stuff out. If there's an error, we have this routine called panic(), and when it is called, the machine crashes, and you holler down the hall, 'Hey, reboot it.'\"The New Jersey Style.",
      "I wonder if there could be an ultra-pessimist errors-first programming language.The main purpose of any code would be to deal with all possible errors and define them upfront. If, by miracle, your program execution does survive the minefield, you can throw a Success exception.",
      "Errors happen when one or more of a function\u2019s assumed dependencies are missing or invalidated. So in a PL like you\u2019re imagining, every function would need to run an assertion prologue validating all of its static dependencies. As for dynamic dependencies, they would need to be dynamically (continually) validated, probably at multiple scopes (who watches the watchmen?). If you squint your eyes you will see that static dependency checking is in fact partially provided by type systems, the more capable the type system the broader it\u2019s functional coverage. The complexity actually lies in those dynamic dependencies, which are external systems and components, sitting at the other end of some channel, and this includes the very hardware components the function is running on. If you follow this rabbit hole you\u2019ll see that there\u2019s no such things as static dependencies, just allegedly more stable dynamic ones; and that all dependencies are intertwined with each other within the continuum of the universe; and that anything that works is a miracle, built upon hopes and dreams. So we could say that the ultimate exception is a program working as intended, every time. So why even bother programming defensively? Let it crash!",
      "You might like Erlang.",
      "Now that's truly exceptional pessimism.",
      "Sounds a lot like error handling in Golang :)",
      "Yes, and in prod I have a recover() handler that sends me an email with stack trace. Haven't gotten one in a few years...",
      "Somewhere a spam filter thinks stack traces look like viagra ads.",
      "Yes, except for the \"defining them upfront\" part, which sounds similar in theory to checked exceptions in Java. I'm very partial to this, especially in Go, where nobody ever bothers to propagate errors properly and instead just bubbles up the same `err` object all the way to the top.",
      "Sounds a bit like Eiffel https://en.m.wikipedia.org/wiki/Eiffel_(programming_language..."
    ],
    "link": "https://www.multicians.org/unix.html",
    "first_paragraph": "Tom Van Vleck"
  },
  {
    "title": "Metabolism of autism reveals developmental origins (medicalxpress.com)",
    "points": 99,
    "submitter": "wglb",
    "submit_time": "2024-05-11T15:18:32",
    "num_comments": 186,
    "comments_url": "https://news.ycombinator.com/item?id=40328616",
    "comments": [
      "On the topic of metabolic disturbances in Autism, huge fan of the work Dr. Randy Blakely is doing on the links between Serotonin metabolism and Autism. One of the most surprising, and strongest (25-30% of patients), biomarkers for Autism is actually Platelet Hyperserotonemia (high levels of bound Serotonin in the blood).For decades it's been without explanation but recently Dr Blakely has described a bunch of cases where it was narrowed down to SERT transporter polymorphisms and inflammation.Worth a watch for those interested in the weeds of this stuff: https://www.youtube.com/watch?v=cpDtuKV5CJsI've got a pet hypothesis that differences in Serotonin metabolism (and receptor hypersensitivity) might play a role in why SSRIs aren't generally considered a first line treatment for ASD symptoms, https://www.pnas.org/doi/abs/10.1073/pnas.1112345109",
      "Actual paper: https://www.nature.com/articles/s42003-024-06102-y",
      "So there is a clear result found and then post hoc there is an explanation made for why this makes sense. That's a bit of a red flag since you preferably hypothesize first, but let's look at the analysis. If I'm not mistaken, then these are the most important parts:- 467 measured metabolites (features)- 136 males and 69 females = 205 (data points)- \"To minimize overfitting, only correlations with q values < 0.05 were tallied.\"Then the predictive performance in Fig. 3 looks very promising with a 0.88 AUC score. However, according to the methods: \"Classifiers of 4\u20137 metabolites were selected and tested for diagnostic accuracy using area under the receiver operator characteristic curve and random forest analysis.\"Then, those AUC scores do not provide so much value since they first used the data to select the best features and then used the same data to fit the model on the best features.It also looks a bit like the authors have thrown the kitchen sink at these 200 samples since I see R, GraphPad Prism, Python, CIRCOS, Cytoscape, and MetaboAnalyst being used.And the statement \"Fifty (50) random samples at each subsample size were taken to estimate the population statistics based on the central limit theorem.\" is a bit weird because the central limit theorem shows up throughout many analyses including confidence intervals.So all in all I'm not 100% sure, but I am skeptical. Anyone here who knows more about \"Metabolic network and hub-and-spoke analysis\" or \"network growth\" analysis? Or why it is reasonable to use so many metrics instead of being more selective?",
      "> So there is a clear result found and then post hoc there is an explanation made for why this makes sense. That's a bit of a red flag since you preferably hypothesize first, but let's look at the analysis.Eh, this doesn\u2019t look to be a P-hacking attempt. Scientific exploration doesn\u2019t always hit the hypothesis first model. Ideally this paper should be a source of future specific hypothesis and experiments. Though, IMHO, their implicit hypothesis is that metabolism is a core feature of ASD.The points about the predictive power in fig 3 are interesting.",
      "^^^^Better to read the paper instead of the pop journals. Most writers don't understand the issues fully and make mistakes, or sensationalize the discovery.",
      "The paper is a super fascinating read, and lines up with several key features I've noticed in both of my professionally diagnosed autistic children (good luck getting access to a competent diagnostician who understands how the ASD criteria manifest in passing adults). It's really enlightening to see the association between Xanthine, one of the end-stage products of eATP metabolization, and the anxiety that is so prevalent within my own family.From the Discussion[1] section of the paper:>  These self-calming connections in metabolism failed to develop in ASD. The natural consequence of the loss of these metabolic safeguards to overexcitation is for children with ASD to seek sameness to avoid the anxiety produced by change91, and to be more sensitive to environmental changes across many sensory domains.And a bit further on:>  In the current study, xanthine was the purine that gained the most stimulatory (+r) correlations in 5-year-olds with ASD. Xanthine is one of the end-products of eATP metabolism97. Xanthine is known to trigger a cascade of events that leads to mitochondrial network fragmentation, reactive oxygen species and reactive nitrogen species (ROS and RNS), eicosanoid (e.g., leukotriene, HETE, and prostaglandin) signaling, immune activation, anxiety-associated behaviors, and consolidates long-term aversive memories that make the animal hypersensitive to future environmental changes that warn of environmental danger, cause fear, and trigger anxiety in mice, and is elevated in the blood of adults with anxiety disorders98. Anxiety is a common but under-recognized problem in autism99.Another really important observation:>  A major result of this research was that the developmental differences observed in ASD were not the result of an increase or decrease of one causal metabolite, or an isolated change in the gut-brain axis, or neuroendocrine, autonomic, cytokine, or immunologic circuits. Instead, it was the interconnectedness and developmental state of the metabolic network that underlies all these systems that was fundamentally changed.In the last year, the All Brains Belong VT organization has been working on a collection of information they call \"All The Things\" [2], which lines up with the paper's observation that there is an underlying metabolic network at play. As a side note, All Brains Belong VT is a fantastic organization that focuses heavily on validation and support in a healthcare industry which often feels incredibly invalidating for individuals who have been reporting symptoms across a wide variety of siloed physician specialties.[1]: https://www.nature.com/articles/s42003-024-06102-y#Sec25[2]: https://allbrainsbelong.org/all-the-things/",
      "Reveals developmental origins or merely an observational study of metabolites in children?",
      "You know\u2026 this sounds a lot like \u201cvaccines cause autism\u201d crowd is up to something. Most vaccines are effectively laced with a chemical or biologic that the body will respond aggressively to. In turn, this teaches the body to respond to the virus that\u2019s injected at the same time in an aggressive way.That same mechanism would by definition trigger the cell danger response.",
      "> Most vaccines are effectively laced with a chemical or biologic that the body will respond aggressively toAluminum, btwhttps://www.educate-yourself.org/cn/Aluminum-Toxicity-Is-Wel...",
      "Yeah that\u2019s one of them.There\u2019s also often mercury - https://www.cdc.gov/vaccinesafety/concerns/thimerosal/index....I actually had a similar theory as to where egg allergies come from. Many vaccines have egg in themhttps://www.cdc.gov/flu/prevent/how-fluvaccine-made.htm"
    ],
    "link": "https://medicalxpress.com/news/2024-05-metabolism-autism-reveals-developmental.html",
    "first_paragraph": "Click here to sign in with\n                  \n\n\n                  or"
  },
  {
    "title": "The global tree restoration potential (Bastin et al., 2019) (science.org)",
    "points": 8,
    "submitter": "karl_rikhardych",
    "submit_time": "2024-05-10T12:09:29",
    "num_comments": 0,
    "comments_url": "",
    "comments": [],
    "link": "https://www.science.org/doi/10.1126/science.aax0848",
    "first_paragraph": ""
  },
  {
    "title": "So We've Got a Memory Leak (stevenharman.net)",
    "points": 178,
    "submitter": "todsacerdoti",
    "submit_time": "2024-05-10T05:14:14",
    "num_comments": 104,
    "comments_url": "https://news.ycombinator.com/item?id=40315686",
    "comments": [
      "I just dont understand the fear with manual memory management. With RAII and and simple diligance (clear ownership rules), managing memory is an easy engineering task. I actually find it *more* challenging to deal with frameworks that insist or reference counting and shared pointers since ownership is now obscure.I create it, I free it. I transfer, I no longer care. Its part of engineering discipline. Memory bugs are no worse than logic bugs, we fix the logic bugs, makes sense to fix the memory bugs. Disclaimer: I do embedded complex systems that run 24/7.We do the same for OS resources (handles, sockets, etc) and dont use automatic resource managers, we do it manually. So why complicate the design with automatic memory management?",
      "The use of manual memory management increases the cognitive load when reasoning about software. Working memory capacity varies considerably between people and is a performance limiting factor when designing complex systems. You see analogues of this in other engineering disciplines too.Over my many years of working in software development I have come around to the idea that most software developers do not have sufficient working memory capacity to reason about memory management in addition to everything else they must reason about at the same time. They may know mechanically how to properly do manual memory management but when writing code they drop things if they are juggling too many things at once mentally. It isn't a matter of effort, there simply is a complexity threshold past which something has to give. Automatic memory management has its tradeoffs but it also enables some people to be effective who otherwise would not be.On the other side of that you have the minority that get manual memory management right every time almost effortlessly, who don't grok why it is so difficult for everyone else because it is literally easy for them. I think some people can't imagine that such a group of engineers exist because they are not in that group and their brain doesn't work that way. If you are in this group, automatic memory management will seem to make things worse for unclear benefit.I've observed this bifurcation in systems software my entire career. In discussions about memory safety and memory management, it is often erroneously assumed that the latter population simply doesn't exist.",
      "I think the rift comes from people thinking manual memory management is a bunch of random allocs and frees all over the place.  That is gross and those of us who don't mind managing memory don't like it either.Personally my gripe is when people don't think about memory or space complexity at all.  I don't care if it's a custom memory management strategy or GC'd language, you need to think about it.  I have the same gripe about persistence, socket programming, and database queries.Abstractions are great, use them, love them.  But understanding what the hell they are doing under the hood not only improves efficiency, it prevents bugs, and gives you a really solid base when reasoning about unexpected behavior.",
      "If the automatic allocation tools are good, then they're doing the same thing as quality manual management but with much more compiler enforcement.",
      "Which is actually the case in enterprise source code, touched by hundreds of offshoring companies.",
      "Any professional developer should understand these things. It was taught at first year of my computer science degree. As you say it isn't particularly difficult if you have a strategy. If you can't manage memory then what about any other resource that needs to be manually closed (sockets, file handles etc ).",
      "I'm not sure I understand the causal link between something having a proven track record of being error-prone and not understanding it.",
      "The problem is that automatic memory management means to some newcomers that you don't have to worry about it. Which is not true at all.These newcomers may have heard about it, may even understand it at some level, but it's not in their rote knowledge. GC is great if you know that every allocation you do is expensive and that you know that it will be taken care of properly, because it will be short-lived.But I have seen many cases where people just don't have it in their conciousness why allocating huge arrays is a problem or why allocating a new Character object for every single character in a string might be bad. As soon as I point it out, they get it, but it's not like they thought of it while writing their algorithm.",
      "> Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.-Brian Kernighan.",
      "Memory bugs is an entire class of bugs that we have simply solved. If you use a language with a modern garbage collector (e.g. one that can handle cycles), you will very likely go an entire project without running into a single memory bug. To a first approximation, these bugs were not replaced with other bugs; they are simply gone. Further, we do not ask anything more of the programmer do accomplish this. Instead, we need the programmer to do less work than they would need to do with manual memory management.That is not to say that garbage collection is an unambigous win. There are real downsides to using it. But for most programs, those modern garbage collectors are good enough that those downsides just don't matter."
    ],
    "link": "https://stevenharman.net/so-we-have-a-memory-leak",
    "first_paragraph": "It Depends\u2122, as a Service. Maker & breaker of things. Software spelunker. Good at naps. he/him"
  },
  {
    "title": "Adam Curtis on the dangers of self-expression (2017) (thecreativeindependent.com)",
    "points": 119,
    "submitter": "greenie_beans",
    "submit_time": "2024-05-11T02:16:55",
    "num_comments": 83,
    "comments_url": "https://news.ycombinator.com/item?id=40325542",
    "comments": [
      "I follow the contemporary art world pretty closely, and a feeling I often get is that it's merely a giant collection of individuals expressing themselves in a way that fits into the market system of galleries, museums, auctions, etc. There are of course artists focused on political causes, but for the most part it is entirely devoid of any centralized ethos or ideal.While this situation is freeing for the individual artist, I can't help but look at previous eras \u2013 say, the Italian Renaissance, or the high point of Ottoman miniature painting [1] \u2013 and admire the lack of complete self-expression. Instead, you had a much narrower focus of acceptable work and topics, with the result that artists were all engaged with basically the same art forms and the same topics, across the entirety of the artistic community. For example, both da Vinci and Raphael were painting Madonnas [2], whereas today you'd certainly never have two world-famous painters in direct competition working on the same type of painting \u2013 because their value is determined by their individuality and self-expression, not their expertise/skill.This is a widespread post-modern culture thing and not limited to art, of course, and probably won't go away for a long, long time, or at least until you get a massive society-wide idea like Christianity to take root again.1. The book \"My Name is Red\" by Orhan Pamuk is all about this. Great book. https://en.m.wikipedia.org/wiki/My_Name_Is_Red2. https://en.wikipedia.org/wiki/Madonna_(art)",
      "The \u201cart world\u201d is wildly divorced from the tastes of the majority of people in society - one could uncharitably but not inaccurately characterise the modern art world as a means to arrange for low cost materials to be purchased for vast sums in tax advantageous ways.If we look at an art form where there is a lot of validation by the majority of people, tv and films, we see people \u201cpainting the same thing\u201d all the time because that\u2019s what the \u201czeitgeist\u201d is interested in500 years ago there were very few books and the west European zeitgeist was mostly the bible anyway.",
      "This. The modern art world is predominantly a tax evasion and racketeering scheme, designed to transfer assets outside the influence of national and international law.",
      "How does it work? And what\u2019s the evidence that this is true? People love to say this but I\u2019ve never seen anyone go beyond the surface on the took. The impression I get is it\u2019s mostly people who don\u2019t know what they\u2019re talking about repeating a pleasing idea.",
      "If feel that with Youtube you get a touch of the Zeitgeist.  There are some milquetoast channels like 'Hoovie's Garage', 'Rich Rebuilds', that tap into what average people are interested in watching.You can also see the small changes in the medium;  everybody at once adopting click-bait titles once one person was successful with it.  As soon as a channel gets some success like 'Hand Tool Restoration' then everyone starts doing the same thing.",
      "If anyone reading this likes handtool restoration but has not come across the \"my mechanics\" channel, you have to check it out!I agree with your assessment, but would add that sometimes fads popularize people with such skill and attention to detail that their success is well deserved. My Mechanics is one of those cases.",
      "> you had a much narrower focus of acceptable work and topics, with the result that artists were all engaged with basically the same art forms and the same topics, across the entirety of the artistic community. For example, both da Vinci and Raphael were painting MadonnasMightn't this have to do with the fact that most paintings back then were commissioned by rich clients, who were probably competing with each other in some way? \"Aha, my painting of Madonna is better than yours!\" sort of thing(I know nothing about art history, so I'd be happy to learn why this is silly :P)",
      "That might have been a part, but it's more that the idea of self-expression as the prime value in art is mostly a 20th century thing. The falling off of skill, realism, and other similar metrics is also a 20th century thing and largely came from photography and mass manufacturing. There's probably an essay or book out there covering the two intertwining topics, but I can't think of any offhand.It's also worth noting that artists themselves were more directly competitive. Da Vinci and Michelangelo had a bit of a rivalry, for example:https://artrkl.com/blogs/news/art-history-feuds-michelangelo...https://www.historyextra.com/period/renaissance/leonardo-mic...You can't really imagine this happening between top contemporary artists today. \"Gerhard Richter says he's a better painter than Takashi Murakami,\" is a headline that wouldn't make much sense.",
      "The way I think about it is high art is considered innovative for its time.By the time of the advent of photography, the skills of realistic painting had been fully fleshed out. Aside from the ultra-realism movement, there was no where left to go, hence turning inward w/ impressionism forward.As modernism progressed, the avenues left to explore seem to get increasingly wild and crude in an effort to say something different... seemingly all that's left now for modern art is to share some unique perspective of the world, the rougher the medium, the better. Marcel Duchamp's Fountain is spectacular to me because it really called where it was all ending up.",
      "Those are not good sources. Anything more reliable on this?"
    ],
    "link": "https://thecreativeindependent.com/people/adam-curtis-on-the-dangers-of-self-expression/",
    "first_paragraph": "Here's a space to search our entire website."
  },
  {
    "title": "Why you can hear the temperature of water (nytimes.com)",
    "points": 166,
    "submitter": "mhb",
    "submit_time": "2024-05-10T11:22:34",
    "num_comments": 113,
    "comments_url": "https://news.ycombinator.com/item?id=40317629",
    "comments": [
      "This is something I noticed as a kid. We had a creek in our backyard, which,depending on the temperature the water would be louder or quieter. This annoyed our dog, which after a number of times caused me to notice. Running water is louder and much more sharp when it's cold out, and quieter and muffled when it's hot out. In the same way sounds are louder in a colder environment because there's already a low level of ambient energy contained in the air and so the energy disperses much more readily but dissipates much more quickly. Essentially a difference between a quick \"crack\" and a lingering \"whump\" in terms of auditory impact. This effect also propagates to solid materials, as cold metals and ceramics transmit sound better than warm ceramics or metals. A church bell quite literally is louder on a cold winter's day.",
      "There is nothing like a small waterfall in a deep snow on a snowy day. All other sound is muffled by the snow cover and further dampened by the falling snow.But the creek will ring like a bell. You can't hear it until you're almost on top of it. It's higher pitched, and will almost always have a tempo based on the shape of the bed of the falls.There's a waterfall on our farm. It plays music in January. It's amazing, and no one believes me.",
      "Thank you for the great anecdote and explanation, it was fun an very illustrative to visualize the concepts while reading your comment",
      "The video is also excellent.https://youtu.be/9w3Zl3KBDpI",
      "The intro was hilarious! Thank you :)",
      "Could the audible difference be related to varying sound propagation through hot/humid vs cold/dry air?",
      "I don't think so. If I pour hot water into a mug from the kettle, it sounds different with cold water with all the same equipment, room etc",
      "That doesn't surprise me at all.  I can tell hot water from cold by how it looks when you pour it, (steam aside).",
      "That's my feeling as well. I can hear when the hot water has reached my shower.",
      "I hear the same with my shower, but I'd wager most of the change in sound would be to do with pressure change between the hot and cold source."
    ],
    "link": "https://www.nytimes.com/2024/05/09/science/hot-water-sound-cold.html",
    "first_paragraph": ""
  }
]