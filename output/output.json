[
  {
    "title": "Novo Nordisk's Canadian Mistake (science.org)",
    "points": 233,
    "submitter": "jbm",
    "submit_time": "2025-10-19T20:39:13 1760906353",
    "num_comments": 111,
    "comments_url": "https://news.ycombinator.com/item?id=45637744",
    "comments": [
      "> Prof. Michael Hoffman from Toronto put me on to the Canadian Patent Database, where you can find that Novo did file a patent there for semaglutide. . .but the last time they paid the annual maintenance fee on it was 2018!> You can even find a letter where their lawyers send a refund request for the 2017 maintenance fee ($250) because Novo apparently wanted some more time to see if they wanted to pay it.> On the same date in 2019, the office sent a letter saying that \u201cThe fee payable to maintain the rights accorded by the above patent was not received by the prescribed due date. . .\u201d> By that time it was $450 with the late fee added, but that was apparently too much for Novo. They had a one year grace period to make it up, and apparently never did, so their patent lapsed in Canada. And as the Canadian authorities remind them, \u201cOnce a patent has lapsed it cannot be revived\u201d.Impressive failure for \"the second-largest semaglutide market in the world.\"reply",
      "I always wonder-in this case of such an epic company fuck up, does anyone ever get fired? Or is responsibility so diffuse that nobody is ultimately responsible?Pharma companies are really nothing more than holders of time-limited, expensive, exclusive IP. The number one priority should be to maintain those protections as long as possible. How could any patent be allowed to lapse, even if there was limited commercial value, let alone, a blockbuster drug making billions?reply",
      "Typically when people get fired for something like this they are just the scapegoat.A failure like this isn't just one dude forgetting, its a system failure where policies and checks failed. If it is solely up to one person that is a failure in and of itself.reply",
      "Some people, including legal experts, claim it could have been intentional: https://www.legal.io/articles/5691258/Novo-Nordisk-Lets-Cana....I was surprised Science didn't discuss this option. However, reader comments in Science do comment on this possibility.The idea is that letting the patent lapse would avoid getting regulated by the Patented Medicine Prices Review Board.I know several people working at NN, and it's quite chaotic and political, so I wouldn't rule out an internal oversight.reply",
      "Just FYI, this isn't \"by Science\", it's by Derek Lowe, this is his  blog, which is hosted on Science>Commentary>Blogs. In its description, Lowe says it is \"editorially independent\".reply",
      "Given how much of a blockbuster drug it is, wouldn't it be worth it for generics to rerun the trials in this specific case?reply",
      "> If it is solely up to one person that is a failure in and of itself.I would agree. The so-called bus factor has been common knowledge in the industries in question for literal decades now.https://en.wikipedia.org/wiki/Bus_factor> An early instance of this sort of query was when Michael McLay publicly asked, in 1994, what would happen to the Python language if Guido van Rossum were to be hit by a bus.http://legacy.python.org/search/hypermail/python-1994q2/1040...reply",
      "The process for the patent to lapse in Canada is quite long, and you get warning letters once deadlines are close.There is also a possibility of a paying a late fee and, finally, there is also a reinstatement process.NN could have missed all these, but they would have to be a really dysfunctional organization. Definitely not a low bus-factor situation.reply",
      "I wasn\u2019t casting aspersions on NN, but jumping off from the allusion that was made by the user who I replied to.I don\u2019t know what kind of sequence of events could lead to this outcome at NN, but perhaps they were hoist by their own petard. I\u2019m reminded of the \u201cmoney on the ground\u201d joke involving two economists, which is semi-famous in these parts.To wit:> Economist 1: Look, there\u2019s $20 on the ground!> Economist 2: No there isn\u2019t. If there were, someone would have picked it up already.https://slatestarcodex.com/2014/06/19/money-on-the-ground/https://news.ycombinator.com/item?id=28029044Perhaps the folks at NN are so busy picking up (billions of) dollars that they neglect the dimes on the ground that it would cost to comply with these seemingly trivial, even menial functional requirements of keeping their money printer running.I\u2019m honestly as befuddled by this brouhaha as anyone. This is a monumental failure of multiple entire business units to perform the core competencies of their jobs. That said, I could honestly believe that the number of people whose job it is (or perhaps was) to worry about the patent expiry at all, let alone be aware of the repeated communiques from the Canadian patent office, is quite low. I would further believe that the accountability dodging has only just begun behind closed doors, if the internal game of megacorporate musical chairs hasn\u2019t already concluded well before this news broke and reached the shores of HN.reply",
      "Even at large corps, it's fairly common to outsource IP work to law firms that specialize in IP - and if you're Danish, it might make sense to outsource to a Danish law firm that has its own worldwide IP contacts (rather than getting your own worldwide branch offices to handle local IP laws everywhere). One of said contacts might then pawn off the work onto a junior, who then has their assistant handle all communiques from CIPO. Said assistant could then entirely drop the ball.I've zero idea about anything specific to Novo Nordisk, but have enough exposure to IP in Canada to envision the above happening in other cases.reply"
    ],
    "link": "https://www.science.org/content/blog-post/novo-nordisk-s-canadian-mistake",
    "first_paragraph": ""
  },
  {
    "title": "Original C64 Lode Runner Source Code (github.com/piddewitt)",
    "points": 62,
    "submitter": "indigodaddy",
    "submit_time": "2025-10-19T22:13:21 1760912001",
    "num_comments": 20,
    "comments_url": "https://news.ycombinator.com/item?id=45638514",
    "comments": [
      "Look at the subroutine `EnemyMoveGetMaxRowBot` starting at line #9353. On #9414 the data row pointer is set to the enemy's current row. On #9441 it checks if the column to the left is a pole. On #9516 it checks if the column to the right is a pole. Now notice that on #9461 the row pointer is moved to the row below so it can check for a walkable tile (brick or ladder). When the right-side check is done after a left-side check the row pointer will be on the wrong row.Here it is in C (from my own notes)    SetCurrentRow1(y);\n    if (CURROW1[x] != 0) {\n        if (x != 0) {\n            if (CURROW1[x-1] == 4) {\n                TargetY = y;\n                if (y >= PlayerY)\n                    return y;\n            } else {\n                SetCurrentRow1(y+1);\n                if (CURROW1[x-1] == 1 || CURROW1[x-1] == 2 || CURROW1[x-1] == 3) {\n                    TargetY = y;\n                    if (y >= PlayerY)\n                        return y;\n                }\n            }\n        }\n        if (x < 27) {\n            if (CURROW1[x+1] == 4) {\n                TargetY = y;\n                if (y >= PlayerY)\n                    return y;\n            } else {\n                SetCurrentRow1(y+1);\n                if (CURROW1[x+1] == 1 || CURROW1[x+1] == 2 || CURROW1[x+1] == 3) {\n                    TargetY = y;\n                    if (y >= PlayerY)\n                        return y;\n                }\n            }\n        }\n    }\n\nThe bug can be seen on level 29 if you stand on the left set of blocks that has a single gold in it. The enemies will get stuck on the second ladder which has a pole on the right side.The Apple II, Atari 8-bit, Commodore 64, and naturally the VIC-20 versions of the game have this bug since they were all made by Broderbund. But interestingly so does the Hudson Soft NES port. The later Macintosh version, which is otherwise a direct port of the Apple II code, fixed it. The IBM-PC version didn't have this bug because it was rewritten with the memory layout column-ordered instead of row-ordered. But then introduced a similar bug by subtracting when it should be adding.(edit: I hadn't checked until just now but I'm amused to find that Lode Runner Legacy from 2017 preserved this bug in the classic game mode.)reply",
      "Just wanted to note: this is in no way the original source code for the game. It's disassembled and commented source code.Here is the repository owner explaining the process himself: https://github.com/Piddewitt/C64-Game-Source-CodeNice work and interesting still, but maybe we can correct the title?reply",
      "ehh, for these old games that's pretty close to the same thing.A lot of old games were written in assembly.  The difference between the disassembled and assembled code is/was pretty minimal.What you ultimately lose out on is the comments and perhaps jump location names depending on the assembler.reply",
      "This can't be the original source code.https://github.com/Piddewitt/Loderunner/blob/main/Lode%20Run...Original source, I imagine, would be very tersely commented, if only to fit in memory / floppy, and would have very short variable and subroutine names, and lots of mess and commented-out lines from experiments.This looks like a very lovingly done disassembly.reply",
      "From the repository's README:  Commented source code of the C64 Lode Runner Game - Including the copy protectionreply",
      "This doesn't say who commented it and where the source code comes from.reply",
      "Another comment by krajzeg points to this repository for more context: https://github.com/Piddewitt/C64-Game-Source-Codereply",
      "For anyone curious, the draw a circle code in Circle.asm appears to use Bresenham's circle drawing algorithm.https://www.geeksforgeeks.org/c/bresenhams-circle-drawing-al...The secret is to draw 1 arc of a 45 degree angle and the reflect it (redraw it with different coordinates).reply",
      "I just went to a talk at Portland Retro Game Festival by the dutch guy that made an official Atari Lode Runner port. He said he found a japanese book that had the C source in it and got the enemy AI from that.This is pretty cool.reply",
      "this is a great remake of the Load Runner follow up, Mad Monks Revenge. it works amazing on a modern macOS!https://mmr.quarkrobot.com/reply"
    ],
    "link": "https://github.com/Piddewitt/Loderunner",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Original C64 Lode Runner Source Code\n       There was an error while loading. Please reload this page.\nThere was an error while loading. Please reload this page.Commented source code of the C64 Lode Runner Game - Including the copy protection\n        Original C64 Lode Runner Source Code\n       There was an error while loading. Please reload this page.\nThere was an error while loading. Please reload this page."
  },
  {
    "title": "QuickDrawViewer: A Mac OS X utility to visualise QuickDraw (PICT) files (github.com/wiesmann)",
    "points": 21,
    "submitter": "ibobev",
    "submit_time": "2025-10-19T23:35:25 1760916925",
    "num_comments": 6,
    "comments_url": "https://news.ycombinator.com/item?id=45638966",
    "comments": [
      "Opened a few PICT files I threw at it.Looking for an Export\u2026 item but did not see that. I suppose one reason to open an old PICT file is to save it as a PNG or something that will be easier to open in the future.reply",
      "Given that PICT is a vector format at heart, what'd be ideal would be a conversion to SVG. At one point I had part of a tool written to do that, but it didn't handle text very well.reply",
      "Is it a vector format? It could capture pixels as well, and patterns.It is, in one variant anyway, a re-playing (capture) of the QuickDraw drawing commands. It is one reason it is a hard format to decode without having the original Mac Toolbox QuickDraw code handy.reply",
      "PICT supported vector commands like FrameRect and FillOval, bitmap commands like BitsRect, and even embedded PostScript via PicComments.Version 1 PICTs: https://show.docjava.com/posterous/file/2012/07/9614411-DOC0...I have the Version 2 documentation around here somewhere. I don't think I've looked at it in 20 years, though.reply",
      "I just opened a PICT file in Preview on Mac and it also offers PDF export. What's the advantage of using this app?reply",
      "> What's the advantage of using this app?From the README:> Preview can only open a small subset of the files I have.reply"
    ],
    "link": "https://github.com/wiesmann/QuickDrawViewer",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n           There was an error while loading. Please reload this page.\nThere was an error while loading. Please reload this page.\n        A Mac OS X utility to visualise QuickDraw (PICT) files. It allows exporting to PDF format. \n       There was an error while loading. Please reload this page.\nThere was an error while loading. Please reload this page.I wanted to teach myself Swift programming, and needed something a bit more involved than just Hello World, so I decided the write a program that would decode QuickDraw image files and display them. This was basically a rewrite of the Java Quickdraw code I wrote, many years back.This program is functional, although there are many rendering edge cases and the UI is a bit rough and the code could certainly be improved.\nI originally decided to release it for the 40th anniversary of the original Macintosh com"
  },
  {
    "title": "Doing well in your courses: Andrej's advice for success (2013) (stanford.edu)",
    "points": 374,
    "submitter": "peterkshultz",
    "submit_time": "2025-10-19T16:31:57 1760891517",
    "num_comments": 123,
    "comments_url": "https://news.ycombinator.com/item?id=45635533",
    "comments": [
      "I have a tip for following lectures (or any technical talk, really) that I've been meaning to write about for a while.As you follow along with the speaker, try to predict what they will say next. These can be either local or global predictions. Guess what they will write next, or what will be on the next slide. With some practice (and exposure to the subject area) you can usually get it right. Also try to keep track of how things fit into the big picture. For example in a math class, there may be a big theorem that they're working towards using lots of smaller lemmas. How will it all come together?When you get it right, it will feel like you are figuring out the material on your own, rather than having it explained to you. This is the most important part.If you can manage to stay one step ahead of the lecturer, it will keep you way more engaged than trying to write everything down. Writing puts you one step behind what the speaker is saying. Because of this, I usually don't take any notes at all. It obviously works better when lecture notes are made available, but you can always look at the textbook.People often assume that I have read the material or otherwise prepared for lectures, seminars, etc., because of how closely I follow what the speaker is saying. But really most talks are quite logical, and if you stay engaged it's easy to follow along. The key is to not zone out or break your concentration, and I find this method helps me immensely.reply",
      "This is fun to do during lectures but in my experience only about 5-10% of my learning happened in math class. The other 90% happened at home as I worked through the problem sets.Essentially the lectures served as an inefficient way of delivering me a set of notes which I\u2019d then reference during homework sessions. I could often predict what was coming next in the lecture but the really hard parts were the key parts in some technical lemmas that were necessary to complete the theorem. Learning how to figure out a key step like that had to come completely on my own (with no spoilers).In a lot of ways, math lectures really started to turn into an experience similar to watching a Let\u2019s Play of a favourite video game. Watching those can tell you exactly what you need to do to get past the part where you\u2019re stuck but they don\u2019t in general make you better at video games. For that you need to actually play them yourself.reply",
      "The viewpoint of a lecture as an inefficient note delivery system is a pretty common and reductive view. Your \"Let's Play\" analogy was pretty apt though.I think their (potential) value seems pretty clear when you look at language courses -- you can't possibly hope to develop fluency in a language by studying it in isolation from books -- forming your own sentences and hearing how other human beings do the same in real time is pretty decisive.With math classes, YMMV, especially since they are rarely so interactive at the upper division and graduate level, but at the very least seeing an instructor talk about math and work through problems (and if you are lucky to have a particularly disorganized one, get stuck, and get themselves unstuck) can go a long way. But to be fair I regularly skipped math lectures in favor of reading too, hehreply",
      "I rarely skipped math lectures in university (only when the prof was really bad; but then I watched video lectures taught by a different prof from a previous term).The lectures in the hardest math classes I took did not feature any \u201cworking through problems.\u201d They were 50 minute pedal-to-the-metal proof speedrun sessions that took me 2-3 hours of review and practice work to fully understand. I don\u2019t know how anyone can see a lecture like that and not see it as an inefficient note delivery system.I did have math classes where profs worked through problems but those were generally the much easier applied math classes. Those were the ones I least needed to attend lectures for because there you\u2019re just following the steps of an algorithm rather than having to think hard about how to synthesize a proof.For language learning it\u2019s hard to beat full immersion. When we learn our first language (talking to our parents as children) we don\u2019t learn it by theory (memorizing verb conjugations), we learn it by engaging the language centre in our brains. I think language classes are more useful if you want to learn to write and translate in that language, where you need a strong theoretical background. If your main goal for language learning is being able to speak with loved ones or being able to travel and speak fluently with locals, then sitting in a classroom listening to a lecture seems like a very difficult way to do that.reply",
      "I consider the value in math lectures to come from the speaker\u2019s explanation of why to expect certain things. Is this an obvious fact in another context, rewritten for this application? Is this a surprise? What reasons besides the rigorous argument are there for believing the theory?reply",
      "A lot of the theorems I learned in school weren\u2019t particularly amenable to intuitive explanations like that.For example, take Galois theory. The fact that a polynomial\u2019s solvability by radicals depends on the solvability of its Galois group is surprising and not intuitive at all. The fundamental theorem of Galois theory is a very technical result utilizing purpose-built mathematical structures that were developed specifically to study the solutions of polynomial equations.reply",
      "I had a math professor in college that would often say to our class, \"You cannot be like Michael Jordan by just watching Michael Jordan. If you want to be better at basketball, you have to practice. Math is no different.\" No matter how you spin it, he was correct -- unless you are like Ramanujan and a Hindu god just reveals a solution to you.Honestly though, I believe I learn better in a similar manner to what you described. I would rather just read the textbook and learn on my own. I find that to be a far more efficient learning style for me. However, I typically always went to class for a handful of reasons:1. To signal that I cared about the subject to the professor (whether I honestly cared or not). Though I had some classes that actually penalized a lack of attendance.2. There is comradery in group struggle. It was nice way to meet other students that had a common goal. I made many friends during my time. Some of which I still keep in touch with a decade later. In fact, I met my SO in one of my classes -- all because we studied together.3. The main reason being, I paid for the class, and I wanted to get my money's worth out of it. While passing the course and learning the material was the goal. I'd hate knowing I just paid to teach myself everything. I could have done that for free, so I wanted something more out of the deal.One of thing I should add is that I am poorly disciplined and have poor executive functioning, so I probably picked up more in class that I would admit -- I didn't have a control to compare against. Still to this date, I rely heavily on solutions to the problems. Not in a way that allows me to cheat, but I would likely be unable to be certain I was teaching myself correctly if I didn't have the answers or know of a method to verify my work. I am confident that I cannot be confident in my answers to nearly anything. I am prone to too many mistakes.If one goes far enough in math, one will encounter solutions where there are not clear answers and one must use all of their knowledge and abilities to support their answers. And that my YN friends, is why I am not a mathematician despite my love for the subject.reply",
      "- I find that writing notes in class helped me learn just through the physical action of my hands. (I think there is some formal study of this as a phenomenon).   I am poorly disciplined so at least getting that hour or so of writing notes is probably more than I would have managed alone.- In class, sometimes the lecturer provides helpful intuition for something through informal speech or even intonation.  For example I struggled with the concept of ergodicity from a textbook until I saw someone explain it to me like I'm 5.  I find that often, textbooks are like man pages, in that they are almost afraid to provide informal/intuitive writing for fear of appearing unserious.p.s. if ChatGPT existed 30 years ago I would have managed to learn so much more instead of spinning wheels on dry writing.  ChatGPT is really good at being a \"personalized manpage explainer\"reply",
      "Agree with this comment but follow up to this tip:Only use this as a learning technique. Do not accidentally let this bleed over into personal 1:1 conversations.I know some people in my life who are \"smart\" and they will cut people off in the middle of conversation to the effect of \"oh yeah I already know what you are going to say, let me go ahead and cut you off so I can respond faster\".On top of being completely obnoxious on the face of it, they are wrong enough times in their predictions to where it completely fucks the conversation.reply",
      "I take it you are not a member of the Church of Interruption[0] then.https://sambleckley.com/writing/church-of-interruption.htmlreply"
    ],
    "link": "https://cs.stanford.edu/people/karpathy/advice.html",
    "first_paragraph": "a guide by Andrej KarpathyHere is some advice I would give to younger students if they wish to do well in their undergraduate courses.\n\r\n  Having been tested for many years of my life (with pretty good results), here are some rules of thumb that I feel helped me:\nAll-nighters are not worth it. \nSleep does wonders. Optimal sleep time for me is around 7.5 hours, with an absolute minimum of around 4hrs.\r\n  It has happened to me several times that I was stuck on some problem for an hour in the night, but was able to solve it in 5 minutes in the morning. I feel like the brain \"commits\" a lot of shaky short-term memories to stable long-term memories during the night. I try to start studying for any big tests well in advance (several days), even if for short periods of time, to maximize the number of nights that my brain gets for the material.\r\n\r\n  Attend tutorials or review sessions.\r\n  Even if they are bad. The fact that they get you to think about the material is what counts. If its too bo"
  },
  {
    "title": "Duke Nukem: Zero Hour N64 ROM Reverse-Engineering Project Hits 100% (github.com/gillou68310)",
    "points": 82,
    "submitter": "birdculture",
    "submit_time": "2025-10-19T20:54:31 1760907271",
    "num_comments": 26,
    "comments_url": "https://news.ycombinator.com/item?id=45637880",
    "comments": [
      "It's 100% decompiled to C, but not fully labelled yet. That means there's lots it's auto-generated names all over the place. It would be interesting to see someone try to port it now though.reply",
      "Would LLMs be good at labelling, or would the risk of false-positives just waste more time than it saved?reply",
      "I wish someone ran a proper study. In my experience it helps mark some patterns you may not be immediately familiar with, like CRC functions/tables. It also does a good job where no thinking is required, like when you have partial information: \"for(unk=0; unk<unk2; unk++) { unk3=players[unk]... }\" - you know what the names are, you just need to do the boring part. For completely unknown things, it may get more interesting. But I know I'd like to at least see the suggestions. It's a long and boring work to decompile things fully.reply",
      "Gillou68310 looks to have been a one person army for 99% of it, what an impressive show of dedication.The Legend of Zelda: Twilight Princess has been getting farther along as well https://decomp.dev/zeldaret/tpreply",
      "Would really like to know what makes a person (or group of people) invest the time and energy to do this?  Is there a group of hobbyist gamers who work on titles they love?  Is it about digital conservation?reply",
      "I've spent a lot of time reverse-engineering vintage synthesizer firmware (which is a bit simpler than modern games). I did complete end-to-end annotations of these two vintage synth ROMs:- https://github.com/ajxs/yamaha_dx7_rom_disassembly\n- https://github.com/ajxs/yamaha_dx9_rom_disassemblyIt started because I was just curious about how these devices actually worked. In the end I learned a lot of really invaluable skills that really broadened my horizons as an engineer. I got a chance to talk to a handful of incredibly smart people too. The actual work can be a lot of fun. It's like piecing together a really large and technical jigsaw puzzle. In my case, it also led to me being able to release a fun firmware mod: https://github.com/ajxs/yamaha_dx97In case anyone is curious about how I worked, I wrote a bit of a tutorial article: https://ajxs.me/blog/Introduction_to_Reverse-Engineering_Vin...It can be a bit analogous to archaeology too. Even though in my case the DX7 is only 42 years old, that was an aeon ago in computing terms. You gain a bit of insight into how different engineers used to design and build things. Even though development for the N64 is fairly recent, from memory the console had some interesting constraints that made development tricky.reply",
      "Maybe they just really love the game. This is a form of tribute.I too have a beloved video game from my childhood: Mega Man Battle Network 2. That game changed my life. I learned English and became a programmer because of it. I have two physical copies of it in my collection, one of them factory sealed.Sometimes I open the game in IDA and try to reverse engineer bits and pieces of it. I just want to understand the game. I don't have the time, the dedication or even the low level programming knowledge that these badass folks in the ROM hacking community have, but I still try it. Because I love the game.reply",
      "I guess you\u2019ve never kicked ass and chewed bubble gumreply",
      "In addition to those categories, speedrunning glitch hunters tend to gravitate to participating in these projects as well. E.g. the Twilight Princess decomp was started primarily by and for the speedrunning community.reply",
      "It's also the endgame for romhacking, once a game is fully decompiled modders can go far beyond what was feasible through prodding the original binary. That can mean much more complicated gameplay mods, but also porting the engine to run natively on modern platforms, removing framerate limits, and so on.reply"
    ],
    "link": "https://github.com/Gillou68310/DukeNukemZeroHour",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        A decompilation of Duke Nukem Zero Hour\n       There was an error while loading. Please reload this page.\nThere was an error while loading. Please reload this page.A decompilation of Duke Nukem Zero Hour for N64.Note: To use this repository, you must already own a copy of the game.The build instructions assume that you will be using Ubuntu 20.04; either natively or via WSL2.Package requirements can be install via:Tools requires Python 3.8+. Package requirements can be installed via:Clone the repository; note the --recursive flag to fetch submodules at the same time:Navigate into the freshly cloned repoPlace the Duke Nukem Zero Hour US ROM in the root of this repository, name it baserom.us.z64, and then run the first make command to extract the ROM:Now build the ROM:If you did everything correctly, you'll be greeted with the followin"
  },
  {
    "title": "Airliner hit by possible space debris (avbrief.com)",
    "points": 201,
    "submitter": "d_silin",
    "submit_time": "2025-10-19T17:54:21 1760896461",
    "num_comments": 103,
    "comments_url": "https://news.ycombinator.com/item?id=45636285",
    "comments": [
      "There are some other pictures circulating showing the exterior of the aircraft. It definitely appears something hit the aircraft. There is a skid mark on the frame around the window.[1]Will be interesting to read if an investigative report is made public.[1]https://viewfromthewing.com/new-cockpit-photos-may-show-what...reply",
      "anyone know why these photos have random paperclip/clippy icons?reply",
      "Probably OPs\u2019 version of watermark..?reply",
      "Interesting, that link says it might just be hail.reply",
      "A lot doesn't add up from that article though. The writer mentions the window in question is the Captain's window. From the pictures, it appears to be the First Officer's window. Also, the writer mentions pock marks consistent with hail damage in other areas of the aircraft but I haven't found any images substantiating that.Hail is absolutely the most probably explanation, the article points to two other instances with similar outcomes. I think the doubt comes from the lack of evidence of hail or convective activity or other hail damage on the aircraft. Also, the pilot reportedly said he saw something coming at the aircraft.reply",
      "Most journalists are pretty bad when it comes to covering aviation so I wouldn\u2019t put much weight on the discrepancies. Half the time they can\u2019t tell the difference between a jet and a Cessna 172. Seriously.reply",
      "Reminds me of this gem:https://i.pinimg.com/736x/6d/79/e9/6d79e9982b92c476e1d671f31...reply",
      "Speculation-free facts: https://avherald.com/h?article=52e80701https://www.flightaware.com/live/flight/UAL1093/history/2025...reply",
      "Interesting that there's been a bird strike at that altitude before (per the comments in avherald). I didn't know birds flew that high.reply",
      "Go for a scroll up https://neal.fun/space-elevator/reply"
    ],
    "link": "https://avbrief.com/united-max-hit-by-falling-object-at-36000-feet/",
    "first_paragraph": "Authorities are now considering whether a falling object, possibly from space, caused damage to the windshield and frame on a United 737 MAX over Colorado on Thursday. Various reports that include watermarked photos of the damage suggest the plane was struck by a falling object not long after taking off from Denver for Los Angeles. One of the photos shows a pilot\u2019s arm peppered with small cuts and scratches. In his remarks after the incident, the captain reportedly described the object that hit the plane as \u201cspace debris,\u201d which would suggest it was from a rocket or satellite or some other human-made object. Some reports say it was possibly a meteorite.Whatever hit the plane, it was an enormously rare event and likely the first time it\u2019s ever happened. The plane diverted without incident to Salt Lake City where the approximately 130 passengers were put on another plane to finish the last half of the 90-minute flight. Apparently only one layer of the windshield was damaged, and there wa"
  },
  {
    "title": "Dosbian: Boot to DOSBox on Raspberry Pi (cmaiolino.wordpress.com)",
    "points": 102,
    "submitter": "indigodaddy",
    "submit_time": "2025-10-19T19:26:54 1760902014",
    "num_comments": 38,
    "comments_url": "https://news.ycombinator.com/item?id=45637133",
    "comments": [
      "Whenever I see stuff like this, the ITX Llama [1], Pixel x86, etc. I think it's finally the time to build my ultimate love-letter to old school DOS and retro computing but always stop short because of the monitor issue.I feel like a lot of my nostalgia likely stems from the bright super low latency phosphor displays of a proper CRT. No amount of WebGL shaders/filters [2] ever quite seem to capture the original experience IMHO.[1] https://smallformfactor.net/news/retro-sff-itx-llama-is-a-br...[2] https://github.com/Swordfish90/cool-retro-termreply",
      "> \"[...] but always stop short because of the monitor issue.\"I always stop because of the case and target audience issue. I have no interest in a tower or a pizza box, but I wouldn't be able to resist a well-designed retro industrial workstation-specced x86 machine in a metal wedge-style computer case \u00e0 la Amiga 600.reply",
      "High-res high-refresh-rate OLEDs with modern shaders are getting close. Now somebody needs to make one that has a convex shape like an old CRT.I wish we'd reach a point where modern technology allows us to make new CRTs relatively easily. I don't even necessarily care about the image quality, the screens and TVs I used in my youth were never particularly good. But it doesn't seem that this will become feasible in the next few decades.reply",
      "> I wish we'd reach a point where modern technology allows us to make new CRTs relatively easily.I have 100% confidence that we are at this point, at least for monochrome tubes. Only color tubes would be more complicated.reply",
      "CRTs were only ever made sense to manufacture on a really big scale, so that costs could be reduced. Early tubes which weren't manufactured on such a scale were accordingly stupid expensive.I doubt anyone is going to spin up another factory to satisfy the potential demand, since the demand isn't that great to begin with (OLED satisfies most use-cases that CRTs do), and very few people are going to pay $5000+ for a new CRT, and I doubt they're going to be any cheaper than that.reply",
      "Can\u2019t you still just use a real CRT? Or is it then just back to the latency question?reply",
      "Who's spreading that CRT latency thing? Latencies for CRTs are in nanoseconds.reply",
      "CRTs wear out with use, so they're only getting rarer by the day. The electronics can mostly be fixed, but the tubes can't. You can extent their lives a bit, but you're only delaying the inevitable. When it's gone (too low brightness, burn-in, bad focus), there's nothing that can be done about it to get it back to the way it was when it was new.reply",
      "That's almost true, but just almost. Behold: https://colorvac.de/service/reply",
      "Every small city used to have a repair shop that could fix them.reply"
    ],
    "link": "https://cmaiolino.wordpress.com/dosbian/",
    "first_paragraph": "WHAT\u2019S NEW IN VERSION 3.0Incredible performances expecially with Raspberry Pi 5/500, Dosbian V3.0 guarantees you an incredible DOS experience.Rewritten from scratch starting from the new Bookworm OS for Raspberry Pi, Dosbian is the first distro totally dedicated to the DOS world. It boots straight to Dosbox, from there, you can install whatever you want and building your retro-pc \ud83d\ude42Whether you love DOS games or you\u2019re just fond of all the DOS retro software, this is the distro for you.Just switch on your Raspberry Pi and in few seconds your Dos prompt will be ready to use. No configuration needed, just an old school command like based machine to enjoy!What you can do with your Dosbian distro:Example games running on DosbianSome software Dosbian is able to runDosbian is a donationware project, this means you can modify, improve, customise it as you like for your own use.Join the official Facebook group, a place where you can meet other friends and discuss about games, configurations, iss"
  },
  {
    "title": "Gleam OTP \u2013 Fault Tolerant Multicore Programs with Actors (github.com/gleam-lang)",
    "points": 29,
    "submitter": "TheWiggles",
    "submit_time": "2025-10-19T22:25:46 1760912746",
    "num_comments": 4,
    "comments_url": "https://news.ycombinator.com/item?id=45638588",
    "comments": [
      "IMHO the actor model is great until you need to share something across processes, then you have a distributed computing problem inside your program.For developing fault tolerant multicore programs I think I'm better off using a functional effects system with software transactional memory like Scala/ZIO than Gleam/OTP.  I can still use the actor model where appropriate.  Plus the JVM software ecosystem and runtime observability / battle-testedness is far better than BEAM.reply",
      "In Elixir/Gleam/OTP.., the entire program is a collection of progresses which are isolated from each other. Even if you don\u2019t implement the actor pattern, passing state between processes and coordinating is a solved problem. We have primitives like tasks, agents, GenServer, Supervisors etc.reply",
      "I just started a small project using gleam / lustre, and so far I\u2019m loving it.Worth trying if you\u2019re on the fence, especially if you\u2019re into static types, no nulls, functional, ML type languages. Plus beam of course.reply",
      "Very cool! Looking forward to trying it out.reply"
    ],
    "link": "https://github.com/gleam-lang/otp",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n           There was an error while loading. Please reload this page.\nThere was an error while loading. Please reload this page.\n        \ud83d\udceb Fault tolerant multicore programs with actors\n       There was an error while loading. Please reload this page.\nThere was an error while loading. Please reload this page.Fault tolerant multi-core programs with OTP, the BEAM actor framework.\nGleam\u2019s actor system is built with a few primary goals:This library documents its abstractions and functionality, but you may also wish\nto read the documentation or other material on Erlang\u2019s OTP framework to get a\nfuller understanding of OTP, the problems it solves, and the motivations for its\ndesign.Not all Erlang/OTP functionality is included in this library. Some is not\npossible to represent in a type safe way, so it is not included. Other features\nare still in development, "
  },
  {
    "title": "What's Behind the Mysterious Ancient Wall in the Gobi Desert? (artnet.com)",
    "points": 18,
    "submitter": "derbOac",
    "submit_time": "2025-10-12T16:42:44 1760287364",
    "num_comments": 8,
    "comments_url": "https://news.ycombinator.com/item?id=45559573",
    "comments": [
      "I\u2019m guessing this is the source paper?> https://www.mdpi.com/2073-445X/14/5/1087>> This study challenges the perception of such structures as being purely defensive, revealing the Gobi Wall\u2019s multifunctional role as an imperial tool for demarcating boundaries, managing populations and resources, and consolidating territorial controlreply",
      "That article ends so abruptly and lacking anything you want to know (how was it used for non-defensive purposes?) that I almost wonder if it was written by AI. Hard to tell bad writers from computers anymore.reply",
      "I seem to remember reading somewhere that low walls like this weren't really about defense, they were about funneling travelers (with carts) to the tax collectors.reply",
      "What would the point be, in the Gobi desert?The structure of traveling through that is that you follow the silk road between a bunch of major cities built around oases. It's not necessary to divert anyone with walls - the fact that they need to drink, and that they won't be willing to wander off into the desert, get lost, and die, is sufficient. You don't move people to the tax collectors. You move the tax collectors to them.reply",
      "Does it exist? I could not find a wikipedia article about it. This Gobi Wall can not be a part of what is known as the Great Wall of China as it was built 5 centuries later, no? Can someone explain?reply",
      "The Great Wall is just part of a larger series of fortifications in eastern Central Asia. One of the others is the less studied Medieval Wall System (MWS). The gobi wall here is a few hundred kilometers of one of the individual walls within the MWS, which as the name suggests is within the gobi desert in the modern country of Mongolia.And just to preclude the usual follow-up, these walls probably weren't major defensive fortifications intended to keep out armies of nomadic raiders. Their primary function was closer to airport customs, visible outposts that reinforce the boundaries and laws of the state.reply",
      "Ontology in the 21st century: no wikipedia page means non-existence :-)reply",
      "So, what was it for? The article sparked my interest then just ended.reply"
    ],
    "link": "https://news.artnet.com/art-world/the-hunt-gobi-wall-mongolia-2674588",
    "first_paragraph": ""
  },
  {
    "title": "Deterministic multithreading is hard (2024) (factorio.com)",
    "points": 48,
    "submitter": "adtac",
    "submit_time": "2025-10-19T09:20:05 1760865605",
    "num_comments": 6,
    "comments_url": "https://news.ycombinator.com/item?id=45632976",
    "comments": [
      "if you haven't read the factorio devblog before, please do!after HN, it's one of my favourite places on the internet because i constantly learn new, random, insane things almost every time. imho it teaches you how to think + shows you what great engineering taste looks like. sorry if i'm overly effusive but each post is so deeply technical and well-written that i can't believe it's free.you don't need to know anything about factorio or gamedev btw (i don't), just pick a random number between 1 to 438 and start reading :)reply",
      "Yep FFF is such a treat to read. They do an amazing job of explaining complex problems and their solution in a way where anyone can understand.reply",
      "I used to say the same about the Eve Online dev blog, but at some point I stopped reading because they were creating an ad hoc, informally-specified, bug-ridden, slow implementation of half of Erlang.Concurrency is hard. Blizzard added progressively more and more concurrency over time to rescue orphaned resources assigned to a single shard that was undersubscribed while another shard in the same AZ was seeing flash mobs. But the way they documented it was more of a tea leaves situation. Only enough data to guess what they had done if you were familiar with the space.reply",
      "My favorite paper on it doing a clever workaround:https://github.com/emeryberger/dthreadsreply",
      "What\u2019s interesting to me about Prof Berger\u2019s work is that while many of his ideas are seemingly powerful and should be very impactful, it\u2019s underutilized in practice. I think that\u2019s because he\u2019s failed to figure out how to really make it easy to use and productized. For example, Coz should be the definitive tool and mechanism people use to do performance analysis. However because it\u2019s so hard to use and fails in various ways and is barely maintained if at all it ends up seeing limited use.It\u2019s a shame. The real world of development would be significantly richer if these ideas had better funding and dedicated long term development.reply",
      "Paper link (2011): https://people.cs.umass.edu/~emery/pubs/dthreads-sosp11.pdf>  DTHREADS works by exploding multithreaded applications into multiple processes, with private, copy-on-write mappings to shared memory... Experimental results show that DTHREADS substantially outperforms a state-of-the-art deterministic runtime system, and for a majority of the benchmarks evaluated here, matches and occasionally exceeds the performance of pthreads.reply"
    ],
    "link": "https://www.factorio.com/blog/post/fff-415",
    "first_paragraph": "\n\n  Hello,\n  While a lot of time of 2.0 development has been spent on new features and quality of life,\n  we still take care of the smaller details and technical improvements.\n\n\nDeterministic multithreading is hard\n\n  Recently a desync bug was reported to us involving the modding API and multiple Windows and Linux computers that the\n  player was using. My first instinct was to blame the mod developer for doing something wrong but I've seen enough bug\n  reports over the years to know dismissing one without first investigating is a bad idea and a great way to eat crow.\n\n\n  I could not reproduce the desync, but the player was able to with ease. At first I thought it was a Windows vs Linux issue\n  (we've had many of those), but then the player was able to reproduce it with Linux on both computers. Next I thought it\n  was a hardware problem, we've seen our share of faulty computers that just don't do what they're supposed to do.\n  Convincing someone their hardware is broken is difficult and"
  },
  {
    "title": "Compare Single Board Computers (sbc.compare)",
    "points": 104,
    "submitter": "todsacerdoti",
    "submit_time": "2025-10-19T18:02:00 1760896920",
    "num_comments": 45,
    "comments_url": "https://news.ycombinator.com/item?id=45636365",
    "comments": [
      "Benchmarks are alright but as an embedded engineer I first select a performance segment and then actually prioritize the hardware abilities and engineering support from the SoC manufacturer.Before getting into benchmarks I would actually look which hardware capabilities a specific SoC supports first (eDP, HDMI or LVDS, USB ports, i2c, GPIO pins etc). Then I would check whether the manufacturer actually maintains mainline Linux kernel drivers or keeps an up-to-date downstream kernel. I look at their frequency for updates. For media systems having HW acceleration is crucial. Most ARM vendors do a crappy job of providing good open source drivers for this.Similarly I go and check their Yocto BSPs. If I don't like their organization, that's going to affect my final decision. If it is a power-sensitive project, then the special modes and extra driver support for various sleeping modes come into play.(Most of the time Intel just wins with those criteria because ARM ecosystem is a mess of proprietary blobs. However there are manufacturers like NXP and MediaTek who do release passable drivers and when power consumption is important they get selected or if the product is very price-sensitvie)This website looks alright maybe for hobbyists for pure CPU loads with very well cooled systems. I don't find it very useful without the actual engineering details, adding those would massively benefit the website.reply",
      "I\u2019m interested in alternatives to Raspberry Pis right now and software support is a concern. Do you have any recommendations?reply",
      "Hey! So I was quite surprised to see my site posted on here so soon after hitting the \"go live\" button, and thanks for your comment.I wrote a blog post about why I made the site at https://bret.dk/introducing-sbc-compare/ if anyone's interested, but to TL;DR it, I didn't set out to create a site like this, it was a side quest after creating the automation and database to support my reviews, which do indeed focus on the hobbyist trying to explore Raspberry Pi SBCs and their many alternatives.I have full specifications and hardware capabilities hidden behind a feature flag at the moment as I'm working my way through adding all of that data (currently at 80 SBCs in the database, and I'm only adding those I own and have run tests on) so there should be something similar to what you're asking for soon. Thanks again!reply",
      "Thanks for your great work! I would love to be able to search by processor (eg look for all boards with an iMX95, for example) as well as search for things like audio I/O channels, I2C pins, etc. Super useful website!reply",
      "After that, have a look at pcpartpicker.com, motherboards section. They have feature selectors, like number of usb ports, power connector type and so on. Very useful to find boards.reply",
      "Feature request: if the cells in a row are all identical, either exclude the row, de-emphasize it, or merge the cells so it's visually apparent that they're all the same.Example: Raspberry Pi 4 vs Raspberry Pi 5 (https://sbc.compare/9-raspberry-pi-4-2gb/14-raspberry-pi-5-4...). Architecture is ARM. But it's repeated for each column, which makes the reader have to look carefully at each cell to see whether it really is different.This is a pet peeve, particularly when a company's \"compare versions\" page lists dozens of identical dimensions across the product line, making finding the differences into a dreary where's-Waldo game.reply",
      "Good point! Added to my to-do list :)reply",
      "This is actually pretty terrible. Apart from the things \u201cokanat\u201d said, the site is a nightmare in terms of UI and extremely buggy. I didn\u2019t realize modern websites could get this bad.reply",
      "Performance is cool, but if you're already building a giant database of SBC information, I/O, peripherals and features seem like a much more important thing to add.Just in the Orange Pi lineup, there are so many different models and so little structured information about them, that the best source still seems to be the google sheet that I created in 2017 and has been continously updated by various community members over the years [0]. And that's all one manufacturer!Things like which type and how many video outs, USB ports, if it has onboard flash, DSI/CSI, pinout compatibility... are so much more important and so much harder to get than performance numbers, which usually boil down to the SoC plus a small margin for thermal and power design of the board.If this site were open source (and time + knowledge of stack permitting), I'd take a stab at adding a way to include that info as well, maybe even through crowd-sourcing.[0] https://docs.google.com/spreadsheets/d/14QDXdMR1a1kc0gpRpTzI...reply",
      "I hear you! Like I mention to others in the thread, this functionality is already there, I just need to finish populating all of the data. To get over a mental block I had to decide whether I'd continue trying to add each feature before an initial launch (and be there forever) or give myself a shot of motivation by getting an initial performance comparison feature set out there and iterate as I go along.As soon as I have all of that data in there (I think I'm at around 30-40% so far, the initial batch of testing has been a slog, data entry for this took a back seat) I'll be enabling that option and it will all be there to view on comparison pages, and search for to help find/compare on a deeper level.reply"
    ],
    "link": "https://sbc.compare/",
    "first_paragraph": "Find the perfect SBC for your project with comprehensive benchmarks, specifications, and real-world performance data.Search for single board computers by name, manufacturer, or specifications.Add up to 3 boards to your comparison list by clicking on them.View detailed comparisons with benchmarks, specifications, and performance data.Compare Single Board Computers such as the Raspberry Pi against hundreds of alternatives!Powered by bret.dkWondering if you need to upgrade from your Raspberry Pi 4? Compare a massive range of SBCs with sbc.compare to make the informed choice!\u00a9 2025 sbc.compare"
  },
  {
    "title": "GNU Octave Meets JupyterLite: Compute Anywhere, Anytime (jupyter.org)",
    "points": 105,
    "submitter": "bauta-steen",
    "submit_time": "2025-10-19T15:48:52 1760888932",
    "num_comments": 24,
    "comments_url": "https://news.ycombinator.com/item?id=45635069",
    "comments": [
      "For anyone else who hadn't heard of Octave, it's an open source near-clone of the proprietary MATLAB: https://en.wikipedia.org/wiki/GNU_Octavereply",
      "\"near clone\" is a bit exaggerated. As much as I'm a free software zealot, I don't think Octave comes close to matlab yet (provided you do anything a bit more advanced than the practical of some courses)See https://stackoverflow.com/questions/12084246/differences-bet...reply",
      "I don\u2019t think Matlab or Octave are great languages for software engineering. Actually, these languages are like example #1 of the difference between engineering software vs software engineering: they are excellent tools for writing, like, 10-100 line numerical experiments.Anyone who runs up against a limitation of Octave has probably hit the point where they should consider switching, but not to Matlab or some other scripting language, but to Fortran or maybe Julia or something.Therefore, I disagree with the accepted answer in that StackOverflow thread. The language is only good in the first place for short codes anyway, so fixing any little octave/matlab regionalisms is not a big deal. And, since it is a mathematical experiments, you should understand what every line of code does, so running the code without reading it is not really an option.reply",
      "They are never meant for general software engineer but for numerical analysis/data analysis and engineering. In fact they are quite horrible for writing general software code -- the APIs for IO and HTTP requests are very lacking compared what you can find in other languages, for example.reply",
      "I haven't found a better CLI calculator utility for writing more than one-liner numerical stuff with some plots than MATLAB and octave. They're fantastic.Python is trash, by comparison.reply",
      "People who use MATLAB use it for the toolboxes.The language itself is awful.reply",
      "Early versions of Andrew Ng's ML MOOC used Octave, if you are looking for examples and exercises.YouTube playlist: https://www.youtube.com/playlist?list=PLiPvV5TNogxIS4bHQVW4p...reply",
      "I was in one of those early cohorts that used Octave, one of the things the course had to deal with was that at the time (I don't know about now) Octave did not ship with an optimization function suitable for the coursework so we ended up using an implementation of `fmincg` provided along with the homework by the course staff. If you're following along with the lectures, you might need to track down that file, it's probably available somewhere.Using Octave for a beginning ML class felt like the worst of both worlds - you got the awkward, ugly language of MATLAB without any of the upsides of MATLAB-the-product because it didn't have the GUI environment or the huge pile of toolbox functions. None of that is meant as criticism at Octave as a project, it's fine for what it is, it just ended up being more of a stumbling block for beginners than a booster in that specific context.reply",
      "It\u2019s nice to know that someone else suffered this pain. And that i bet on PGMs which really turned out to be the wrong horse\u2026reply",
      "ha! I took at least one PGM class myself. I had a difficult time with the material.reply"
    ],
    "link": "https://blog.jupyter.org/gnu-octave-meets-jupyterlite-compute-anywhere-anytime-8b033afbbcdc",
    "first_paragraph": ""
  },
  {
    "title": "Could the XZ backdoor been detected with better Git/Deb packaging practices? (optimizedbyotto.com)",
    "points": 72,
    "submitter": "ottoke",
    "submit_time": "2025-10-19T17:38:11 1760895491",
    "num_comments": 54,
    "comments_url": "https://news.ycombinator.com/item?id=45636116",
    "comments": [
      "I believe the XZ compromise partly stemmed from including binary files in what should have remained a source-only project. From what I remember, well-run projects such as those of the GNU project have always required that all binaries\u2014whether executables or embedded data such as test files\u2014be built directly from source, compiling a purpose-built DSL if necessary. This ensures transparency and reproducibility, both of which might have helped catch the issue earlier.reply",
      "thats not the issue, there will always be prebuilt binaries (hell, deb/rpm are prebuilt binaries).The issue for xz was that the build system was not hermetic (and sufficiently audited).Hermitic build environments that can\u2019t fetch random assets are a pain to maintain in this era, but are pretty crucial in stopping an attack of this kind. The other way is reproducible binaries, which is also very difficult.EDIT: Well either I responded to the wrong comment or this comment was entirely changed. I was replying to a comment that said. \u201cThe issue was that people used pre-built binaries\u201d which is materially different to what the parent now says, though they rhyme.reply",
      "This is not going to be popular: I think the whole idea that a build system just fetches resources from outside of the build environment is fundamentally broken. It invites all kinds of trouble and makes it next to impossible to really achieve stability and to ensure that all code that is in the build has been verified. Because after you've done it four times the fifth time you won't be looking closely. But if you don't do it automatically but only when you actually need it you will be looking a lot more sharpish at what has changed since you last pulled in the code. Especially for older and stable libraries the consumers should dictate when they upgrade, not some automatic build process. But because we're all conditioned to download stuff because it may have solved some security issue we stopped to think about the security issues associated with just downloading stuff and dumping it into the build process.reply",
      "I am pretty sure Debian Policy agrees with you, although I can't cite chapter and verse.  Certainly Nix and Guix agree with you.  But that evidently wasn't the problem here.reply",
      "The XZ project\u2019s build system is and was hermetic. The exploit was right there in the source tarball. It was just hidden away inside a checked-in binary file that masqueraded as a test for handling of invalid compressed files.(The ostensibly autotools-built files in the tarball did not correspond to the source repository, admittedly, but that\u2019s another question, and I\u2019m of two minds about that one. I know that\u2019s not a popular take, but I believe Autotools has a point with its approach to source distributions.)reply",
      "I thought that the exploit was not injected into the Git repository on GitHub at all, but only in the release tarballs. And that due to how Autoconf & co. work, it is common for tarballs of Autoconf projects to include extra files not in the Git repository (like the configure script). I thought the attacker exploited the fact that differences between the release tarball and the repository were not considered particularly suspicious by downstream redistributors in order to make the attack less discoverable.reply",
      "First of all, even if that were true, that wouldn\u2019t have much to do with hermetic builds as I understand the term. You could take the release tarball and build it on an air-gapped machine, and (assuming the backdoor liked the build environment on the machine) you would get a backdoored artifact. Fetching assets from the Internet (as is fashionable in the JavaScript, Go, Rust, and to some extent Python ecosystems) does not enter the equation, you just need the legitimate build dependencies.Furthermore, that\u2019s not quite true[1]. The differences only concerned the exploit\u2019s (very small) bootstrapper and were isolated to the generated configure script and one of the (non-XZ-specific) M4 scripts that participated in its generation, none of which are in the XZ Git repo to begin with\u2014both are put there, and are supposed to be put there, by (one of the tools invoked by) autoreconf when building the release tarball. By contrast, the actual exploit binary that bootstrapper injected was inside the Git repo all along, disguised as a binary test input (as I\u2019ve said above) and identical to the one in the tarball.To detect the difference, the distro maintainers would have needed to detect the difference between the M4 file in the XZ release tarball and its supposed originals in one of the Autotools repos. Even then, the attacker could instead have shipped an unmodified M4 script but a configure script built with the malicious one. Then the maintainers would have needed to run autoreconf and note that the resulting configure script differed from the one shipped in the tarball. Which would have caused a ton of false positives, because that means using the exact versions of Autotools parts as the upstream maintainer. Unconditionally autoreconfing things would be better, but risk breakage because the backwards compatibility story in Autotools has historically not been good, because they\u2019re not supposed to be used that way.(Couldn\u2019t you just check in the generated files and run autoreconf in a commit hook? You could. Glibc does that. I once tried to backport some patches\u2014that included changes to configure.ac\u2014to an old version of it. It sucked, because the actual generated configure file was the result of several merges and such and thus didn\u2019t correspond to the output of autoreconf from any Autotools install in existence.)It\u2019s easy to dismiss this as autotools being horrible. I don\u2019t believe it is; I believe Autotools have a point. By putting things in the release tarball that aren\u2019t in the maintainer\u2019s source code (meaning, nowadays, the project\u2019s repo, but that wasn\u2019t necessarily the case for a lot of their existence), they ensure that the source tarball can be built with the absolute bare minimum of tools: a POSIX shell with a minimal complement of utilities, the C compiler, and a POSIX make. The maintainer can introduce further dependencies, but that\u2019s on them.Compare this with for example CMake, which technically will generate a Makefile for you, but you can\u2019t ship it to anybody unless they have the exact same CMake version as you, because that Makefile will turn around and invoke CMake some more. Similarly, you can\u2019t build a Meson project without having the correct Python environment to run Meson and the build system\u2019s Python code, just having make or ninja is not enough. And so on.This is why I\u2019m saying I\u2019m of two minds about this (bootstrapper) part of the backdoor. We see the downsides of the Autotools approach in the XZ backdoor, but in the normal case I would much rather build a release of an Autotools-based project than a CMake- or Meson-based one. I can\u2019t even say that the problem is the generated configure script being essentially an uninspectable binary, because the M4 file that generated it in XZ wasn\u2019t, and the change was very subtle. The best I can imagine here is maintaining two branches of the source tree, a clean one and a release one, where each release commit is notionally a merge of the previous release commit and the current clean commit, and the release tarball is identical to the release commit\u2019s tree (I think the uacme project does something like that?); but that still feels insufficient.[1] https://gist.github.com/thesamesam/223949d5a074ebc3dce9ee78b...reply",
      "Focusing on the technical angle is imo already a step too far. This was first and foremost a social engineering exercise, only secondary a technical one.reply",
      ">Can we trust open source software? Yes \u2014 and I would argue that we can only trust open source software.But should we trust it? No!! That's why we're here!I'm not satisfied with the author's double-standard-conclusion. Trust, but verify does not have some kind of hall pass for OSS \"because open-source is clearly better.\"Trust, but verify is independent of the license the coders choose.reply",
      "Yes, I would say that being able to view the source code and build it yourself is a necessary but not sufficient condition of properly trusting the software. (which is not quite the same thing as it being open source, but it's relatively rare outside of being a very big customer that you can do this for non-open-source code).reply"
    ],
    "link": "https://optimizedbyotto.com/post/xz-backdoor-debian-git-detection/",
    "first_paragraph": "Search\n\nThe discovery of a backdoor in XZ Utils in the spring of 2024 shocked the open source community, raising critical questions about software supply chain security. This post explores whether better Debian packaging practices could have detected this threat, offering a guide to auditing packages and suggesting future improvements.The XZ backdoor in versions 5.6.0/5.6.1 made its way briefly into many major Linux distributions such as Debian and Fedora, but luckily didn\u2019t reach that many actual users, as the backdoored releases were quickly removed thanks to the heroic diligence of Andres Freund. We are all extremely lucky that he detected a half a second performance regression in SSH, cared enough to trace it down, discovered malicious code in the XZ library loaded by SSH, and reported promtly to various security teams for quick coordinated actions.This episode makes software engineers pondering the following questions:As a Debian Developer, I decided to audit the xz package in Deb"
  },
  {
    "title": "The Spilhaus Projection: A world map according to fish (southernwoodenboatsailing.com)",
    "points": 94,
    "submitter": "zynovex",
    "submit_time": "2025-10-12T09:59:13 1760263153",
    "num_comments": 10,
    "comments_url": "https://news.ycombinator.com/item?id=45556911",
    "comments": [
      "(Very) little bits of past discussion. Others?The Spilhaus World Ocean Map in a Square (2020) - https://news.ycombinator.com/item?id=36498614 - June 2023 (2 comments)A far-sighted Minnesota scientist pointed America toward the future - https://news.ycombinator.com/item?id=35756976 - April 2023 (2 comments)A world map that\u2019s all about oceans - https://news.ycombinator.com/item?id=33816910 - Dec 2022 (1 comment)reply",
      "According to saltwater fish... \nWhat about all of the freshwater fish?Cool map though!reply",
      "Freshwater fish have multiple, much smaller maps which have no connection to each other.reply",
      "Are rivers 2d or 1d?reply",
      "3dreply",
      "Not to mention that no fish would have any insight into at least whatever is within visible distance from the shore surface. An accurate version of such a map would highlight an interesting perspective of how humans also lack the ability to perceive, comprehend, or even accept things they either physically or psychologically cannot perceive or do not wish to perceive and accept it.reply",
      "More importantly, I imagine a 2D map would not be useful for fish: there is much more space to represent when you can also swim up and down.reply",
      "the fish need more data:- depths https://www.horizont.net/news/media/8/Die-Schaup-des-jeweil-...- and temperature https://www.esri.com/arcgis-blog/wp-content/uploads/2019/09/...reply",
      "I may be very easy to amuse but but Spilhaus projection for compact Hausdorff space (the surface of the Earth) tickled my drying bones.Seems the landmasses are indeed housing off all that spilled water.Humor aside, the first thing it reminded me of is the Quincunx projection. There all the landmass is at the centre and is housed off by the oceans. And you can tile Euclidean space with it.https://en.wikipedia.org/wiki/Peirce_quincuncial_projectionreply",
      "That is an awesome mapreply"
    ],
    "link": "https://southernwoodenboatsailing.com/news/the-spilhaus-projection-a-world-map-according-to-fish",
    "first_paragraph": "I clearly remember sitting in a geography lesson in a dusty, cold classroom in the English midlands listening to Mr Lewin drone on and on. It must have been the late 1970\u2019s. The only interesting thing about Mr Lewin was that he was the 1st XV rugby coach. I always wondered how a man with so little personality had achieved such an exalted position\u2026..in my mind on a par with being the Prime Minister.  However, as long as I can remember, I had always had a fascination with maps, or perhaps on this site we should call them charts\u2026. and one day Mr Lewin began explaining how cartographers addressed the challenge of portraying what is essentially a three dimensional object, (the world) on a two dimensional plane (a piece of paper). My eyes lit up. Not only did the problem have multiple imperfect solutions but the names of the people working on this conundrum sounded like adventure itself!Mercator, Sinu-Mollweide, Goode\u2019s Homolosine, Peirce Quincincial and my favourite the Winkel Tripel!So whe"
  },
  {
    "title": "The working-class hero of Bletchley Park you didn't see in the movies (theguardian.com)",
    "points": 86,
    "submitter": "hansmayer",
    "submit_time": "2025-10-12T12:04:50 1760270690",
    "num_comments": 36,
    "comments_url": "https://news.ycombinator.com/item?id=45557596",
    "comments": [
      "Bill Tutte founded the Department of Combinatorics & Optimization in 1962 at the University of Waterloo (the year I was born!). No one knew about his Bletchley Park work until 1985; later in 2001 he was awarded the Order of Canada (he passed away the following year aged 84). I was amongst the usual group of often confused undergraduates in his C&O classes ... his mind just\noperated on a level that few of us mere mortals could ever understand!reply",
      "My grandfather worked with Flowers at the Post Office. They worked on many aspects of digital telecoms for the decades after the war, leading to the world's first digital PCM telephone exchange 'Empress' in London around 1968, and System X nationally in 1980.Around 1986 my high school class did a trip to the town telephone exchange to see the building full of mechanical rotary switch gear that was about to be thrown out, to be replaced by a single 19\" rack that contained the digital equivalent.I have copies of some of Grandpa's UK patents including baud rate conversion and other essential components.reply",
      "Like the early hackers, he made things.  In Flower's case, he made things than enabled hackers (eventually).  While theory is important and interesting, actually making sh*t that works moves things forward.Yeah, he also helped shorten the war which saved a whole lot of lives.reply",
      "The U-Boot commanders all knew that the Enigma had been cracked, but Admiral Doenitz refused to believe it.Rommel's Afrika Korps was also defeated by Enigma, because Rommel also refused to believe it was cracked. Enigma pointed out when and where Rommel's supply ships were.No matter how secure your encryption method is, one should always assume it is cracked. Me, I would have backed it up with one-time pads.reply",
      "Not true. There was some suspicion on the part of both D\u00f6nitz and his men  (which is why they added a code wheel) but none of the U-boat memoirs published before ultra was declassified mention concerns about enigma except in passing.In contrast they attributed getting attacked after sending in a position report to radio triangulation equipment allies had, called huff-duff.And in most cases huff-duff was the reason they were attacked. Bletchley Park was too slow to provide an actionable attack vector off a position report. Instead ultra was used to route convoys around the u-boats. They experienced ultra as empty ocean they they hoped they would find a convoy.The one exception was the \"milk cows\". These were resupply subs that were to rendezvous with u-boats in the open ocean. D\u00f6nitz would send orders for a rendezvous, bletchley would decrypt and send orders to a \"hunter killer\" group consisting of an aircraft carrier and destroyers to attract the two subs while resupplying.reply",
      "I remember reading that the commanders were very suspicious because every time they rendezvoused with a milk cow, there was Allied equipment waiting for them.Rommel attributed the attacks on his secret convoys to spies.reply",
      "typo, you did not mean attractreply",
      "> all knew that the Enigma had been cracked, but Admiral Doenitz refused to believe it.Whereas:  The dropping results made Admiral D\u00f6nitz suspicious. Although reassured by the Abwehr, the German Foreign Intelligence, that Enigma was unbreakable, he insisted on improving the security of Enigma. On 1 February 1942 the famous Enigma M4 model with four rotors and new key sheets were introduced. \n\n~ https://www.ciphermachinesandcryptology.com/en/enigmauboats....~ https://uboat.net/technical/enigma_ciphers.htmThere were multiple Enigma variations, based on rotor choice pool sizes, number of fittable rotors, time cycles to changing procedures, etc. Some naval enigma variations were broken, others weren't.reply",
      "> Enigma variations\u0ca0 _ \u0ca0reply",
      "> Me, I would have backed it up with one-time pads.Even one-time pads are subject to the efforts used to counter Enigma, such as so-called gardening. I fully agree that layers are better than a single method like Enigma was many times in practice, which is usually all-or-none with no failsafe, at least until later in the war, when Enigma variants started being used in combination with coded messages and code words on top of the Enigma cipher machines themselves, but those efforts were foiled by the dedication and planning of the gardeners\u2019 known-plaintext attacks.https://en.wikipedia.org/wiki/Gardening_(cryptanalysis)> In cryptanalysis, gardening is the act of encouraging a target to use known plaintext in an encrypted message, typically by performing some action the target is sure to report. It was a term used during World War II at the British Government Code and Cypher School at Bletchley Park, England, for schemes to entice the Germans to include particular words, which the British called \"cribs\", in their encrypted messages. This term presumably came from RAF minelaying missions, or \"gardening\" sorties. \"Gardening\" was standard RAF slang for sowing mines in rivers, ports and oceans from low heights, possibly because each sea area around the European coasts was given a code-name of flowers or vegetables.> The technique is claimed to have been most effective against messages produced by the German Navy's Enigma machines. If the Germans had recently swept a particular area for mines, and analysts at Bletchley Park were in need of some cribs, they might (and apparently did on several occasions) request that the area be mined again. This would hopefully evoke encrypted messages from the local command mentioning Minen (German for mines), the location, and perhaps messages also from the headquarters with minesweeping ships to assign to that location, mentioning the same. It worked often enough to try several times.reply"
    ],
    "link": "https://www.theguardian.com/world/2025/oct/12/move-over-alan-turing-meet-the-working-class-hero-of-bletchley-park-you-didnt-see-in-the-movies",
    "first_paragraph": "The Oxbridge-educated boffin is feted as the codebreaking genius who helped Britain win the war. But should a little-known Post Office engineer named Tommy Flowers be seen as the real father of computing?This is a story you know, right? It\u2019s early in the war and western Europe has fallen. Only the Channel stands between Britain and the fascist yoke; only Atlantic shipping lanes offer hope of the population continuing to be fed, clothed and armed. But hunting \u201cwolf packs\u201d of Nazi U-boats pick off merchant shipping at will, coordinated by radio instructions the Brits can intercept but can\u2019t read, thanks to the fiendish Enigma encryption machine. Unless something is done \u2013 and fast \u2013 Hitler\u2019s plan to first bomb, then starve the country will succeed. Enter the genius Alan Turing, working as a codebreaker at the top secret Government Code and Cypher School\u00a0at Bletchley Park, who, in a generational act of intellectual virtuosity, designs and builds the world\u2019s first computer to crack Enigma,"
  },
  {
    "title": "The Cancer Imaging Archive (TCIA) (cancerimagingarchive.net)",
    "points": 30,
    "submitter": "1970-01-01",
    "submit_time": "2025-10-13T17:06:44 1760375204",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.cancerimagingarchive.net/",
    "first_paragraph": "The Cancer Imaging Archive (TCIA) is a service which de-identifies and hosts a large archive of medical images of cancer accessible for public download.Many TCIA datasets are submitted by the user community. Learn how to submit your imaging and related data.TCIA has a variety of ways to browse, search, and download data. Learn more about how to access the data.In addition to video tutorials and documentation, our helpdesk is also available if you still have questions.TCIA is a service which de-identifies and hosts a large archive of medical images of cancer accessible for public download. The data are organized as \u201ccollections\u201d; typically patients\u2019 imaging related by a common disease (e.g. lung cancer), image modality or type (MRI, CT, digital histopathology, etc) or research focus. DICOM is the primary file format used by TCIA for radiology imaging. Supporting data related to the images such as patient outcomes, treatment details, genomics and expert analyses are also provided when av"
  },
  {
    "title": "From Hollywood to horticulture: Cate Blanchett on a mission to save seeds (bbc.com)",
    "points": 5,
    "submitter": "RickJWagner",
    "submit_time": "2025-10-20T00:19:54 1760919594",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.bbc.com/news/articles/cwy7ekl4yl8o",
    "first_paragraph": "She's a Hollywood A-lister, with a mantelpiece groaning under the weight of awards. But Cate Blanchett has taken an unexpected diversion from her day job - to immerse herself in the world of the humble seed.Her eyes light up as she enthuses about the banksia species from her native Australia.\"It's quite a brutal looking seed pod that only releases its seed in extremely high temperatures,\" she tells us.\"It does look like a cross between a mallet and a toilet brush. So they're not always pretty, but yet what comes out of them is so spectacular.\"We meet her at Kew's Millennium Seed Bank (MSB) at Wakehurst botanic garden in Sussex. She lives locally and teamed up with the project as it celebrates its 25th anniversary.\"Really, I stumbled upon Wakehurst. I was just in awe of the landscape and I always feel regenerated by being in the natural world,\" she says.\"And then I discovered the seed bank, and I literally had my mind blown by the work that goes on here\u2026 and I thought, anything I can do"
  },
  {
    "title": "Comparing the power consumption of a 30 year old refrigerator to a new one (ounapuu.ee)",
    "points": 117,
    "submitter": "furkansahin",
    "submit_time": "2025-10-14T07:28:15 1760426895",
    "num_comments": 146,
    "comments_url": "https://news.ycombinator.com/item?id=45577181",
    "comments": [
      "Agree with the others here that this is absolutely not a fair comparison. Most likely the door of the old one was not sealing well, hence the continuous running and frost buildup. I have a late 30s Frigidaire that I restored a few years ago which has been taking around 200kWh/y (70W compressor, ~33% duty cycle.)reply",
      "> Comparing the power consumption of a [broken] 30 year old refrigerator to a brand new onereply",
      "Yeah, the title is misleading. The article says that one of the compressors on the old one was running constantly - if you applied the same failure mode to the new refrigerator, the difference would be significantly less.reply",
      "Given modern minimalistic build standards, the modern compressor would probably overheat and fail if run continuously 24/7.  I am reminded of the old simpsons bit where they make a tent in front of the refrigerator.https://youtu.be/1t9BdMuzV64reply",
      "I would expect a refrigerator that has EC motors running the compressor(s) and fan(s) to be around 2-2.5x as efficient as one with fixed speed motors, based on what I know about variable frequency drives and three-phase induction motors. For those, 80% speed uses 50% of the power, 63% uses 25% of the power. For an 1800 rpm motor that is 1440 rpm and 1134 rpm. VFDs work well for most applications with variable torque (fans and pumps), but applications requiring constant torque (saws, grinders, etc) are better served by fixed speed starters.reply",
      "> variable frequency drives and three-phase induction motors. For those, 80% speed uses 50% of the power, 63% uses 25% of the power.You\u2019re presumably thinking of the \u201cAffinity Laws\u201d, which, according to Wikipedia (and plenty of other sources), \u201capply to pumps, fans, and hydraulic turbines. In these rotary implements, the affinity laws apply both to centrifugal and axial flows.\u201dThis is, IMO, one of the worst kinds of science writing. Wikipedia, and plenty of other sources, make little mention of when the do and don\u2019t apply or, relatedly, why they\u2019re true and why they can\u2019t always be true.They generally apply to situations where a pump is pumping fluid through something like a filter or a long pipe where the pipe is a closed loop or at least the ends are at the same elevation (e.g. a swimming pool pump, except when pumping from a pool into a higher hot tub).  So you have no actual work being done by moving fluid, and you can run the pump slower, and thus move less fluid per unit time, thus reducing friction in a manner that the pressure that the pump needs to overcome goes all the way to zero as the flow rate approaches zero.But the affinity laws are not really anything fundamental about pumps, and they certainly do not override conservation of energy.Now consider a refrigerator.  The compressor is pumping refrigerant from an (approximately) fixed low pressure to a fixed high pressure.  (The fluid goes back from high pressure to low pressure via a capillary tube or expansion valve or similar lossy device -- it gets its pressure increased in the gas phase and decreased in the liquid phase.)  There's some friction, but after subtracting friction, the pressure is independent of flow rate, and thus the work done per unit flow is independent of flow rate, and the pump power scales linearly with flow as opposed to super-linearly as the affinity laws suggest.Also, the compressor is a positive-displacement pump, and the affinity laws don't even pretend to apply to these.(A well pump is another common system where the affinity laws will lead to nonsensical results.  If you want to size a well pump properly, you need to know the height that you're raising the water, the output pressure you need, and the range of flows that you want.  And then you look at the actual measured performance curves of the pumps (and their drives) that you are considering, and you pick something appropriate.)All that being said, variable-speed fridges exist, and they're kind of nice in that they try to run continuously and quietly instead of alternating between full-power (and loud) and all the way off.  And they are probably a bit more efficient because there's less friction and because the motors are likely to be more efficient three-phase designs instead of the not-actually-amazing single-phase motors you'll find in older fridges.reply",
      "> variable-speed fridges exist, and they're kind of nice in that they try to run continuously and quietly instead of alternating between full-power (and loud) and all the way off.Modern continuous variable speed compressor fridges drive me absolutely crazy. They sound like two ceramic plate rubbing together with some maddening flutter.Some also add incredibly annoying high pitch whines. That seemingly nobody seems to notice but me. In the same vein as coils whine from power supplies and other modern electronic.Old bang bang fridges are loud, on lower frequency, and with a sound that is more consistent and stable. Not varying one second to the next, which I find easier to ignore.I have started looking at how reasonable  it is to move the compressor of my expensive and low quality 2025 fridge across the wall into the garage (refrigerant capture and refill, brazing new lines etc).reply",
      "I hate fridge noise, any kind. I\u2019d like to prioritize quiet running when buying, but for the last two I haven\u2019t had confidence in my research results.  One hit, one miss.However, in preparation for writing this comment I discovered Quiet Mark, which seems promising. https://www.quietmark.com/",
      "VFDs need really good grounding. Make sure you have a solid earth ground or you can get arcing across the motor bearings. This makes a sound that\u2019s often described as \u201cfluting,\u201d and I think that might be your problem. If it is, you need to fix that before your bearings are trashed and you have to replace the motor.reply",
      "Fascinating, I will investigate.The outlet are grounded with a thin non insulated copper wire secured to the nearest water copper pipe, itself also bounded to the iron gas pipe (this is 1950 electrical). I am not sure I can call this a solid earth ground.Thank you for the info!reply"
    ],
    "link": "https://ounapuu.ee/posts/2025/10/14/fridge-power-consumption/",
    "first_paragraph": "Our apartment came with a refrigerator. It was alright, it made things cold, it kept them cold. It was also\nincredibly noisy, and no matter how much I fiddled with its settings, the compressor was always running and any ice\ncream left in the deep freeze part got rock solid.1When I hooked up one of my smart plugs to it, I soon learned why: one of the two compressors was\nrunning all the time. This lead to a huge block of ice forming on the back\nof the main compartment, and the deep freeze section icing up really quickly. I suspect that the thermostat may have\nbeen busted and contributed to the issue, but after trying to repair a dishwasher, getting cut about 10 times on my\nhands and losing, I had zero interest in attempting another home appliance repair on my own.The refrigerator was the UPO J\u00e4\u00e4karhu (j\u00e4\u00e4karhu means polar bear in Finnish), and the manual that the previous owner\nhad still kept around had July 1995 on it, meaning that the refrigerator was about the same age as I am: 30 yea"
  },
  {
    "title": "Replua.nvim \u2013 an Emacs-style scratch buffer for executing Lua (github.com/mghaight)",
    "points": 10,
    "submitter": "mghaig",
    "submit_time": "2025-10-19T22:49:34 1760914174",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://github.com/mghaight/replua.nvim",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        An Emacs-style scratch buffer for executing Lua inside Neovim\n       There was an error while loading. Please reload this page.\nThere was an error while loading. Please reload this page.An Emacs-style scratch buffer for executing Lua inside Neovim. replua.nvim\nopens a dedicated buffer where you can experiment with Lua, call any Neovim\nAPI, and see results printed inline -- much like the classic Emacs Lisp\ninteraction mode.If you prefer to manage configuration manually, require the plugin somewhere in\nyour startup files:The bundled plugin/replua.lua file calls setup() on load, so the commands\nare available even without manual configuration.Open the scratch buffer with:Need another scratch buffer? Run :RepluaOpen! for a fresh instance.The default keymaps inside the buffer mirror Emacs-style interactions:Each evaluation appends comment"
  },
  {
    "title": "Pawn is a simple, typeless, 32-bit extension language with a C-like syntax (compuphase.com)",
    "points": 6,
    "submitter": "unleaded",
    "submit_time": "2025-10-12T11:09:22 1760267362",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.compuphase.com/pawn/pawn.htm",
    "first_paragraph": "\n\n\n\n\nAn embedded scripting languagepawn is a typeless extension language with a C-like syntax. A pawn\n\u201csource\u201d program is compiled for an abstract machine (or\n\u201cvirtual machine\u201d) for optimal execution speed. The pawn compiler\noutputs P-code (or \u201cbytecode\u201d). Run-time efficiency, stability,\nsimplicity and a small, deterministic footprint were key design criteria for\nboth the language and the abstract machine.\n\n  Back to page       Pawn IDE (for Windows and Linux)  \n  Back to page       Documentation extracted generated by the compiler  \n  Back to page       Pawn Blocks Designer (visual programming)  \n  Back to page       Pawn console debugger  \nFor any information not in this list, please browse through this page. Hopefully\nyou will find what you are looking for.\n\n\u00a0\nIntroduction\nAn introduction to the pawn language and abstract machine from a\nprogrammer's perspective was published in the October 1999 issue of\nDr.\u00a0Dobb's Journal \u2014but at the time, the\nlanguage was called Small. More verbose"
  }
]