[
  {
    "title": "Sqlite3 WebAssembly (sqlite.org)",
    "points": 363,
    "submitter": "whatever3",
    "submit_time": "2024-10-15T17:45:27.000000Z",
    "num_comments": 113,
    "comments_url": "https://news.ycombinator.com/item?id=41851051",
    "comments": [
      "Something that would be really fun would be to run SQLite in-memory in a browser but use the same tricks as Litestream and Cloudflare Durable Objects (https://simonwillison.net/2024/Oct/13/zero-latency-sqlite-st...) to stream a copy of the WAL log to a server (maybe over a WebSocket, though intermittent fetch() POST would work too).Then on subsequent visits use that server-side data to rehydrate the client-side database.From https://sqlite.org/forum/info/50a4bfdb294333eec1ba4749661934... is looks like WAL mode is excluded from the default SQLite WASM build so you would have to go custom with that.\n \nreply",
      "There are many layers of that's not how it works at play here.In-memory SQLite databases don't use WAL. Wasm (and browser Wasm, in particular) doesn't support anything like the shared memory APIs SQLite wants for its WAL mode.Litestream requires a very precise WAL setup to work (which just so happens to work with the default native SQLite setup, but is hard to replicate with Wasm).Cloudflare Durable Objects may have been inspired by Litestream but works very differently (as do LiteFS, Turso, etc\u2026)The general idea of streaming changes from SQLite would work, but it's a lot of work, and the concurrency model of in-browser Wasm will make it challenging to implement.(I wrote that forum post some time ago, and have WAL working in a server side Wasm build of SQLite, but none of the options to make it work would make much sense, or be possible, in browser)\n \nreply",
      "As someone who uses sqlite fairly regularly, but doesn't understand what most of those paragraphs mean, do you have any recommendations for learning resources?I'm gathering that I need to learn about:\n - WAL\n - Shared Memory APIs\n - Concurrency models\n - Durable Objects?\n \nreply",
      "WAL: Write ahead log, common strategy for DBs (sqlite, postgres, etc.) to improve commit performance. Instead of fsync()ing every change, you just fsync() a log file that contains all the changes and then you can fsync() the actual changes at your leisureShared memory API: If you want to share (mutable) data between multiple processes, you need some kind of procedure in place to manage that. How do you get a reference to the data to multiple processes, how do you make sure they don't trample each other's writes, etc.Concurrency model: There are many different ways you can formalize concurrent processes and the way they interact (message passing, locking, memory ordering semantics, etc.). Different platforms will expose different concurrency primitives that may not work the same way as other platforms and may require different reasoning or code structureDurable objects - I think this is some Cloudflare service where they host data that can be read or modified by your usersThis is all from memory, but IME, GPT is pretty good for asking about concepts at this level of abstraction\n \nreply",
      "Thank you!And side note on your last point - I've been burned too many times by confident hallucinations to trust my foundational learning to GPT. I hope someday that will improve, but for now ChatGPT is as trustworthy as an evening chat with someone at the bar.... Someone who has been drinking since happy hour.\n \nreply",
      "If you like, solving these sort of problems, we are tackling them at Fireproof.Our database API is modeled on CouchDB and MongoDB, but our storage abstractions are along the lines of what you need to build the multi writer WAL you describe.More details here https://jsr.io/@fireproof/encrypted-blockstore\n \nreply",
      "Then don't use in-memory sqlite? Use file backed sqlite but have your wasm implementation of those \"system calls\" just be to memory?I dunno, feels like you're coming down too hard.\n \nreply",
      "File backed SQLite in a browser? Do you mean like OPFS?https://sqlite.org/wasm/doc/trunk/persistence.md#opfs-walAgain, just because the all the Lego pieces sound like they should all just fit together, doesn't mean that they will.The VFS mechanism was primarily designed to make SQLite easy to port to multiple OSes. WAL mode is hard to port everytime you step away from a more traditional OS.\u201cWe have SQLite in the browser, let's just stream the WAL like the Litestream hack\u201d does not add up.It's not impossible, but it surely took a lot of effort at Cloudflare (or at Fly, or Turso) to get there. And neither of them opened it up sufficiently to help us do the same. In a browser.\n \nreply",
      "I haven't looked but I bet a lot of the WAL complexity comes down to supporting consistency and durability guarantees, neither of which you necessarily need for your in-browser use case.\n \nreply",
      "LiteVFS can be compiled in a browser and sync with LiteFS cloud: https://github.com/superfly/litevfsIt needs to be run from a worker, though\n \nreply"
    ],
    "link": "https://sqlite.org/wasm/doc/trunk/index.md",
    "first_paragraph": "This site is home to the documentation for the SQLite project's\nWebAssembly- and JavaScript-related APIs, which enable the use of\nsqlite3 in modern WASM-capable browsers.Cookie/storage disclaimer: this site requires a modern,\nJavaScript-capable browser for full functionality. This site uses\nclient-side storage for persisting certain browsing preferences (like\nthe bright/dark mode toggle) but its server does not process, nor\ntransfer to any other entity, any user-level information beyond\ncertain SCM-side display-related preferences and the credentials of\nlogged-in developers.About the sqlite3 WASM subproject:Making use of this project:\ud83d\udc63 The three-step HOWTO demonstrates how to\ninclude and run the sqlite3 WASM module and its associated\nJavaScript APIs.\ud83d\udcbe Downloads are available via\nthe main project downloads page.\ud83d\udee0 Building sqlite3 WASM and its associated JS\ncode.\ud83d\udcc7 The API index describes the various API\nvariants and how to load and access them.About this documentation:Third-party project"
  },
  {
    "title": "Show HN: Graphite, a Blender-inspired 2D procedural design Rust app (graphite.rs)",
    "points": 101,
    "submitter": "Keavon",
    "submit_time": "2024-10-15T22:32:06.000000Z",
    "num_comments": 22,
    "comments_url": "https://news.ycombinator.com/item?id=41853810",
    "comments": [
      "Wow this looks fantastic! Good open-source tools for design are so necessary.  You should probably add Graphite to this list [2]. I'll definitely try Graphite and follow its progress.Good luck!--1: https://www.youtube.com/watch?v=lthVYUB8JLs2: https://github.com/KenneyNL/Adobe-Alternatives\n \nreply",
      "Congrats on releasing such a complex tool, that's a big achievement.Someday, I'd like to try my hand at making my own vector graphics tool that contains a constraint solver. I am just an amateur when it comes to graphic design, but I often find Inkscape incredibly difficult to use. Certain shapes take bizarre combinations of commands to create and  once a design is finished it can be hard to make adjustments. I find it much easier to make 2D designs as a fusion 360 sketches because constraining a bunch of lines and curves then playing with measurements is significantly more intuitive and interactive. Also maybe a tool like this already exists and I'm just not aware of it.\n \nreply",
      "Definitely! And in fact, that is on our [roadmap](https://graphite.rs/features/#:~:text=CAD%2Dlike%20constrain...). Maybe you could get involved instead of making something separate.\n \nreply",
      "Awesome! If I ever find the time, I will definitely look into contributing.\n \nreply",
      "This looks neat. I\u2019ve been using Illustrator for twenty five years and have been wishing for a node-oriented replacement of the Appearance stack a lot lately. I will have to check it out when you have binaries, I hate web apps.\n \nreply",
      "Is Electron really so different in your experience than a PWA?Personally, I always try to use a PWA when the app is otherwise offered via Electron.If it\u2019s going to depend on a browser engine, it may as well be the one I already have open and update regularly.\n \nreply",
      "(Looking at the videos: global color swatches please, it\u2019s super powerful to be able to change everything drawn in a color - fills, strokes, effects, etc - with a few clicks.)\n \nreply",
      "I'm eager for that feature too! The node graph engine recently got the ability to represent that concept, so now I just need to find the time to design and build the UI for it. I utilize that feature a lot in other software so it'll be really helpful to have in Graphite as well.\n \nreply",
      "Related. Others?[Open source Rust graphics editor] Graphite progress report (Q2 2024) - https://news.ycombinator.com/item?id=41138691 - Aug 2024 (3 comments)Graphite 2D graphics editor built in Rust: Looking back on 2023 and what's next - https://news.ycombinator.com/item?id=38855850 - Jan 2024 (2 comments)Graphite: 2D Raster and Vector Editor - https://news.ycombinator.com/item?id=38169500 - Nov 2023 (4 comments)Graphite: Open-source raster and vector 2D graphics editor - https://news.ycombinator.com/item?id=36901406 - July 2023 (64 comments)Graphite \u2013 open-source raster and vector 2D graphics editor written in Rust - https://news.ycombinator.com/item?id=30675530 - March 2022 (18 comments)\n \nreply",
      "I had to re-read your intro paragraph a few times to understand what this is supposed to be.I read it as a replacement for Blender, but upon testing it I was confused as everything was 2D and looks like Photoshop.But no, you meant the next Photoshop, while referencing Blender as a popular open source version of closed-source 3D modeling/rendering software? Is that right?\n \nreply"
    ],
    "link": "https://graphite.rs/",
    "first_paragraph": ""
  },
  {
    "title": "The C23 edition of Modern\u00a0C (gustedt.wordpress.com)",
    "points": 313,
    "submitter": "bwidlar",
    "submit_time": "2024-10-15T16:06:29.000000Z",
    "num_comments": 148,
    "comments_url": "https://news.ycombinator.com/item?id=41850017",
    "comments": [
      "Important reminder just in the Preface :-)Takeaway #1: \"C and C++ are different: don\u2019t mix them, and don\u2019t mix them up\"\n \nreply",
      ">Takeaway #1: \"C and C++ are different: don\u2019t mix them, and don\u2019t mix them up\"Where \"mixing C/C++\" is helpful:- I \"mix C in with my C++\" projects because \"sqlite3.c\" and ffmpeg source code is written C.  C++ was designed to interoperate with C code.  C++ code can seamlessly add #include \"sqlite3.h\" unchanged.- For my own code, I take advantage of \"C++ being _mostly_ a superset of C\" such as using old-style C printf in C++ instead of newer C++ cout.Where the \"C is a totally different language from C++\" perspective is helpful:- knowing that compilers can compile code in \"C\" or \"C++\" mode which has ramifications for name mangling which leads to \"LINK unresolved symbol\" errors.- knowing that C99 C23 has many exceptions to \"C++ is a superset of C\" :  https://en.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2B...\n \nreply",
      "The entire I/O streams (where std::cout comes from) feature is garbage, if this was an independent development there is no way that WG21 would have taken it, the reason it's in C++ 98 and thus still here today is that it's Bjarne's baby. The reason not to take it is that it's contradictory to the \"Don't use operator overloading for unrelated operations\" core idea. Bjarne will insist that \"actually\" these operators somehow always meant streaming I/O but his evidence is basically the same library feature he's trying to justify. No other language does this, and it's not because they can't it's because it was a bad idea when it was created, it was still a bad idea in 1998, the only difference today is that C++ has a replacement.The modern fmt-inspired std::print and std::println etc. are much nicer, preserving all the type checking but losing terrible ideas like stored format state, and localisation by default. The biggest problem is that today C++ doesn't have a way to implement this for your own types easily, Barry illustrates a comfortable way this could work in C++ 26 via reflection which on that issue closes the gap with Rust's #[derive(Debug)].\n \nreply",
      "Remember that C++ originally didn't have variadic templates, so something like std::format would have been impossible back in the day. Back in the day, std::iostream was a very neat solution for type safe string formatting. As you conceded, it also makes it very easy to integrate your own types. It was a big improvement over printf(). Historic perspective is everything.\n \nreply",
      "> The biggest problem is that today C++ doesn't have a way to implement this for your own types easilyI\u2019m not sure about the stdlib version, but with fmtlib you can easily implement formatters for your own types. https://fmt.dev/11.0/api/#formatting-user-defined-types\n \nreply",
      "I think the problem is that your idea of \"easy\" is \"Here's a whole bunch of C++ you could write by hand for each type\" while the comparison was very literally #[derive(Debug)]. I wasn't abbreviating or referring to something else, that's literally what Rust programmers type to indicate that their type should have the obvious boilerplate implementation for this feature, in most types you're deriving other traits already, so the extra work is literally typing out the word Debug.\n \nreply",
      "Perfectly iostreams happy user since 1993.\n \nreply",
      "This was a tip my hatn excellent to you\n \nreply",
      "int a;cin >> a;Then the program goes berserk as soon as the first non-number is read out of standard input.  All the other \"cin >> integer\" lines are immediately skipped.Yes, I know about error checking, clearing error condition, discarding characters.  But it's a whole lot of stuff you need to do after every single \"cin>>\" line.  It makes the simplicity of cin not worth it.\n \nreply",
      "How could you ever continue after the second statement without checking if you actually read an integer or not? How would you know what you can do with a?\n \nreply"
    ],
    "link": "https://gustedt.wordpress.com/2024/10/15/the-c23-edition-of-modern-c/",
    "first_paragraph": "Jens Gustedt's BlogThe C23 edition of Modern C is now available for free download fromhttps://hal.inria.fr/hal-02383654This new edition has been the occasion to overhaul the presentation in many places, but its main purpose is the update to the new C standard, C23. The goal was to publish this new edition of Modern C at the same time as the new C standard goes through the procedure of ISO publication. The closest approximation of the contents of the new standard in a publically available document can be found here. New releases of major compilers already implement most of the new features that it brings.Among the most noticeable changes and additions that we handle are those for integers: there are new bit-precise types coined _BitInt(N), new C library headers (for arithmetic with overflow check) and (for bit manipulation), possibilities for 128 bit types on modern architectures, and substantial improvements for enumeration types. Other new concepts in C23 include a nullptr constant an"
  },
  {
    "title": "Show HN: I built the most over-engineered Deal With It emoji generator (emoji.build)",
    "points": 565,
    "submitter": "klimeryk",
    "submit_time": "2024-10-15T13:05:05.000000Z",
    "num_comments": 115,
    "comments_url": "https://news.ycombinator.com/item?id=41848150",
    "comments": [
      "This is 100% the kind of thing I was hoping for when daydreaming \"what will the internet be like 20 years from now\" growing up. Cool design, hilariously overpowered backend to do something basic (but do it so well), and 0 of the corporate feeling or ad apocalypse. Awesome stuff!\n \nreply",
      "Hahah, so true! One clarification, though: while I'm sure the backend is overpowered (Cloudflare Pages, easily handling the Hug of Death from HN), but in this case it's only serving static resources. All the hard work is done by the hilariously overpowered devices we carry in our pockets or use for everything but serious work ;)\n \nreply",
      "Oh 100%, the hosting is more than fitting. I had meant to refer to the app's non-UI code (machine learning to place meme glasses)! Apologies for the lack of clarity.\n \nreply",
      "Ah, gotcha! Hahah, yeah, I'm sure this is exactly the use case folks were thinking of when dreaming of AI applications decades ago...\n \nreply",
      "This made me smile :)  if (looping.mode === \"off\") {\n    // If you waited for a day, you deserve to see this workaround...\n    // Since there is no way to not loop a gif using gifwrap,\n    // let's just put a reeeeaaaaallly long delay after the last frame.\n    return 8640000;\n  }\n \nreply",
      "Hahaha, achievement unlocked! Congratulations!\n \nreply",
      "I love it: https://s1.gifyu.com/images/SB5A9.gif\n \nreply",
      "Isn't that a child eating creature?\n \nreply",
      "Saturn, yes \nhttps://en.m.wikipedia.org/wiki/Saturn_Devouring_His_Son\n \nreply",
      "Nice. Thank you for this bedtime story.\n \nreply"
    ],
    "link": "https://emoji.build/deal-with-it-generator/",
    "first_paragraph": ""
  },
  {
    "title": "CapibaraZero: A cheap alternative to FlipperZero based on ESP32-S3 (capibarazero.github.io)",
    "points": 87,
    "submitter": "andreock",
    "submit_time": "2024-10-15T20:34:41.000000Z",
    "num_comments": 9,
    "comments_url": "https://news.ycombinator.com/item?id=41852821",
    "comments": [
      "M5stack.com makes a whole bunch of ESP32 modules with display, enclosures, batteries, etc already integrated, and they're cheap and robust. You can get one with a built-in keyboard for $30.\n \nreply",
      "I wish this functionality was in Watchy v3 (https://watchy.sqfmi.com/), which is also based on EPS32-S3\n \nreply",
      "> For the moment the only option is to make capibaraZero with a breadboard but we are working on a PCB to make device more portable.Radically low-cost, can't disagree :)PCB files are actually available: https://github.com/CapibaraZero/resources/tree/main/PCB/OTOH it's nice to be able to literally see every part, and how they are connected.\n \nreply",
      "Thank you\n \nreply",
      "Does anyone know what the legality of these are? Can you get in trouble just for purchasing things like flipper zero? Or just for using them in some way?\n \nreply",
      "Depends on your country. Usually it's the action of using it for specific things that are illegal, not just purchasing/owning it. But if you're caught breaking into an office with it, I'm sure many countries' courts would see that as additional tooling for the break in, for example.\n \nreply",
      "Transmissions are pretty tightly regulated in most countries. Receiving less so but those laws can be pretty catch-all. Unless you enjoy static noise you're probably intercepting something and thus potentially running afoul of lawful interception rules.Exactly laws & whether anyone cares are ofc dependent on your country\n \nreply",
      "Your country may be of relevance to the question, but in most countries owning or using a flipper or similar, provided you do not interfere with devices you do not own, will not cause issues.\n \nreply",
      "Flipper Zero was banned in at least one country: Brazil.https://www.eff.org/deeplinks/2023/03/flipper-zero-devices-b...https://www.bleepingcomputer.com/news/security/brazil-seizin...\n \nreply"
    ],
    "link": "https://capibarazero.github.io/docs/",
    "first_paragraph": "Read the docsDownload latest firmware"
  },
  {
    "title": "Show HN: I 3D scanned the tunnels inside the Maya Pyramid Temples at Copan (mused.com)",
    "points": 218,
    "submitter": "lukehollis",
    "submit_time": "2024-10-15T12:57:54.000000Z",
    "num_comments": 50,
    "comments_url": "https://news.ycombinator.com/item?id=41848099",
    "comments": [
      "Superb!I expect whoever coated the remains with that red cinnabar stuff died rather early, probably with tooth and hair loss and severe mental issues.  Perhaps this fate was expected but given that \"mad hatters\" were a thing until fairly recently, people can be a bit strange when it comes to dealing with poisons.The guide notes point out that only the most sacred rituals involved this red mercurial stuff.  I'm not surprised.  It might be rare but rarer still will be people willing to deploy it unless that fate is considered a good way to go.That tour is a remarkable use of the technology.\n \nreply",
      "It's something we have to be careful of while working on site! We're really careful around the rooms that have mercury in them--there are few that I didn't put in the guide also.I was wondering about this too: they've found high levels of mercury in the water supply at Maya cities and believe now it contributed to the eventual collapse: https://arstechnica.com/science/2020/06/mercury-and-algal-bl...\n \nreply",
      "> \u201cThe drinking and cooking water for the Tikal rulers and their elite entourage almost certainly came from the Palace and Temple Reservoirs,\u201d wrote Lentz and his colleagues. \u201cAs a result, the leading families of Tikal likely were fed foods laced with mercury at every meal.\u201dThis makes me think: what if today's rulers are being poisoned by something making them act like idiots?\n \nreply",
      "It could be that there is something making our leaders mentally ill, or it could be that only the mentally ill think that they should be leaders.\n \nreply",
      "Ha! that's the best theory yet\n \nreply",
      "This is great use of the technology. \nThere should be scans of all our national monuments, world wonders, etc.\nSo much better a use for the tech than just Redfin.\n \nreply",
      "Popping my comment cherry here!I\u2019m a 3D artist that is currently encountering staunch resistance of generating 3D models from drone captured photogrammetry of historically protected sites in Pennsylvania, USA.I\u2019ve had resistance from the state and county level in pursuing take off and landing permission at historical sites. Communicating my intentions of digital historic preservation with photogrammetry has been a difficult \u201csell\u201d.I\u2019m a licensed commercial remote pilot - however I need property owner permission to take off and land. Many sites are in state/county owned property in my area.\n \nreply",
      "Have you looked to see whether there is a local archaeology or social history society in your area that you could join? They will have individuals involved who are already used to dealing with property owners to arrange research projects, and you might be able to accompany them on the trips they organize. For reference, the archaeological society in my region serves around 400 square miles and typically organizes a low two-digit number of digs every year. There are also some other societies in the same region who focus on preserving and documenting recent history where excavation isn't required.Another idea: if you don't already have any formal education in history, you could study for some qualifications in the subject. It would probably do much to reassure landowners that you are not going to harm the sites in any way (although I struggle to think of a way you could do so with a UAV!) In any case, good luck; I'd love to see the models!\n \nreply",
      "Hey I'm really sorry! It's really hard. My photo permissions at Giza took two years to secure. My only advice is to keep showing up in person and hang in there--I feel for you!\n \nreply",
      "> staunch resistanceWhy?\n \nreply"
    ],
    "link": "https://mused.com/guided/158/temple-26-and-excavation-tunnels-copan-ruinas/",
    "first_paragraph": ""
  },
  {
    "title": "Asterinas: OS kernel written in Rust and providing Linux-compatible ABI (github.com/asterinas)",
    "points": 158,
    "submitter": "Klasiaster",
    "submit_time": "2024-10-15T12:01:59.000000Z",
    "num_comments": 63,
    "comments_url": "https://news.ycombinator.com/item?id=41847640",
    "comments": [
      "Decades ago Linus Torvalds was asked in an interview if he feared Linux to be replaced by something new. His answer was that some day someone young and hungry would\ncome along, but unless they liked writing device drivers Linux would be safe.This is all paraphrased from my memory, so take it with a grain of salt. I think the gist of it is still valid: Projects like Asterinas are interesting and have a place, but they will not replace Linux as we have it today.(Asterinas, from what I understood, doesn't claim to replace Linux, but it a common expectation.)\n \nreply",
      "More recently, in a similar vein:> Torvalds seemed optimistic that \"some clueless young person will decide 'how hard can it be?'\" and start their own operating system in Rust or some other language. If they keep at it \"for many, many decades\", they may get somewhere; \"I am looking forward to seeing that\". Hohndel clarified that by \"clueless\", Torvalds was referring to his younger self; \"Oh, absolutely, yeah, you have to be all kinds of stupid to say 'I can do this'\", he said to more laughter. He could not have done it without the \"literally tens of thousands of other people\"; the \"only reason I ever started was that I didn't know how hard it would be, but that's what makes it fun\".https://lwn.net/Articles/990534/\n \nreply",
      "> Hohndel clarified that by \"clueless\", Torvalds was referring to his younger selfAs the saying goes \"We do this not because it is easy, but because we thought it would be easy.\"Occasionally these are starts of great things.\n \nreply",
      "I feel like there's a potentially large audience for a kernel that targets running in a VM.  For a lot of workloads, a simple VM kernel could be a win.\n \nreply",
      "I personally dislike rust,  but I love kernels,  and so I'll always check these projects out.This is one of the nicer ones.It looks pretty conservative in it's use of Rust's advanced features.  The code looks pretty easy to read and follow.  There's actually a decent amount of comments (for rust code).Not bad!\n \nreply",
      "Rust code is usually well commented in my experience.\n \nreply",
      "for the downvoters: it\u2019s true, and it\u2019s because of rustdoc and doccomment tests.\n \nreply",
      "think the downvotes are because of relevance. point was not using advanced rust features, not being documented\n \nreply",
      "I don't see how the relevance is in question. GGGP said \"There's actually a decent amount of comments (for rust code).\" GGP seems to be responding to that parenthetical.\n \nreply",
      "Instead of asking \"what other languages and project (open/closed, big/small, web/mobile/desktop, game/consumerapp/bizapp) have you experience with as to come to this conclusion?\" people down vote you.So lemme ask: what other languages and project (open/closed, big/small, web/mobile/desktop, game/consumerapp/bizapp) have you experience with as to come to this conclusion?\n \nreply"
    ],
    "link": "https://github.com/asterinas/asterinas",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Asterinas is a secure, fast, and general-purpose OS kernel, written in Rust and providing Linux-compatible ABI.\n      \n\n    A secure, fast, and general-purpose OS kernel written in Rust and compatible with Linux\n\n\n\n\nEnglish | \u4e2d\u6587\u7248Asterinas is a secure, fast, and general-purpose OS kernel\nthat provides Linux-compatible ABI.\nIt can serve as a seamless replacement for Linux\nwhile enhancing memory safety and developer friendliness.Asterinas prioritizes memory safety\nby employing Rust as its sole programming language\nand limiting the use of unsafe Rust\nto a clearly defined and minimal Trusted Computing Base (TCB).\nThis innovative approach,\nknown as the framekernel architecture,\nestablishes Asterinas as a more secure and dependable kernel option.Asterinas surpasses Linux in terms of developer friendliness.\nIt empowers kernel developers to\n"
  },
  {
    "title": "Web Browser Engineering (2021) (browser.engineering)",
    "points": 646,
    "submitter": "MrVandemar",
    "submit_time": "2024-10-15T09:42:29.000000Z",
    "num_comments": 109,
    "comments_url": "https://news.ycombinator.com/item?id=41846780",
    "comments": [
      "One great thing about this book is the 'stuff I didn't do' part.Layout is really hard. Just tables by themselves are hard, even without any css around them. CSS makes layout impossibly difficult. I challenge anyone to keep the whole CSS spec and its associated behaviors in their head.At this point css + html + javascript have become a dynamic PDL, and probably is one of the most complex pieces of software today.As an aside, video decoding is offloaded onto hardware, so it's not as battery intensive as it used to be.\n \nreply",
      "For the absolutely massive amount of code one needs to implement for production-grade CSS layout, the Servo source code is illustrative and IMO quite cool to see. For instance, this file just implements block and inline contexts; there's a bit of Rust boilerplate here, but the vast majority of lines are \"business logic\" around various parts of the specification. And there's a whole folder of these. https://github.com/servo/servo/blob/main/components/layout/f...But implementing a layout engine is doable. CSS is not magic; there's a spec that can be (meticulously) transformed into code. I've occasionally showed code like this to people frustrated that CSS seems arbitrary, just to show them that there is a logic to the execution environment. Granted, you're not going to regularly click into it the way you'd click into the implementation of a library, but it's no different from something like React in that regard. I think it helps!\n \nreply",
      "FWIW, Pavel, one of the authors, has devoted considerable time into what is one of the very, very few attempts at a formal specification for CSS (the static/float layout fragment cf [1]). It's a Racket program generating Z3 SMT solver code for verifying an instance layout (which also looks like Scheme) so it's not for the faint-hearted ;) but maybe just what an FP fan on HN is looking for as a challenge.[1]: https://pavpanchekha.com/blog/css-floats.html\n \nreply",
      "Wow, thanks, you always suspect no one has actually read the papers :) That was a crazy project... I eventually got it passing almost all of the WPT css2 fragment.I'm still working on CSS layout, with hopefully another paper coming soon.\n \nreply",
      "For what it's worth, I'm just a devops person and I found that article on How CSS Floats Work to be very understandable :) Thank you for writing all this great stuff!\n \nreply",
      "In that case, you've got at least one avid reader ;)\n \nreply",
      "Yes, layout is difficult, especially because (I think):1. The most \"core\" parts of layout, like CSS 2 stuff, is pretty poorly considered with a bunch of weird features that interact in strange ways. (Floats and clearance? Margin collapsing?) Some parts of this \"core\" were intended to be universal even though they're a bad fit for other layout modes. (Margin and padding, for example, don't have a clear purpose for say grid elements.)2. It's not well-modularized the way JS APIs are. A JS API can often be implemented fairly stand-alone, but each layout module interacts with every other layout module since they can be nested in various ways. I think newer specs like grid are trying to be stricter with this but there are fundamental challenges: the actual 2D screen is a shared resource that different layout modes must split up.\n \nreply",
      "Layout is so difficult that it made me quit using Common Lisp and ncurses to build my passion project and become the very thing I swore to destroy (a React developer).I can't be the only one who wants a simpler layout language than CSS that's designed with two decades of hindsight to provide the maximum simplicity-expressiveness product. Are there any serious projects to engineer something like this, or has everyone given up and either embraced CSS3 (waiting for the LLVM backend) or gone back to plain text?\n \nreply",
      "Author here, and I also teach web dev, including CSS, at the University of Utah (including this semester). Newer parts of CSS, like flex-box layout are both simple and powerful. Just use those! I think it's important to start thinking about learning all of the Web Platform like you'd think about learning all of the Windows APIs or all of the Linux system calls or all of your favorite programming language's features. People rarely do! (I have 15 years of Python experience, and I do not understand metaclasses or async.) There are lots of weird obscure corners, but you don't need to know those to build websites.\n \nreply",
      "Check out laying out in Flutter: https://docs.flutter.dev/get-started/fundamentals/layout or Pax: https://docs.pax.dev/reference/layout/\n \nreply"
    ],
    "link": "https://browser.engineering/index.html",
    "first_paragraph": "Pavel Panchekha & Chris HarrelsonWeb browsers are ubiquitous, but how do they work? This book\nexplains, building a basic but complete web browser, from networking to\nJavaScript, in a couple thousand lines of Python.Web Browser Engineering will be published by Oxford\nUniversity Press before the end of the year. To get it as soon as it\u2019s\nout, pre-order\nnow!Follow this book\u2019s blog or Twitter for updates. You can\nalso talk about the book with others in our discussion\nforum.If you are enjoying the book, consider supporting us on Patreon.Or just send us an\nemail!"
  },
  {
    "title": "FreeBSD/EC2 boot performance over time (daemonology.net)",
    "points": 18,
    "submitter": "cperciva",
    "submit_time": "2024-10-15T23:12:51.000000Z",
    "num_comments": 16,
    "comments_url": "https://news.ycombinator.com/item?id=41854075",
    "comments": [
      "Presumably seconds since I'm not sure what else would make sense here. It'd also be helpful if the y axis had consistent scale between each graph and horizontal lines are set y axis intervalsSeems zfs is quite a bit faster than ufs\n \nreply",
      "The different X axes are because I figured there's no point having a bunch of graphs which are 90% empty.  For a long time we only had base/UFS images.  (Even arm64 came a few years later than amd64.)\n \nreply",
      "That's an impressive drop from 30 minutes in 2019 to under 10 minutes today.No, wait .. maybe that's seconds? milliseconds?\n \nreply",
      "Seconds, yes.  Sorry I figured that was obvious, I'll add it to the graphs I generate next week.\n \nreply",
      "Thank you! Was about to ask for axis labels as well. I assumed seconds but I had some doubts because there were no labels!\n \nreply",
      "Microts!\n \nreply",
      "Is there an architectural change and/or approach to which the boot performance increase(s) can be attributed?If not, which is understandable, is there something specific to stable/14 for interested parties to familiarize themselves with?\n \nreply",
      "My impression is that cperciva has been working on FreeBSD/EC2 boot times for the last six years, not just specifically some changes in 14.The most accessible summary of his work is probably on his Patreon: https://www.patreon.com/c/cperciva/posts. If you go digging there are also some anecdotes on his Twitter too; most recent I can find is https://x.com/cperciva/status/1833735559614988526\n \nreply",
      "Would be nice to see how this compares to Linux, I think, for perspective.\n \nreply",
      "I did that comparison a few years ago: https://www.daemonology.net/blog/2021-08-12-EC2-boot-time-be...Re-running the comparison with Linux AMIs from 2024 is on my to-do list.\n \nreply"
    ],
    "link": "https://www.daemonology.net/freebsd-ec2-boot-performance/",
    "first_paragraph": "\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "title": "Apple introduces iPad\u00a0mini built for Apple\u00a0Intelligence (apple.com)",
    "points": 172,
    "submitter": "diwank",
    "submit_time": "2024-10-15T14:35:29.000000Z",
    "num_comments": 272,
    "comments_url": "https://news.ycombinator.com/item?id=41849058",
    "comments": [
      "If it were possible to do so, I would possibly buy this as my new \"phone\":   - I almost never hold my phone to my ear\n   - I don't need the dual-lens features of the new iPhones\n   - Standby battery life seems up to the challenge\n   - Apple doesn't offer the iPhone Mini anymore, which is what I'm carrying now. If I'm going bigger, why not actually go BIGger.\n\nThings holding me back:   - Not actually sure about the battery life\n   - As far as I know you can't transfer your actual phone line to a Mini\n \nreply",
      "Samsung has a Galaxy fold which I\u2019m interested in buying as a second device. I\u2019d imagine Apple has to have something similar as a prototype as it seems like a no brainer\n \nreply",
      "Problem with current folds is that I want the screen to open/extend. I don't want to open YET ANOTHER LARGER screen. This makes most sense tbf. You want a phone to extend into a tablet, and actually have the first screen still be usable. It cuts down cost and waste of always having at least one screen always off.Original Huawei mate x and the new trifold does what I'd like. But then again... Huawei so can't in US lol.\n \nreply",
      "Google Voice?\n \nreply",
      "Why is the bezel so thick?  A 1-2cm bezel around the entire \"mini\" device seems a bit odd, given that the iPad Mini is a relatively tiny device and phones these days come with a 1-2mm bezel (10x less useless border).Is it a cost saving measure / sneaky margin increaser, or what might be the motivation?Edit:Touch interference is a good idea.  Still, from the picture, it looks like the bezel could be half as thick and work well.  Sorry to be such a stickler, I am genuinely curious if Apple is chasing better margins, the best feasible UX, or something else.Could it be that since this device is only $650 USD, it isn't expensive enough to warrant a premium display? (Like the iPhone SE https://www.apple.com/iphone-se/)If so, I wish there was a fancier \"Pro\" model with premium components.  IIRC, I paid $1000 for my first iPad, it was the first super high-resolution one back in 2012.  Perhaps there aren't enough customers who are sensitive to wasted screen real estate on an 8-inch device.. and FWIW I have noticed a constant stream of toddlers pacified by iPad Minis whenever I'm at Costco.\n \nreply",
      "So that they can release a successor model with thinner bezels.In reality this may be to (1) to keep costs down and (2) to distance the iPad mini from the more premium iPhone Pro Max.All in all, this device leaves me wondering who this is for? iPads are mostly used for media consumption, no matter how Apple wants to position them. Not sure why this necessitates AI hardware, but perhaps people really start using iPads for productivity/creativity workloads that can make use of \u201cApple Intelligence\u201d (the silliest moniker since \u201cSpatial Computing\u201d and \u201cRetina Display\u201d).The comparatively small difference in screen real estate between an iPhone Pro Max and the iPad mini makes the latter rather pointless. Perhaps they are targeting people with a smaller iPhone who want another device to watch YouTube. What could have made a difference is a folding display. I think the iPad mini would have been the ideal candidate for that.\n \nreply",
      "> Perhaps they are targeting people with a smaller iPhone who want another device to watch YouTube.Hi, it me.I have an iPhone 13 Mini that will have to be pried from my cold dead hands because it's about as big a phone as I'm willing to carry (I'd still rather have the 5s form factor.)I also have an iPad Mini that supplements it perfectly.Really don't want anything larger, because I like to handle it with one hand while walking or I'm propping it up in a tight space like when I'm watching a how-to video while doing a home-improvement project or working on my car.There is absolutely no way I'd buy a phone as gigantic as a Max.Honestly not sure how people walk around with those things.\n \nreply",
      "> All in all, this device leaves me wondering who this is for?Who is any iPad for? They\u2019re nice screens attached to good processors.I bring mine to work to either read or watch videos over my lunch break. Don\u2019t want the full size of a regular iPad. Don\u2019t want to use my work laptop with my personal service accounts like YouTube, Netflix, kindle, etc.And while the Mini is small, it\u2019s still a substantial screen size increase over using my regular sized iPhone for that purpose.\n \nreply",
      "> All in all, this device leaves me wondering who this is for?You know, you could just read all the other comments on this post talking about why they like the mini.\n \nreply",
      "People like to spend 1 minute looking at a product and pretend they've done a market analysis by only looking at their own consumption patterns or those of their very close group of people around them combined with some stereotypes like \"people use tablets for media consumption\" (and never do anything else on them in between).\n \nreply"
    ],
    "link": "https://www.apple.com/newsroom/2024/10/apple-introduces-powerful-new-ipad-mini-built-for-apple-intelligence/",
    "first_paragraph": "Text of this articleOctober 15, 2024PRESS RELEASEApple introduces powerful new iPad\u00a0mini built for Apple\u00a0IntelligenceThe ultraportable iPad mini is more capable and versatile than ever with the powerful A17 Pro chip and support for Apple\u00a0Pencil\u00a0ProCUPERTINO, CALIFORNIA Apple today introduced the new iPad mini, supercharged by the A17 Pro chip and Apple Intelligence, the easy-to-use personal intelligence system that understands personal context to deliver intelligence that is helpful and relevant while protecting user privacy. With a beloved ultraportable design, the new iPad mini is available in four gorgeous finishes, including a new blue and purple, and features the brilliant 8.3-inch Liquid Retina display. A17 Pro delivers a huge performance boost for even the most demanding tasks, with a faster CPU and GPU, a 2x faster Neural Engine than the previous-generation iPad mini,1 and support for Apple Intelligence. The versatility and advanced capabilities of the new iPad mini are taken t"
  },
  {
    "title": "Mothbox 4.0 (digital-naturalism-laboratories.github.i...)",
    "points": 168,
    "submitter": "bookofjoe",
    "submit_time": "2024-10-15T14:10:58.000000Z",
    "num_comments": 22,
    "comments_url": "https://news.ycombinator.com/item?id=41848804",
    "comments": [
      "Hi! I'm andy! I'm the guy who spent the past year making the Mothbox! I don't know how this got on ycombinator, but cool! We are working here together Let me know if you have any questions!Some quick basics:\nIt's an entirely open source system made from off-the-shelf parts made so you can build one yourself!\nWe built it to help a set of community reforestation initiatives here in Panama! (Existing automated insect monitors we checked out wouldn't work for us because:\n1) They were REALLY BIG (like huge heavy suitcase size+)\n2) They were really EXPENSIVE (like 7000-15000$ !)\n3) There wasn't any info to build robust ones that could withstand months in the rainforest!So we build one ourselves! We started with absolutely no budget, and the costs that people have noticed ($375) are really the cheapest you can find these parts (Pi5 + big battery + 64MP camera + really bright lights), and for instance are on par with the $200 just for the 16mp logitech webcam employed in many existing insect monitors!We got about 20 of these out in the wild here in Panama already, and are literally building more in the jungle as I'm typing this!\n \nreply",
      "BioClip (referenced in their writeup) is good to know about.I run a small scale wildlife monitoring program with usually 3 cameras (depending on how many are being repaired for battery terminal corrosion). Each month I skim through and categorize ~200 videos that we've captured. Doesn't take too long, but it would be nice to automate at some point.\n \nreply",
      "BioCLIP won the CVPR best student paper award: https://cvpr.thecvf.com/Conferences/2024/News/AwardsHaving talked with Sam, they're working on BioCLIPv2. So expect even better results sometime soon.\n \nreply",
      "Do you use any kind of protectant, like dielectric grease or Deoxit? I find applying to both the equipment and battery contacts saves a lot of headaches on my work phone, ATV, trailer lights connectors and anything else powered I use in the field.\n \nreply",
      "No, but great idea. Once I get the current batch back from the repair shop I'll start doing that.\n \nreply",
      "We use some dielectric grease when we have to make some outdoor connections and it works great here in the jungle, and it also has the bonus of keeping the leaf cutter ants from slicing up your electronics too!\n \nreply",
      "Are there any \"citizen science\" initiatives where I can buy a device like this and upload my insect counts to some database that's useful for researchers?I have been interested in setting up some things like home weather monitoring, ADS-B, streaming webcams for wildlife, etc. anyway so this would be a fun item to add to that.\n \nreply",
      "Cornell is doing something along those lines for birds using audio recordings. It\u2019s just a smartphone app though - https://merlin.allaboutbirds.org/sound-id/\n \nreply",
      "I have a pi running birdnet-pi on my porch.\nhttps://www.birdweather.com/birdnetpi\n \nreply",
      "I was using it today, and any day when there are birds around. It correctly identifies birds you can barely hear. It's become as useful as binoculars to me. A great free app.\n \nreply"
    ],
    "link": "https://digital-naturalism-laboratories.github.io/Mothbox/",
    "first_paragraph": "The Mothbox is a low-cost, high-performance insect monitor. It features a power efficient and lightweight design meant to help field biologists deploy it in the depths of the jungles, and its low-cost nature means you can build one to study the biodiversity at your home!All the physical designs, electronics schematics, Pi Scripts, and insect-IDing Artificial Intelligence are provided free and open source, so you can build, share and improve on these designs yourself!See the full specifications of what it can do here.Insect populations can be used as an ultra high resolution sensor for changes in environments.Of all life on earth (including bacteria) there are about 2 million species scientists have described and half of the species are insects! What\u2019s more, if you look at just Moths there are about 144,000 species, meaning about 1 in every 14 species in the world is a moth! For reference there are only about 11,000 bird species, and only 6500 species of mammals (and half are bats and r"
  },
  {
    "title": "Show HN: Pumpkin \u2013 A Modern Minecraft server written in Rust (github.com/snowiiii)",
    "points": 272,
    "submitter": "alex_medvedev",
    "submit_time": "2024-10-15T09:18:16.000000Z",
    "num_comments": 114,
    "comments_url": "https://news.ycombinator.com/item?id=41846636",
    "comments": [
      "The performance differences look pretty impressive from the benchmarks.  I do notice that world generation and saving features are missing though, and these tend to be pretty expensive operations.  Chunk gen especially can bring a weaker VPS to its knees.  I'm sure the benchmarks were taken at an idle state, but I'd be curious to see how it compares once those features are included and being used.I don't see it listed, but is there support for block breaking/placing yet?  Presumably this would require light recalculation and a chunk update on the server.Finally, do you plan to add advanced features like scoreboard, teams, or command block parsing in general?  Mojang has at least open-sourced Brigadier for that.Cool project.  Hope to see it mature to the point of making servers easier to run on low-end hardware.\n \nreply",
      "Chunk gen makes sense to implement last or never. If you want a performant Minecraft server you need to pregen all the chunks anyway. You can still later regen chunks that have never been visited to get new chunkgen on updates since chunks store the inhabited time.I think Minecraft server re-implementations are pretty neat and I like to see when a new one comes out. There are also specific purpose server impls like MCHPRS for doing fast redstone compilation for technical minecraft.\n \nreply",
      "Hey. Im impressed with the benchmarks myself tbh.Yep block placing and breaking is already supported, but light currently don't so everything is dark :/, We are working on it.\nYep, We want to add all cool features like scoreboards, teams and we already have a API which is similar to use to Brigadier for our Commands.Thanks, I would love to give players on low-end hardware the possibility to host servers. I think i may test Pumpkin on a raspberry PI or something one day\n \nreply",
      "I remember Notch talking about the lighting calculations being one of the hardest parts to program, so I can understand that being a challenge.Mojang made large improvements to the lighting engine in 1.20, bringing it in line with the performance mods Phosphor[1] and Starlight[2].  Despite being deprecated now, they might still offer some useful insight into how to approach such a system in a performant way.  You'll need to be mindful of the licenses, but it's likely easier than reverse-engineering Minecraft (even with mappings).[1] https://github.com/CaffeineMC/phosphor-fabric[2] https://github.com/PaperMC/Starlight\n \nreply",
      "Will definitely take a look at this, Thank you. Im btw studied the Minecraft code already so i often use the decompiled code as reference.\n \nreply",
      "Are there any benchmarks for it? How much faster is it than a vanilla server?I know Minecraft servers tend to get extremely resource intensive as the player count creep and people run extremely beefy servers to handle the load and still offer poor TPS.\n \nreply",
      "Hey, Your lucky, i just made benchmarks all this time :D. Check them out\nhttps://snowiiii.github.io/Pumpkin/about/benchmarks.html\n \nreply",
      "Please, just use one measurement unit across all measurements for easier comparison (i.e. RAM in MB, time in ms).Wow. Pumpkin's runtime is way better (faster, much less RAM used) than the Java versions. Congrats.I wonder what the Kotlin-based Minestom is doing differently that causes it to have numbers between Pumpkin and the Java versions.For comparison's sake, do you have build times for Pumpkin? I'll assume that's where critics may target.\n \nreply",
      "I literally said Holy Shit out loud. This is an incredible improvement, and I'll refer to this in the future when I'm asked if we should make something new in Java.\n \nreply",
      "Keeping in mind that this server appears to implement only a tiny subset of the features the ones it is benchmarked against do... No lighting, mob spawning, mob ai, redstone functionality, tree or plant growth, water/lava flow, etc.\n \nreply"
    ],
    "link": "https://github.com/Snowiiii/Pumpkin",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Empowering everyone to host fast and efficient Minecraft servers.\n      \n\n\nPumpkin is a Minecraft server built entirely in Rust, offering a fast, efficient,\nand customizable experience. It prioritizes performance and player enjoyment while adhering to the core mechanics of the game.ImportantPumpkin is currently under heavy development.Check out our Github Project to see current progressSee our Quick Start Guide to get Pumpkin runningContributions are welcome! See CONTRIBUTING.mdThe Documentation of Pumpkin can be found at https://snowiiii.github.io/Pumpkin/Consider joining our discord to stay up-to-date on events, updates, and connect with other members.If you want to fund me and help the project, Check out my GitHub sponsorsA big thanks to wiki.vg for providing valuable information used in the development of this project.\n        E"
  },
  {
    "title": "Why Don't We Use Awnings Anymore (thecraftsmanblog.com)",
    "points": 36,
    "submitter": "samclemens",
    "submit_time": "2024-10-15T22:11:35.000000Z",
    "num_comments": 22,
    "comments_url": "https://news.ycombinator.com/item?id=41853637",
    "comments": [
      "The \"Technology Connections\" youtube channel recently discussed awnings too. (And it had more or less the same message as this blog.)https://www.youtube.com/watch?v=uhbDfi7Ee7k\n \nreply",
      "And that has way more details than this. The only why supplied here is \"we forgot\" and \"AC\"\n \nreply",
      "We have a retractable on our south-facing patio door/window near San Jose and it's made a huge difference in terms of heat rejection after we installed it. On hot summer days it makes a noticeable difference. And since it's retractable it doesn't make the back room permanently dark. It's one of the major items that lets us survive a south bay summer without air conditioning. We'll probably upgrade our gas furnace to a heat pump eventually and get AC \"free\" but in the meantime this was a much cheaper stopgap.\n \nreply",
      "I came to say the same thing. Ours is above our back sliding glass door which is about 8\u2019 wide. Does a great job keeping the room cool in the summer.\n \nreply",
      "I think the builders of the past would be amazed by modern technology like argon filled double paned windows with advanced window films to reflect the heat instead of letting it in.But yes, let's bring back the awnings too. Sometimes the low tech ways are easiest and best. I will say that I don't think awnings alone can save a stick built modern house from the heat. Part of the key to old houses staying cool was high thermal mass: lots of brick and stone that could stay cool during the day. As great as modern insulation is at keeping hot and cool separate, a modern insulated wall doesn't cool it's surroundings like a high thermal mass wall would.Moving to a world where we combine passive cooling and high thermal mass construction with the benefits of modern tech will be key in my opinion.\n \nreply",
      "> As great as modern insulation is at keeping hot and cool separate, a modern insulated wall doesn't cool it's surroundings like a high thermal mass wall would.Why does modern insulation hold less thermal mass? Is it just that trapped air has less mass than stone?\n \nreply",
      "That's exactly the reason. Technically it's actually the amount of energy needed to heat a volume of material, not the physical mass, that is important. But for many materials the two go hand in hand.\n \nreply",
      "Fiberglass insulation reduces convection but has no mass like rock wool\n \nreply",
      "There\u2019s Argon in those? Interesting. I wonder if anyone\u2019s tried adding an electrode for plasma effects.\n \nreply",
      "We don\u2019t use awnings because of roof overhangs. Local architects compute the sun angle for the given location. During the winter you can allow more light in and during the summer when the sun is higher, you can let less light in.\n \nreply"
    ],
    "link": "https://thecraftsmanblog.com/why-dont-we-use-awnings-anymore/",
    "first_paragraph": "When you look at old black and white pictures of cities from before the 1950s you may notice something on most buildings that are no longer there today. Awnings. They were ubiquitous over nearly every window of buildings from the most basic single family home to massive buildings like The White House.Where did all these awnings go and why did they disappear? Before we answer that let\u2019s look at what an awning actually does for a building.Awnings were and still are extremely effective at blocking solar heat gain through windows. We often look at builders from the 19th century with a pitying condescension like they just weren\u2019t as smart as we are today. To me it\u2019s really despicable the lack of respect we give these incredibly talented contractors who were able to design and construct these solid structures that have withstood the test of time without the use of computers, power tools, or energy codes.They built these structures with incredibly clever passive heating and cooling systems li"
  },
  {
    "title": "Beyond Dune: Accelerating with EVM Query Language (eql.sh)",
    "points": 16,
    "submitter": "iankguimaraes",
    "submit_time": "2024-10-15T21:45:32.000000Z",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=41853441",
    "comments": [
      "This is cool! In rust, nonetheless. is blob support planned? Will definitely be messing around with this.\n \nreply",
      "EVM Query Language (EQL) offers a fast, streamlined alternative to Dune for querying blockchain data, specifically optimized for EVM chains. While Dune excels at large-scale data visualization across multiple blockchains, EQL shines in speed and simplicity for Ethereum-specific tasks like transaction lookups and account state queries.EQL\u2019s SQL-like syntax is intuitive for developers, offering faster results for focused datasets, while Dune is more suited for handling complex, multi-blockchain queries and robust visualizations. Benchmark tests demonstrate EQL\u2019s superior speed in tasks such as fetching account states and transactions, though Dune outperforms in block range queries.Ultimately, EQL is a lightweight, open-source option for developers who need quick, efficient blockchain queries, while Dune is better for larger, more complex data processing with advanced visualization capabilities.\n \nreply"
    ],
    "link": "https://www.eql.sh/blog/how-is-it-different-from-dune",
    "first_paragraph": "The title of this article captures the initial reaction many people have when they first learn about EVM Query Language (EQL). Although there are surface-level similarities between EQL and Dune, these two projects are fundamentally distinct in their goals, design, and use cases.EQL and Dune serve distinct purposes: while Dune excels at data visualization and cross-chain querying, EQL is optimized for efficiently querying EVM chains using a simplified SQL-like syntax. EQL\u2019s syntax is designed to be intuitive, making it easier for SQL users to adapt to, especially those familiar with querying blockchain data. While Dune provides more comprehensive data handling capabilities for larger datasets and complex queries, EQL outperforms Dune in tasks such as transaction lookups by hash and account state retrievals, particularly when working with smaller, more focused datasets. However, for large-scale queries involving multiple blocks or datasets, Dune\u2019s robust infrastructure and caching mechan"
  },
  {
    "title": "Forscape \u2013 A Language and Editor for Scientific Computation (github.com/johndtill)",
    "points": 56,
    "submitter": "faresahmed",
    "submit_time": "2024-10-15T10:14:41.000000Z",
    "num_comments": 11,
    "comments_url": "https://news.ycombinator.com/item?id=41846986",
    "comments": [
      "Code typography is such a neglected area, I'm glad to see any projects that touch on that. This reminds me of Suns Fortress language, which was designed also for scientific computing (afaik more in HPC sense), and also allowed rendering code into pdf with improved typography. Unfortunately lot of the original Fortress resources have linkrotted away, but there are some examples in this presentation (by Guy Steele!) https://www.cs.tufts.edu/comp/150FP/archive/neal-glew/mcrt/F...\n \nreply",
      "Arguably the most successful effort in this space is:http://literateprogramming.com/I use it in a current project using LaTeX:https://github.com/WillAdams/gcodepreview\n \nreply",
      "I checked the linked PDF[1] as an example, and the codeblocks are still just basic plain monospaced blocks with practically no typesetting done to them; very different from something like Fortress, or indeed this Forscape[1] https://github.com/WillAdams/gcodepreview/blob/main/gcodepre...\n \nreply",
      "This is super cool! Recently, I've been musing about the potential ergonomics of programming directly with rich typography, and here Forscape's kind of gone and done it.The project seems to be specifically targeting working scientists, but I think there's real potential for using mathematical and math-like notation in a general programming language. The array language family does adopt a few of the affordances from math, and even that partial pick-up gives them some ergonomic features not seen elsewhere.At the moment, we're kind of stuck in the paradigm of linear input, only using very limited typography for somewhat dumb syntax highlighting. Math-like notation is really nice at conveying semantics and intent in ways that are really challenging in current languages. For example, sub- and superscripts effectively act as function parameters but give extra freedom for conveying the different meaning and use of said parameters. Things like Haskell's generic infix syntax, named parameters, optional arguments, etc. can be seen as ways of trying to work around current limitations.The biggest question for me is input, which Forscape seems to address quite nicely. We don't just want to typeset our code prettily, we want to have all the affordances of advanced typography directly available as we code.I'd love to hear user stories from Forscape: Do you like the mouse-oriented editor experience or do you prefer keyboard shortcuts? What is easiest for you to express in Forscape the language? What is most challenging? Where does the system diverge most from the natural expression? For those with a programming or CS background, how easy is it to reason about memory access and execution? Etc.Thanks for sharing!\n \nreply",
      "Mathematica also has some fairly advanced typographic syntax. Matrices, subscripts, integral signs, with a decent input system to match. Type <ESC>dint<ESC> to get a definite integral with placeholders.One particularly nice thing about it is that it's completely optional sugar over a lispy \"FullForm\" syntax, and it's easy to convert between the two.I'd encourage everyone to play with it, but it's sadly non-free.\n \nreply",
      "Insane. This must have been so much work, and it looks great, but I know I will never use it.\n \nreply",
      "Is the name a play on Farscape, or is that coincidence?\n \nreply",
      "Why this rather than LyX, Texmacs, Jupyter Notebook, LaTeX (and a suitable editor), or Typst (and a suitable editor)?\n \nreply",
      "If you asking this, you are the wrong audience. All academic journals accept submissions in Microsoft Word, this is a similar tool targeted at the WYSIWYG crowd.\n \nreply",
      "you both are missing the main point here, Forscape is not for writing documents, but for writing executable code.\n \nreply"
    ],
    "link": "https://github.com/JohnDTill/Forscape",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Scientific computing language\n      Forscape aims to solve engineering problems with low-cost abstraction, safety checks, and an intuitive user experience. The editor supports math rendering so that objects such as matrices, fractions, and symbols can be programmed in parity with scientific papers and notes.Forscape has particular emphasis on matrices. Standard matrix operations such as multiplication, norm, cross product, transpose, etcetera are supported with mathematical syntax.The editor code-model interaction has various features for matrices. The syntax highlighting will bold matrix identifiers. Where possible, dimensions are checked at compile time with violations highlighted in real time while typing. Hovering over an identifier will show the compile-time dimensions in the tooltip.But first, a warning. Forscape is in early a"
  },
  {
    "title": "All possible plots by major authors (2020) (the-fence.com)",
    "points": 131,
    "submitter": "ohjeez",
    "submit_time": "2024-10-15T19:06:43.000000Z",
    "num_comments": 92,
    "comments_url": "https://news.ycombinator.com/item?id=41852009",
    "comments": [
      "#All possible codebases by major programmersLinus Torvalds: you take a week-long swing at a problem you find annoying, fascinating, or both. The result enjoys staggering worldwide success in the ensuing decades, despite being clearly outclassed by some alternative from the GNU project that, pinky promise, is coming out any day now.Grace Hopper: BEGIN a framework that powers critical government functions, AND has secretly saved America from mass destruction time and again, only to be dunked on by Reddit for trivial matters of syntax END.John Carmack: Doom, but better-looking.Brendan Eich: you take a week-long swing at a problem your employer finds commercially compelling. The result enjoys staggering worldwide success in the ensuing decades, despite being clearly outclassed by the prior art it was supposed to build on.\n \nreply",
      "Fabrice Bellard: A problem with several competing solutions catches your fancy. Within a week you have a gleaming, state-of-the-art solution that is flexible, reliable, and extensible\u2014all written in pure, efficient C. Everyone begins to build on your work.Donald Knuth: While writing your magnum opus, a minor irritation arises. You invent a new subfield of computing and spend two years developing a highly idiosyncratic language and tool system.\\footnote{And several new typefaces!} Your irritation dissipates and you go back to work with your writing. Generations of academics curse your creation but have nothing better to work with. They wonder if they can get Fabrice Bellard to take a crack at it\u2026\n \nreply",
      "> Brendan Eich: you take a week-long swing at a problem your employer finds commercially compelling. The result enjoys staggering worldwide success in the ensuing decades, despite being clearly outclassed by the prior art it was supposed to build on.Pretty brilliant, right? Right?\n \nreply",
      "I would like to quote the creator of Dogecoin:> In reply to that, Mr Markus was asked whether he had considered energy usage when creating the cryptocurrency.> \u201ci made doge in like 2 hours i didn\u2019t consider anything,\u201d he wrote.\n \nreply",
      "Please forgive my JavaScript joke: it\u2019s really just a poorly-written series of callbacks.\n \nreply",
      "It wasn't that great, but some of the callbacks had promises...\n \nreply",
      "You merely extended the prototype\n \nreply",
      "Jack Woodford, a decent pulp writer in the first half of the 20th century who also wrote several books on writing and on how the publishing industry works, including \"Trial and Error\" in 1933 which Robert Heinlein and Ray Bradbury both cited as a major influence in getting their writing careers started, had a nice description of how to plot:> Boy meets girl; girl gets boy into pickle; boy gets pickle into girl\n \nreply",
      "Every New Yorker short fiction: our protagonist, a slightly dislikable person, suffers from a medium-high amount of ennui.\n \nreply",
      "Terry Pratchett: A visionary on the Discworld invents something vaguely like a modern object or industry. That invention enslaves the visionary and must be stopped by a crotchety old person who hates change.\n \nreply"
    ],
    "link": "https://www.the-fence.com/plots-major-authors/",
    "first_paragraph": ""
  },
  {
    "title": "Show HN: A Markdown-based alternative to package.json scripts and makefiles (github.com/tzador)",
    "points": 41,
    "submitter": "timz",
    "submit_time": "2024-10-13T05:15:31.000000Z",
    "num_comments": 16,
    "comments_url": "https://news.ycombinator.com/item?id=41825344",
    "comments": [
      "X is kinda overloaded. Maybe \"makedown\"? Or something?I just do mine in bash (make.sh) and it runs scripts from make.d/ which are in whatever (python, js bash, PHP)\n \nreply",
      "Makedown is a good name. +1 vote from me (in case it counts)\n \nreply",
      "Love  the makedown name, renaming..\nAs for a short name available in terminal, we can add alias m=\"makedown\" as part of zsh completion script.\nBoth:\n$ makedown deploy-to-production\nand\n$ m deploy-to-production --help will workAditionally we can generate html out of the, now `makedown.md`, right in the tool:\n$ makedown --html makedown.html\nor\n$ m --pdf makedown.pdf\n \nreply",
      "Remember to change it in the readme as well\n \nreply",
      "It\u2019s great to see more tools taking advantage of the markdown syntax.I\u2019m the creator of Mask[0], a very similar tool built with Rust. I was originally inspired by Maid[1], which is an older take on this idea built with Node and no longer maintained I believe.I see this is based on Node as well, and I appreciate that it currently has zero dependencies. Nice work![0]: https://github.com/jacobdeichert/mask[1]: https://github.com/egoist/maid\n \nreply",
      "It'll be nice if you could make it level 2 headers. Reason: if we want to make it html to display as a webpage, we won't end up with multiple H1s, and we can have a H1 for like the name of the app or something.\n \nreply",
      "Great suggestion. On it\n \nreply",
      "Plus points for being a readable format that can be displayed great on HTML or PDF.At the same time easy to edit and easy to enhance with different build languages as needed.\n \nreply",
      "Nice idea! Can I reuse variables that I have defined in e.g. a JS code block in another ZSH code block and vice versa?\n \nreply",
      "published 0.3 version\npnpm install -g @tzador/x.md- better --help messages with or without command\n- ## level 2 headers are used\n- the temp file is created in current folder, like that importing npm modules from current project works\n \nreply"
    ],
    "link": "https://github.com/tzador/x.md",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Organize your CLI scripts in executable markdown files\n      makedown.sh is a versatile CLI tool that lets you execute shell scripts,\nJavaScript code, and Python code from one or more markdown files.\nIt's a streamlined alternative to Makefile or package.json scripts,\nand it features built-in syntax highlighting through markdown code blocks.Define and document your commands in a markdown file, like DEMO.md.Then use makedown.sh to run them, from within the same directory or any subdirectory.\n        Organize your CLI scripts in executable markdown files\n      "
  },
  {
    "title": "Australian coal plant in 'extraordinary' survival experiment (abc.net.au)",
    "points": 27,
    "submitter": "h0l0cube",
    "submit_time": "2024-10-13T21:37:45.000000Z",
    "num_comments": 21,
    "comments_url": "https://news.ycombinator.com/item?id=41831861",
    "comments": [
      "I don't know why, from the start, we haven't used nuclear power more for baseload.China is already building between 6 to 8 nuclear power plants a year and plans to expand that number to 10 a year.It's nothing compared to all the other sources of power they are creating, but it seems to me that rather than investing in mass battery storage, a few dozen modern nuclear power plants would be a good idea.Assuming, of course, you can actually get costs down and cut through red tape like China can.\n \nreply",
      "It makes sense to run coal for another 5-10 years if you can to transition to batteries. This will likely put more stress on the parts and the plant will become unserviceable sooner but that\u2019s better then retiring it now\n \nreply",
      "I wonder what kind of arrangements they had to make to keep things hot while not producing power. I'm assuming that you could keep the shaft spinning at near operating speed, and hold the temperature of the turbines, etc...  the big question for me is the boiler tubes themselves you'd have to essentially turn the whole firebox into a superheater, pulling just enough steam out to keep the turbine supplied, and the make-up water flowing.This stuff really isn't designed to be throttled up and down like a yo-yo. I'm amazed they were able to do it at all, and seem confident they can keep it up.\n \nreply",
      "The article skirts around saying that not much damage is happening in two-shifting operation.What kind of damage is expected? Is two-shifting a sacrificial operational mode that\u2019s planned to see the coal be sunset in the next decade?\n \nreply",
      "Well said, but as the article goes on, it seems even with no technical hurdles this innovation seems dead in the water with policy. At least they're not doing what the Germans have done, shutting down coal power plants and buying Polish electrical generation... made with coal power plants.\n \nreply",
      "Oh this is the oldest trick in the book. If you need to greenwash, then just burn the coal somewhere else. Easy.Los Angeles has been doing this for decades - for years the largest single energy source for LAPW has been an 1800MW coal burning plant that they operated in Utah, which has very loose environmental regulations.\n \nreply",
      "I sometimes wonder how directly some of the big flashy renewable energy projects in Australia are funded by coal exports to China...",
      "Germany is a net exporter of power to Poland.\n \nreply",
      "Poland imports slightly more from Germany than it exports to it, and isn't in the top 5 countries that Germany imports electricity from.\n \nreply",
      "It would be a good thing if you could trust utilities and energy companies to use this new-found flexibility as a way to minimize coal use on the way to carbon neural energy generation.But I think we've seen there can be no trust there and so this is a bad thing that will help the coal industry survive. I'm not saying other industries are \"good\" but this industry is definitely evil.\n \nreply"
    ],
    "link": "https://www.abc.net.au/news/2024-10-13/australian-coal-plant-in-extraordinary-survival-experiment/104461504",
    "first_paragraph": "Search the news, stories & peoplePersonalise the news andstay in the knowEmergencyBackstoryNewsletters\u4e2d\u6587\u65b0\u95fbBERITA BAHASA INDONESIATOK PISINTopic:CoalCoal plants like Bayswater have been the pillars of Australia's power supply. But that's changing. (Reuters: Loren Elliott)After years of setbacks, bad news and mounting obstacles, Australia's coal-fired generators must have felt they had something to celebrate.AGL, the giant energy company backed by tech billionaire and climate evangelist Mike Cannon-Brookes, revealed it had pulled off a first.At its huge Bayswater power station in the Hunter Valley north of Sydney, AGL successfully switched off an entire unit before switching it back on again just five hours later \u2013 a feat until recently considered unthinkable.In a post on social media, Bayswater general manager Len McLachlan said this process of \"two-shifting\" was a harbinger of the future.Throughout its history, coal-fired power had been considered the quintessential provider of so-call"
  },
  {
    "title": "Life expectancy rise in rich countries slows down: took 30 years to prove (nature.com)",
    "points": 98,
    "submitter": "andsoitis",
    "submit_time": "2024-10-15T13:39:08.000000Z",
    "num_comments": 182,
    "comments_url": "https://news.ycombinator.com/item?id=41848482",
    "comments": [
      "Our organization (the American Federation for Aging Research) is hosting a webinar with Jay Olshansky (author of the paper) and Andrew Scott, a leading economist in longevity to discuss Jay's results on 10/22.The gist is that this isn't quite as cut and dry as it may seem.We also paid to make the Nature Aging paper open access.Event: https://www.afar.org/events/webinar-lifeexpectancy-1\n \nreply",
      "> We also paid to make the Nature Aging paper open access.That\u2019s awesome! Did you make a deal with the authors to pay for the fee during publication or is this something anyone can do by approaching the journal itself?\n \nreply",
      "Thanks! I wasn't directly involved in that discussion, but I imagine anyone can do it. It is a requirement for some grants and for some research funders.Edit: if you need to know I would just ask the editor if it's an option\n \nreply",
      ">We also paid to make the Nature Aging paper open access.What a world to live in.\n \nreply",
      "> Can we overcome ageing?75% American are overweight..Just let it sink a second, they speak about how many baby born after 2000 will reach 100 years old, how we are reaching the absolute limit of human survival.75% overweight... Everyone know fat people don't live long. I bet all the studies done in the 90's that predicted we would easily be able to reach 100 years old didn't take that into account.\n \nreply",
      "I'm thinking that ozempic and zepbound will have something to say about this. When ozempic becomes available as a generic (2032) it's going to be available for $10 a dose and a huge amount of people will be taking it.\n \nreply",
      "How do you know they don\u2019t have side effects that would reduce max life expectancy?\n \nreply",
      "Entirely possible they do - but those effects would probably manifest in some fashion earlier than actual death. We'll have at least 7 years to see if we can spot them. But, even if they do exist, they will probably be small (given we haven't found them so far), and the positive effect on life expectancy via weight loss is huge.i.e. the benefits of the weight loss almost certainly outweigh any side effects that are likely to manifest.\n \nreply",
      "People have been taking them for decades for other reasons, so if they had side effects reducing max life expectancy worse than being overweight surely we'd know by now.\n \nreply",
      "Wait, doing amphetamines for weight loss is cool again and has no drawbacks of it's own?\n \nreply"
    ],
    "link": "https://www.nature.com/articles/d41586-024-03244-1",
    "first_paragraph": "Thank you for visiting nature.com. You are using a browser version with limited support for CSS. To obtain\n            the best experience, we recommend you use a more up to date browser (or turn off compatibility mode in\n            Internet Explorer). In the meantime, to ensure continued support, we are displaying the site without styles\n            and JavaScript.AdvertisementYou can also search for this author in PubMed\n\u00a0Google Scholar\nWhat chance do children born since 2010 have of living to 100? Less than 2% for men and about 5% for women.Credit: Skye Hohmann/AlamyPut aside the hype about the growing number of us who are likely to make it to 100, because the rise in human life expectancy might actually be slowing down. At least, according to a study that analysed mortality data for ten countries or regions over the past three decades1.\u201cThere are limits to how far out we can push out the envelope of human survival,\u201d says study co-author S. Jay Olshansky, an epidemiologist at the U"
  },
  {
    "title": "Zep AI (YC W24) Is Hiring AI Engineers and Dev Advocates (ycombinator.com)",
    "points": 0,
    "submitter": "",
    "submit_time": "2024-10-15T18:16:52.000000Z",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.ycombinator.com/companies/zep-ai/jobs",
    "first_paragraph": ""
  }
]