[
  {
    "title": "Stimulation Clicker (neal.fun)",
    "points": 1472,
    "submitter": "meetpateltech",
    "submit_time": "2025-01-06T15:48:50 1736178530",
    "num_comments": 335,
    "comments_url": "https://news.ycombinator.com/item?id=42611536",
    "comments": [
      "This is a fun clicker game whose point seems cynical and self-defeating on multiple levels.Despite the HN comments complaining about it being overwhelming and a dark reflection of how awful and distracting the internet is, clearly enough people enjoyed it to get to the front page. The stimulation torture wasn't really torture, but another level to the game.All the content creators whose inclusion at first seems like an indictment of the kinds of internet videos that lead to addiction or overstimulation also all get a pleasant shout-out which seems silly. Are these supposed to represent what's awful about the internet?EDIT: To hammer the dissonance home, at the end of the game we are met with a calming ocean scene that I'm guessing the average player appreciated for about thirty seconds before clicking away.To me, this whole exercise doesn't reflect how distorted humanity has become because of technology, but of how humans refuse to look themselves in the mirror.We want to be the kind of people who buck the mold and escape systems of control, so that we can properly enjoy things like waves of the ocean, but at any point during this game we could just open a new tab and watch the ocean on a YouTube livestream. Instead we spend an hour clicking and advancing this manic stream of chaos.What's more human, then: calmly watching the waves crash against the beach, or clicking buttons trying to win and discover what's at the end of a silly game?\n \nreply",
      "> Despite the HN comments complaining about it being overwhelming and a dark reflection of how awful and distracting the internet is, clearly enough people enjoyed it to get to the front page.Is this like a massive HN wooosh -- how can this be the top-voted comment?From Neil Postman's 1985 \"Amusing Ourselves to Death\":> \u201cWith television, we vault ourselves into a continuous, incoherent present.\u201d> \u201cSpiritual devastation is more likely to come from an enemy with a smiling face.\u201dIt's less about whether we \"enjoy\" the stimulation, more about what kind of people we become when we lose ourselves in this bizarre sea of superstimuli. We're like reinforcement agents creating adversarial examples for each other, drawing ourselves further out of any sort of meaningful life, into a fever dream where the most desirable job for the next generation is to be famous for being famous [1] rather than do anything for any kind of deeper purpose.[1] https://www.entrepreneur.com/business-news/what-is-gen-zs-no...\n \nreply",
      "I like your description. I sometimes wonder if the final equilibrium state will be most people working on addictive products and the rest working on addiction treatment.\n \nreply",
      "I'd say with the current state of things it's more like two singularities in which either:- A landian-stephensian accelerationist timeline occurs where the majority of the urban population becomes some flavor of AGI-tuned VR junkie- An extreme naturalistic counterculture movement occurs that causes majority of the civilized world to willingly roll themselves back 1 or 2 centuries technologically in order to feel something again\n \nreply",
      "Why not both?- And there has to be the third, hyperminmaxers yearning forever more control and power trying to be(at) the machine. Thus becoming a reflection of the first.- Fourth must be some sort of hybrid between denialist and creationist, whom I don't even want to envision through. Which would be a reflection of the second, but instead of withdrawing, they would bubble themselves into something terrifying version of the Amish.\n \nreply",
      "Perhaps the current obsession will just go the way of heavy drinking or smoking?  Ie the population will eventually develop some partial immunity to the allure, but it won't even go away completely.\n \nreply",
      "I personally believe that at some point, many people will realize that the majority of the people with economic means are the people who are able to concentrate and don\u2019t waste all their time. Note that I don\u2019t mean the super wealthy, I\u2019m referring to people who are solidly middle class and have means. I know a lot of successful people who aren\u2019t glued to their phones. I think there will be enough good and bad examples out there for people to start catching on.\n \nreply",
      "The most successful people I know absolutely are glued to their phones. They're networking and messaging and reading and planning on their phones.But from the outside it looks very similar to candy crush. . .\n \nreply",
      "See: Walkaway by Cory Doctorow (2017)\n \nreply",
      ">> Despite the HN comments complaining about it being overwhelming and a dark reflection of how awful and distracting the internet is, clearly enough people enjoyed it to get to the front page.> Is this like a massive HN wooosh -- how can this be the top-voted comment?100% agree. I had to read that sentence and surrounding parts like 5 times to check if I was missing a satirical nod somewhere. It's like writing a review of Franz Kafka's books and saying \"Despite what we may say about bureaucracy, clearly lots of people enjoy it because his books were best sellers!\"Lots of art is there to make you think, not to \"enjoy\" it.\n \nreply"
    ],
    "link": "https://neal.fun/stimulation-clicker/",
    "first_paragraph": ""
  },
  {
    "title": "Triptych Proposals (alexanderpetros.com)",
    "points": 116,
    "submitter": "felipemesquita",
    "submit_time": "2025-01-06T20:52:34 1736196754",
    "num_comments": 39,
    "comments_url": "https://news.ycombinator.com/item?id=42615646",
    "comments": [
      "Co-author here! I'll let the proposal mostly speak for itself but one recurring question it doesn't answer is: \"how likely is any of this to happen?\"My answer is: I'm pretty optimistic! The people on WHATWG have been responsive and offered great feedback. These things take a long time but we're making steady progress so far, and the webpage linked here will have all the status updates. So, stay tuned.\n \nreply",
      "this is a set of proposals by Alex Petros, in the htmx team, to move some of the ideas of htmx into the HTML spec. He has begun work on the first proposal, allowing HTML to access PUT, DELETE, etc.https://alexanderpetros.com/triptych/form-http-methodsThis is going to be a long term effort, but Alex has the stubbornness to see it through.\n \nreply",
      "When I was reading \u201cThe future of htmx\u201d blog post which is also being discussed on HN [1], the \u201chtmx is the new jQuery\u201d idea jumped out at me. Given that jQuery has been gradually replaced by native JavaScript [2], I wondered what web development could look like if htmx is gradually replaced by native HTML.Triptych could be it, and it\u2019s particularly interesting that it\u2019s being championed by the htmx developers.[1]: https://news.ycombinator.com/item?id=42613221[2]: https://youmightnotneedjquery.com/\n \nreply",
      "Good luck!The partial page replacement in particular sounds like it might be really interesting and useful to have as a feature of HTML, though ofc more details will emerge with time.Unless it ended up like PrimeFaces/JSF where more often than not you have to finagle some reference to a particular table row in a larger component tree, inside of an update attribute for some AJAX action and still spend an hour or two debugging why nothing works.\n \nreply",
      "It looks wonderful, but the adoption will be a thoroughly uphill battle. Be it from browsers, be it from designs and implementations on the web.I'll be first in line to try it out if it ever materializes, though!\n \nreply",
      "Looks really pragmatic and I'd be glad to see this succeed.Is anyone able to credibly comment on the likelihood that these make it into the standard, and what the timeline might look like?\n \nreply",
      "Alex is working on it now and we have contacts in the browser teams.  I\u2019m optimistic but it will be a long term (decades) project.\n \nreply",
      "What is the upside of    <button action=\"/users/354\" method=\"DELETE\"></button>\n\nover    <button action=\"/users/delete?id=354\"></button>\n\n?\n \nreply",
      "A GET request to `/users/delete?id=354` is dangerous. In particular, it is more vulnerable to a CSRF attack, since a form on another domain can just make a request to that endpoint, using the user's cookies.It's possible to protect against this using various techniques, but they all add some complexity.Also, the former is more semantically correct in terms of HTTP and REST.\n \nreply",
      "Hey there, good question! Probably worth reading both sections 6 and 7 for context, but I answer this question specifically in section 7.2: https://alexanderpetros.com/triptych/form-http-methods#ad-ho...\n \nreply"
    ],
    "link": "https://alexanderpetros.com/triptych/",
    "first_paragraph": "\nThree small proposals for putting the \"hyper\" back in hypertext.\n\nTriptych is three simple proposals that make HTML much more expressive in how it can make and handle network requests.\n\n\nIf you are a practical person, you could say it brings the best of htmx (and other attributed-based page replacement libraries, like turbo and unpoly) to HTML. For the more theoretically-inclined, it completes HTML's ability to do Representational State Transfer (REST) by making it a sufficient self-describing representation for a much wider variety of problem spaces.\n\n\nBasically, it should be easy to use HTML to declare page behavior that makes HTTP requests, and then tell the browser to either do a full-page navigation or replace part of the page with the response. Triptych enables this by bringing all the HTTP methods to HTML, giving buttons to ability to make requests without the help of a form, and making it possible to target a DOM subtree for replacement with the response.\n\n\nI first outlined th"
  },
  {
    "title": "I Live My Life a Quarter Century at a Time (tla.systems)",
    "points": 67,
    "submitter": "CharlesW",
    "submit_time": "2025-01-06T22:22:58 1736202178",
    "num_comments": 27,
    "comments_url": "https://news.ycombinator.com/item?id=42616699",
    "comments": [
      "I laughed at the title!  My friends and I say the original quote way to much, even 25 years later.  (From \"Fast and Furious - Vin Diesel says \"I live my life a quarter mile at a time.\")\n \nreply",
      "Small tangent:> As a final note, when I left Apple for the last time, and emptied out my drawers, at the very bottom of the last drawer I found my distinctly unsigned NDA.I wonder if that legally makes any difference?  There's probably an oral or implied contract for this kind of stuff, if you keep showing up to work and they keep paying you?\n \nreply",
      "Great story, and a thought-provoking title. I LLOLed at \"We\u2019ll just tell Steve you did move.\"I'm 45, so I'll mark my 2nd quarter-century in the not-too-distant future.Very approximately, so far:0-25: learning25-50: doing50-75: TBD\n \nreply",
      "For me:0-22 - I\u2019m someone else\u2019s responsibility - graduated college degree in CS22-36 - shuffled aimlessly between two meaningless jobs, a horrible mistake of a marriage (and divorce), got into real estate too heavily and the crash of 2008, taught fitness classes on the side as my only outlet.36-46 - got remarried and became an instant father to a 9 and 14, rebuilt  my career from scratch and hopped between 5 jobs, got my finances under control after walking away from 5 mortgages, built a strong marriage and both (step)sons graduated. \u201cRetired my wife\u201d when she was 44.46 - present - transitioned into consulting, got first and only job at BigTech,  (working remotely cloud consulting department), moved permanently into what was a vacation home in Florida, and start traveling extensively post Covid including doing the digital nomad thing.  Left BigTech and enjoying a nice balanced life with my wife while I work remotely and she enjoys her passion projects.\n \nreply",
      "That timescale\u2026 got me thinking.In my case it was closer to:0-25: dicking around, with some incidental learning25-35: learning how one gets screwed in business deals (by getting screwed in business deals)35-40: dicking around pretending to work and thinking this is called \"startups\"40-50: actually doing stuff, working on meaningful things that people pay for and making a good living off thatI am looking forward to the future :-)\n \nreply",
      "I'm 47. 50+ is looking a lot like \"struggling to run the red queen's race to keep my wife and furbabies safe, sheltered, and provided for, while watching the eventual deterioration of my body into uselessness and decrepitude begin, and watching ageism diminish my opportunities in the field\".  Affordable rejuvenation therapy in the next couple of decades is pretty much my only hope. Maybe then I could claw back another decade or two of vigorous life with my wife with greater wisdom than I had the first time around.\n \nreply",
      "You\u2019ve peaked. The rest is just the same story in reverse.\n \nreply",
      "> I LLOLed at \"We\u2019ll just tell Steve you did move.\"It made me remember about that rumor of Musk firing people at random, but afterwards their immediate superiors just make them to move to another office whatsoever - Musk won't remember the next time he'd be there.\n \nreply",
      "They told the same exact yarn about Steve back in the day. I think both are probably exaggerated.\n \nreply",
      "I worked at Iomega (Zip Drive) from 1994 to 1998. The VP was rumored to fire people on the spot for the smallest thing.One day we worked an all nighter. The entire department. The next day we were still there. Having solved the problem, most of us were asleep at our desks.The VP made an unannounced visit and walked through the office. None of us noticed him. He walked to my bosses bosses office and asked him to assemble us in the meeting room.He walked into the meeting, said he was impressed with how hard we were working, pointing out that our heads were down in deep thought. Then he left.These days, I think he was trolling us.I got to know him quite well later in my career. I never saw him fire anyone.\n \nreply"
    ],
    "link": "https://tla.systems/blog/2025/01/04/i-live-my-life-a-quarter-century-at-a-time/",
    "first_paragraph": "Three Letter AcronymPlease, Not Another Indie Developer BlogSo, we are coming up on a little anniversary for me this weekend. On the 5th of January 2000, Steve Jobs unveiled the new Aqua user interface of Mac OS X to the world at Macworld Expo.Towards the end of the presentation, he showed off the Dock. You all know the Dock, it\u2019s been at the bottom of your Mac screen for what feels like forever (if you keep it in the correct location, anyway).The version he showed was quite different to what actually ended up shipping, with square boxes around the icons, and an actual \u201cDock\u201d folder in your user\u2019s home folder that contained aliases to the items stored.I should know \u2013 I had spent the previous 18 months or so as the main engineer working away on it. At that very moment, I was watching from a cubicle in Apple Cork, in Ireland. For the second time in my short Apple career, I said a quiet prayer to the gods of demos, hoping that things didn\u2019t break. For context, I was in my twenties at this"
  },
  {
    "title": "Brush Your Teeth, Drink Milk, and Watch Out for Syphilis (worldhistory.substack.com)",
    "points": 31,
    "submitter": "crescit_eundo",
    "submit_time": "2025-01-05T21:43:03 1736113383",
    "num_comments": 12,
    "comments_url": "https://news.ycombinator.com/item?id=42605305",
    "comments": [
      "If you didn\u2019t know that Disney made a cartoon about syphilis, please take 10 minutes to watch this masterpiece/trainwreckhttps://youtu.be/YHxYW0Fw63Y?si=OcrCEY4l_mJ_lw83\n \nreply",
      "Here is the link sans tracking:https://youtu.be/YHxYW0Fw63Y\n \nreply",
      "Please remove the ?si= tracking string, if you see this before the 2hr edit window closes.\n \nreply",
      "Something that I found even more interesting: just below the section on syphilis, there\u2019s a section on breaking the stigma around cancer, encouraging yourself to get screened, avoiding quack cures. It\u2019s interesting to think how talking about cancer was so stigmatized back then.\n \nreply",
      "I have a relative who falls for every YouTube supplement. I generally ask hen if the latest one cures cancer. Often, it does :(\n \nreply",
      "There is a lot of money to be made in selling hope. Sadly, most of it goes to charlatans.The human psyche is a fascinating mess.\n \nreply",
      "> Though the U.S. government eventually got out of the propaganda businessGood one!\n \nreply",
      "US politics has devolved to the point where the government can no longer promote basic public health measures and we all suffer for it. It\u2019s a fucking tragedy.\n \nreply",
      "The feds don't do a ton of health propoganda anymore.  They mostly delegate and shuffle money to the state who do it.  It still gets done, probably more so now than then.\n \nreply",
      "O RLY?  https://www.fns.usda.gov/tn/dig-posters\n \nreply"
    ],
    "link": "https://worldhistory.substack.com/p/brush-your-teeth-drink-milk-and-watch",
    "first_paragraph": ""
  },
  {
    "title": "An autumn bike adventure down the US portion of the Eastern Divide Trail (crazyguyonabike.com)",
    "points": 118,
    "submitter": "kaycebasques",
    "submit_time": "2025-01-06T18:50:19 1736189419",
    "num_comments": 39,
    "comments_url": "https://news.ycombinator.com/item?id=42613878",
    "comments": [
      "I love this CGonaB site. I used it several times myself including for my similarly titled \"Go west (not so young) man\" diary documenting my XCountry ride in 2007. I didn't own a cell phone then (did they even exist then?). I used paper maps and had a small laptop to make my diary entries. I generally did them sitting outside town libraries (they were usually closed in the evenings when I arrived in towns) and most internet sites then were non-password and publicly accessible. I haven't made any documented treks since 2012 but still send the website money. You can see my \"Go west...\" diary here: \nhttps://www.crazyguyonabike.com/doc/?o=3d2&doc_id=2579&v=LL\n \nreply",
      "This is one of those personal sites where you fall down a rabbit hole. I've been reading this series of posts for quite a while now because it's simply but enjoyably written. He has a nice turn of phrase:> The let up in the weather didn't last long, though. Even though the forecast for the area had indicated a cloudy but rainless afternoon, it just started pelting down rain in buckets. There is nothing like a really cold, persistent rain to find the weak spots in your rain gear, and before long my face, chest, and feet were soaked and freezing. The rain turned what had been a mediocre day into a miserable day. It could have been worse, I guess, but only if it had rained snakes.\n \nreply",
      "CGoaB is a fantastic resource.  It contains great stories, resources, and life lessons.  Highly recommend.I've gone on small trips myself (weekend length) and have kept my trips under 100km.  My eventual goal is to ride from the Great Lakes region (of N.America) to the Yucat\u00e1n Peninsula of C. America.I ride a recumbent.\nI camp in a hammock.\nOf course I use Linux. =)\n \nreply",
      "The recumbent gave me pause, because now I can't tell if the rear view mirror is mounted on your helmet or bike, but I know you've likely got a decent beard!\n \nreply",
      "Wonder what model do you ride ? Any ressources to learn about those bikes ?\n \nreply",
      "> I ride a recumbent. I camp in a hammock. Of course I use Linux. =)Beard? :)>\n \nreply",
      "Hey this reminds me of my good friend Chris Smith, who recently completed the Tour Divide -- a solo, unsupported 2,700 mile bike race from southern Canada to Mexico. He did it in 48 days -- which would be impressive for anyone -- but the kicker is, he's legally blind. https://blindguybiking.org/EDIT: adding link to his youtube videos: https://youtube.com/playlist?list=PLx86K7wVysS06YQqC6Q5jiRNw...\n \nreply",
      "Bikepacking:  like backpacking but on a bike.  You ride dirt roads and easy trails away from cars, carrying your food, water, warm clothes, camping gear, etc... in bags mounted on your frame.The format is also used for races, you ride as quickly as possible and can only rely on commercial services available to all for resupply and lodging, no prearranged or private support.\n \nreply",
      ">> You ride dirt roads and easy trails away from carsUsually away from cars, but not typically easy. Sometimes it feels like pushing a shopping cart over a mountain.\n \nreply",
      "Doing the Great Divide trail is high up on my bucket list.\n \nreply"
    ],
    "link": "https://www.crazyguyonabike.com/doc/?doc_id=26078",
    "first_paragraph": "\nCompleted Dec 2024 \n\n        \n\n   3,877 miles (6,239 km) over\n         77 days from October 1, 2024 to December 16, 2024 \nUpdated: Monday December 16, 2024 19:11 (US/Pacific) (edited Mon 16 Dec 2024 19:28 (US/Pacific))\n        \n342 pics\n\n        12,540 hits since September 30, 2024 (hitcounts updated nightly) \nTopic: \n\n   Bicycle Touring\n      \u00a0\n   \nCategories:\n        Tour diaries, Bikepacking bikes, Camping, Motel, Offroad, Stealth camping, 1-3 months\nLocales: North\u00a0America, United\u00a0States, Maine, New\u00a0Hampshire, Vermont, New\u00a0York, Pennsylvania, Maryland, West\u00a0Virginia, Virginia, North\u00a0Carolina, Georgia, Alabama, Florida\nYear: 2024\nKeywords: Eastern Divide, bikepack, krampus \n\nPermalink: https://www.crazyguyonabike.com/doc/easterndivideq42024\n\n\n\n\nTopic: \n\n   Bicycle Touring\n      \u00a0\n   \nCategories:\n        Tour diaries, Bikepacking bikes, Camping, Motel, Offroad, Stealth camping, 1-3 months\nLocales: North\u00a0America, United\u00a0States, Maine, New\u00a0Hampshire, Vermont, New\u00a0York, Pennsylvania, Ma"
  },
  {
    "title": "Self-Hostable Form Back End \u2013 OSS Alternative to Formspree (github.com/formbee)",
    "points": 59,
    "submitter": "Oia20",
    "submit_time": "2025-01-06T19:19:09 1736191149",
    "num_comments": 13,
    "comments_url": "https://news.ycombinator.com/item?id=42614316",
    "comments": [
      "In case others are looking for a cheaper alternative to Formspree, I've been using https://formspark.io/ for all my websites [1] [2] [3]I paid $25 a few years ago (can't even remember when) and I still have 47k out of the 50k submission credits I bought.But I love to see a self-hostable alternative available, especially one that's as easy to use as running a `docker-compose` command. Sometimes you just need that control.For example in my case, I would get app support emails all day and night, and even if I had DND enabled, I would wake to 3-6 emails that accumulated over night and my mornings would get hectic instantly. I would forget to eat for a long time and my mood would be irritable all day.I had to place my own small API in front of Formspark to delay the emails for specific times of the day to avoid this. Something like FormBee would allow me to alter this in the server code directly instead of building yet another API.[1] https://lowtechguys.com/contact[2] https://lunar.fyi/contact[3] https://alinpanaitiu.com/contact\n \nreply",
      "@Oia20 One challenge with form -> email solutions is staying ahead of spam. I've been deep in this space with Kwes Forms [1] and have seen some pretty insane rates of spam usage. If you ever want to chat about some of the techniques I've used for prevention (everything from intelligent rate limiting to now a user scoring service that updates based on data about the user and following actions they take which autobans if they hit a score threshold).With the self-hosted service, I guess that's up to the hoster but likely something you'll run into on your hosted version.[1] https://kwesforms.com\n \nreply",
      "We have really easily implemented this service with Nocodb. I think the only feature missing would be the pow catpcha.I would like to have a moment in my life to write down how we have done it.\n \nreply",
      "Nice! I've used Nocodb quite a bit myself, a big fan of it, especially as a free self hostable alternative to Airtables (which is way overpriced imo).You have the form data being placed into a table, or being sent somewhere external?\n \nreply",
      "Also, we have tried in the past a Nocodb json field but was buggy. Nocodb 0.260 has been recently released and we would like to give it a try again to store extra data in some forms, like \"Type of enquiry\" or Support like contact forms, without having to create a table for each case.We are succesfully using Nocodb as a Headless CMS too (for +10 microsites)\n \nreply",
      "We store submitted data for a while and purge periodically.We have implemented a multitenant table for multiple websites, depending on which site has been contacted a different webhook is triggered for notification.\n \nreply",
      "very cool setup, I would be interested to read more into it if you do get around to writing it down!\n \nreply",
      "nocodb fan here. also would love to see your work.\n \nreply",
      "This used to be what StaticKit did...until they were acquired by Formspree.\n \nreply",
      "interesting, I hadn't heard of StaticKit, looks like they were acquired by FormSpree in 2020, as I write this I realize that's now 5 Calendar years ago... Time is flying lol\n \nreply"
    ],
    "link": "https://github.com/FormBee/FormBee",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        The open-source form backend for data privacy conscious developers.\n      FormBee is an easy way to send form data that is submitted on your website to your email, Telegram, Webhooks, Etc. It is a \"Form Backend\" which means it allows you to have functional forms that send places without having to write any server side code yourself! We have a hosted option available here: FormBee Website or you can self-host it!We want to make it as easy as possible to self host! In the docker-images folder of the project you will find many variations of the backend you can host, so you can host just what you want, without the bloat of the things you don't want. This is a work in progress, and we're constantly working on adding more. You can read more about self hosting in the Official Formbee self-hosting docs. The docs will walk you through pullin"
  },
  {
    "title": "Time-Series Anomaly Detection: A Decade Review (arxiv.org)",
    "points": 327,
    "submitter": "belter",
    "submit_time": "2025-01-06T11:10:01 1736161801",
    "num_comments": 49,
    "comments_url": "https://news.ycombinator.com/item?id=42609595",
    "comments": [
      "Didn\u2019t see it mentioned but good to know about: UCR matrix profile.The Matrix Profile is honestly one of the most underrated tools in the time series analysis space - it's ridiculously efficient. The killer feature is how it just works for finding motifs and anomalies without having to mess around with window sizes and thresholds like you do with traditional techniques. Solid across domains too, from manufacturing sensor data to ECG analysis to earthquake detection.https://www.cs.ucr.edu/~eamonn/MatrixProfile.html\n \nreply",
      "What do you mean you don't have to mess around with window sizes? Matrix profile is highly dependent on the window size.\n \nreply",
      "What does it do? Anything to do with matrices, like, from math?\n \nreply",
      "I use offset function in Prometheus to make an average of past weeks as a recording rule. We have a use in our systems that is very \"seasonal\" as in weekly cycles so I make an average of some metric (offset 1 week, 2 week, 3 week , 4 week/4) and I compare it to the current value of that metric. That way the alarms can be set day or night, weekday or weekend, and the thresholds are dynamic. It compares against an average of the day of the week, or time of the day.\nThere is someone in Gitlab that posted a more in depth explanation of this way of working. \nhttps://about.gitlab.com/blog/2019/07/23/anomaly-detection-u...\nThings get a bit more complicated with holidays, but you can actually programm them into prometheus\nhttps://promcon.io/2019-munich/slides/improved-alerting-with...\n \nreply",
      "Whenever I have a chart in Grafana that isn't too dense, I almost always add a line for the 7d offset value.  Super useful to tell what's normal and what isn't.\n \nreply",
      "Gitlab also has this: https://gitlab.com/gitlab-com/gl-infra/tamlandI'm not really smart in these areas, but it feels like forecasting and anomaly detection are pretty related.  I could be wrong though.\n \nreply",
      "You are not wrong! An entire subclass of anomaly detection can basically be reduced to: forecast the next data point and then measure the forecast error when the data point arrives.\n \nreply",
      "Well it doesn\u2019t really require a forecast - variance based anomaly detection doesn\u2019t make an assertion of the next point but that its maximum change is within some band.   Such models usually can\u2019t be used to make a forecast other than the banding bounds.\n \nreply",
      "That would be a different subclass of anomaly detection solutions.\n \nreply",
      "This doesn\u2019t capture work that\u2019s happened in the last year or so.For example some former colleagues timeseries foundation model (Granite TS) which was doing pretty well when we were experimenting with it. [1]An aha moment for me was realizing that the way you can think of anomaly models working is that they\u2019re effectively forecasting the next N steps, and then noticing when the actual measured values are \u201cdifferent enough\u201d from the expected. This is simple to draw on a whiteboard for one signal but when it\u2019s multi variate, pretty neat that it works.[1] https://huggingface.co/ibm-granite/granite-timeseries-ttm-r1\n \nreply"
    ],
    "link": "https://arxiv.org/abs/2412.20512",
    "first_paragraph": "The arXiv Privacy Policy has changed. By continuing to use arxiv.org, you are agreeing to the privacy policy.Help | Advanced SearcharXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.\narXiv Operational Status \n                    Get status notifications via\n                    email\n                    or slack\n"
  },
  {
    "title": "C: Simple Defer, Ready to Use (gustedt.wordpress.com)",
    "points": 132,
    "submitter": "ingve",
    "submit_time": "2025-01-06T18:36:29 1736188589",
    "num_comments": 95,
    "comments_url": "https://news.ycombinator.com/item?id=42613671",
    "comments": [
      "I once worked on a student robotics project where if you didn't gracefully shut down the connection to a specialized camera, it had a significant chance of physically bricking the camera.We were using C++ and essentially instrumented code review processes, despite being a student group, to ensure nothing was ever called in a way where the destructor wouldn't be called - and broke out vision processing into a separate process so if other processes crashed we'd still be okay. In retrospect it was amazing training for a software engineering career.But I always look at the words \"simple\" and \"defer\" and shudder when I see them next to each other!Just like you'd have a \"threat model\" for cybersecurity, make sure you understand the consequences of a defer/destructor implementation not functioning properly.\n \nreply",
      "The C++ lambda version can be a foot gun: https://godbolt.org/z/Wd66GcrdG, if the return value is a struct, NRVO (named return value optimization) may be applied and the lambda will be called in different order.As for the n3434 proposal, given that the listed implementation experiences are all macro-based, wouldn't it be more easily adopted if proposed as a standard macro like <stdarg.h>?\n \nreply",
      "I don't think \"you can implement this slightly modified version of the proposal in GCC macros\" is a good reason to change the defer proposal. It doesn't work in clang\u00b9 or any other non-GCC C implementation, a trailing semicolon after the close brace is an ugly wart, and saying \"if you want to implement this all you have to do is implement [[gnu::cleanup]] and nested local functions\" is presumably much more work for other C implementations than just implementing defer is. I also question whether this even works in GCC with executable stacks disabled (I know GCC can optimize away the trampoline since the function doesn't escape the local scope, but does GCC let you write nested functions at all without executable stacks?).\u00b9The author says it works in clang using Apple's Blocks feature, but Blocks should not be required for defer and the variable semantics are wrong so it's a non-starter.\n \nreply",
      "Why do you think you need executable stacks for nested functions?I don't know what GCC is doing, but functional programming languages usually 'compile away' the nesting of functions fairly early, see https://en.wikipedia.org/wiki/Lambda_liftingUpdate: Oh, I see, it's because GCC doesn't want to change how function are passed around ('function pointers' in C speak), so they need to get creative.Functional languages use something closer to what C people would call a 'fat pointer' to fix this.\n \nreply",
      "Unfortunately, this requires an executable stack, and only works on gcc, though an alternate implementation can work on clang.After a few attempts at defer, I ended up using a cleanup macro that just takes a function and a value to pass to it: https://github.com/aws-greengrass/aws-greengrass-lite/blob/8...Since the attribute or a function-like macro in the attribute position broke the c parsing in some tooling, I made the macro look like a statement.\n \nreply",
      "It does not need an executable stack: https://godbolt.org/z/K1GTa4jh4\n \nreply",
      "The macro from the article uses nested functions which on gcc are implemented with tramolines that need executable stack.https://thephd.dev/lambdas-nested-functions-block-expression...\n \nreply",
      "The trampolines are not generated in this case.\n \nreply",
      "To be fair you're not communicating very well \u2014 there are no trampolines being used here because the call site is directly in the same function, so no trampoline is needed with already being in the correct stack frame.(And also on -O1 and higher the entire call is optimized out and the nested function inlined instead.)\n \nreply",
      "I feel that uecker went above and beyond the call of duty by including a godbolt link in their first comment which shows the full assembly-language implementation of this behavior by GCC without using an executable stack, with syntax highlighting, and full C source for reproducing the behavior on your own machine.  I don't see how anything they could possibly have written as a comment could be clearer or more convincing.\n \nreply"
    ],
    "link": "https://gustedt.wordpress.com/2025/01/06/simple-defer-ready-to-use/",
    "first_paragraph": "Jens Gustedt's BlogWith this post I will concentrate on the here and now: how to use C\u2019s future lifesaving defer feature with existing tools and compilers.I have already talked several times about defer, the new feature that hopefully will make it into a future version of C. With this post I will concentrate on the here and now: how to apply that lifesaving feature with existing tools and compilers.After briefly discussing the defer feature itself, again, I will show you a first implementation with gcc extensions, a second with C++ standard features and then I will discuss a new proposal with for defer that has a syntax that is a tiny bit more constraining than what you may have seen so far.To remind you what defer is supposed to do, here is some toy code that uses three resources:This code with three so-called deferred blocks is equivalent to the followingonly that the deferred blocks are even executed when the anchor block is left by a jump statement (such as a break, continue, retur"
  },
  {
    "title": "Spline Distance Fields (zone.dog)",
    "points": 121,
    "submitter": "ibobev",
    "submit_time": "2025-01-06T15:49:21 1736178561",
    "num_comments": 22,
    "comments_url": "https://news.ycombinator.com/item?id=42611540",
    "comments": [
      "This reminds me when i worked on an open world game ~12 years ago. I implemented spline-based \"stripes\" (think long decals), mainly to be used for roads (though could also be used for smaller things like blood trails) and i added a button in the editor to align the terrain with the stripe with a configurable falloff so that it transitions smoothly from the stripe to the surrounding terrain - and optionally you could use a (grayscale) texture to modulate the falloff so that the transition isn't completely smooth.Next thing i knew, the environment artists had started using stripes to sculpt the terrain :-P\n \nreply",
      "You're Bad Sector from the Rome.ro forums (way back when those existed), aren't you?\n \nreply",
      "Yes, that'd be me :-)\n \nreply",
      "It\u2019s nice to see some real-world graphics programming in a visual language.Node-based environments can be powerful for exploring solutions like this, but they don\u2019t often make it to Hacker News.\n \nreply",
      "They can also be quite messy and hard/annoying to follow/parse since a lot of screen real estate is used for trivial things. For example the first graph wastes 300x250 pixels several times for what would be a single character in a text-based language (and that's if you ignore the padding between the nodes since you could claim that whitespace in a text-based language serves the same purpose).And unlike a text-based language where there is (usually) a single flow path going towards a single direction, with graphics like the one in the article you have several \"flows\" so your eyes need to move all over the place all the time to connect the \"bits\" in order to figure out what is going on.Though that last part could probably be solved by using DRAKON graphs instead (which can also use less screen space) since those have a more strict flow.IMO graph-based visual languages are nice for very high level flows but the moment you need to use more than a couple \"dot product\" or \"add values\" nodes, it is time to switch to a text-based one.\n \nreply",
      "I agree that large node graphs get unwieldy and nobody has come up with a great solution for that. Macros and independently scalable groups and visual annotations can help, but it depends on the type of program.I disagree about the single-direction \u201c1D\u201d nature of textual programs being unequivocally a benefit. When there are many independent paths that eventually combine, it\u2019s easier to see the complete flow in a 2D graph. Linear text creates the illusion of dependency and order, even if your computation doesn\u2019t actually have those properties.Conserving screen space is a double-edged sword. If that were the most important thing in programming, we\u2019d all be writing APL-style dense one-liners for production. But code legibility and reusability is a lot more than just who does the most with the least symbols.\n \nreply",
      "> I disagree about the single-direction \u201c1D\u201d nature of textual programs being unequivocally a benefit. When there are many independent paths that eventually combine, it\u2019s easier to see the complete flow in a 2D graph.This is where having separate functions help - as a bonus you can focus on that independent path without the rest being a distraction.If there are multiple independent paths that connect at separate points where you can't isolate them easily if they were a function, the graph is already a mess.> Conserving screen space is a double-edged sword. If that were the most important thing in programming, we\u2019d all be writing APL-style dense one-liners for production.That is a bit of an extreme case, it isn't about conserving all the screen real estate, just not being overly wasteful. After all the most common argument you'd see about -say- Pascal-style syntax is that it is too verbose compared to C-like syntax, despite the difference not being that great. You'll notice that despite APL-like syntax not being very popular, COBOL-like syntax isn't popular either.You don't have to go to extremes - notice that in my comment i never wrote that all uses of graphs should be avoided.\n \nreply",
      "I would wager that Blender's geometry nodes are over all a net saving in screen real estate when compared to the amount of code they abstract away. Sure, in a trivial example they seem unnecessarily large, but there are some nodes that do a lot of heavy lifting, and are no bigger than any other node. Overall a strange metric to track, IMO, unless all your variable names are one letter.\n \nreply",
      "Which is why i wrote that last paragraph: for high level stuff with nodes that abstract the heavy lifting they are fine. Sometimes you may even need these \"add\" and \"dot product\" nodes to glue these together. The issue is when you start using a lot of \"low level\" nodes.Think of it like using a shell script vs something like Python: you can do a ton of things in shell scripts and write very complex shell scripts, but chances are if a shell script is more than a few lines that glue other programs together, it'd be better to use Python (or something similar) despite both being \"scripting\" languages.\n \nreply",
      "There are times when using Blender's shading node graph that I'd really just rather be writing GLSL/HLSL. But overall I still like it.Geometry nodes, on the other hand, I think are amazing. They really do provide a very useful abstraction over what would be a lot of tedious and error-prone boiler plate code.With just a few nodes I can instances and properly rotate some mesh on every face of some other mesh. Boom, done in two minutes. And you can do so, so much more, of course.The obvious downside is in complex scenarios the graph can be more difficult to manage and because of the nature of how its evaluated there are times you need to think about \"capturing\" attributes (basically a variable to hold an older value of something that gets changed later). But nothing is perfect.\n \nreply"
    ],
    "link": "https://zone.dog/braindump/spline_fields/",
    "first_paragraph": "\r\n      December 31th, 2024\r\n    \r\n      Earlier this year I decided to put my main project Tangerine on hold\r\n      indefinitely and began prototyping\r\n      a new renderer\r\n      in an unfamiliar language\r\n      using a totally new graphics API\r\n      with the goal of overcoming all of Tangerine's technical shortcomings.\r\n      The new renderer is an eccentric CPU ray tracer called Star Machine that\r\n      boasts the ability to effortlessly push 4k frames at 120hz or\r\n      better irrespective of scene complexity, a custom coordinate\r\n      system that limits the play space to roughly 940.7 astronomical\r\n      units with a constant world resolution of 15 micrometers, and a\r\n      truly unique visual style.  To prove out the underlying theories and\r\n      help me prioritize what to work on, I am also developing a time trial\r\n      racing game called\r\n      Rainy Road.\r\n    \r\n      At this time of writing, Rainy Road lacks a way to render terrain.  These\r\n      are my requirements for "
  },
  {
    "title": "2DGD_F0TH A compendium of the community knowledge on game design and development (github.com/2dgd-f0th)",
    "points": 14,
    "submitter": "linkdd",
    "submit_time": "2025-01-06T22:03:59 1736201039",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://github.com/2DGD-F0TH/2DGD_F0TH",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        [CC BY-NC-SA] A compendium of the community knowledge on game design and development\n      \n        A compendium of the community knowledge on game design and development\n        \nGet the Ebook \u00bb\n\n\nGitLab Repo\n            \u00b7\n            GitHub Repo\nThis project aims to be a Creative Commons Licensed body of knowledge about game design and development.As well as being a source of knowledge this project aims to be a learning experience for everyone involved too, by gathering contributions from the community, teaching others how to make a game, explaining algorithms but also learning tips and tricks from people who are more experienced.\n\n\nCommits:\n(back to top)As of March 21st, 2021 the ready-to-read versions of this book will be available (for free) only through Itch.ioLink to the Itch.io pageI decided to use only Itch as it's more sta"
  },
  {
    "title": "The Future of Htmx (htmx.org)",
    "points": 509,
    "submitter": "polyrand",
    "submit_time": "2025-01-06T18:05:43 1736186743",
    "num_comments": 242,
    "comments_url": "https://news.ycombinator.com/item?id=42613221",
    "comments": [
      "I\u2019ve just completed a port from HTMX to Hotwire (Stimulus, Turbo). HTMX is a great idea, but in my experience it\u2019s a poor execution.It\u2019s really quite buggy, in my experience it plays poorly with fundamental web and browser features (relative links are broken in at least 2 ways, I fixed a third way). One of the events just stopped working at all in the most recent release. The docs are lacking. And where it promises to let you write less JS, if you ever do need to write some JS you\u2019re on your own in structuring that, and you\u2019ll be fighting against HTMX (who gets to update the DOM, maintaining event handlers, etc).As a (brief) contributor to HTMX, I also feel like these issues were all inevitable. It\u2019s a single 5k line file with 190 top level functions in it meaning it\u2019s pretty impenetrable to get up to speed on. When proposing a bug fix the maintainers weren\u2019t sure if it would have other consequences. Tests didn\u2019t cover the functionality. I\u2019ve been mostly a backend engineer in my career, and I empathise with not wanting the complexity of a modern frontend, but that doesn\u2019t mean we can\u2019t have some basic organisation of the code to make it approachable and more obvious whether changes will work or not.After porting to Turbo and Stimulus I have a more reliable code base, I have significantly less JavaScript, and I have a JS code base that much easier to reason about. I really wanted to like HTMX but the execution is not there. A focus on stability is a great fit for the project, but it\u2019s most certainly not there yet and has quite a way to go in my experience.\n \nreply",
      "Hey Dan, htmx maintainer here.I would love to know in what other two ways relative links are broken, and which event stopped working, so we can get those fixed. With respect to the fix you PRed (thank you, by the way), we did get that merged very quickly, and would love to do the same for whatever is broken here, even (especially) if you are no longer interested in doing the fix yourself. [0]As for the DX of making changes to htmx: absolutely true! The single file is a DX we've chosen, and it has both costs and benefits, which we've written about in \"Why htmx doesn't have a build step\". [1][0] https://github.com/bigskysoftware/htmx/pull/1960[1] https://htmx.org/essays/no-build-step/\n \nreply",
      "Hi Alex, thanks for the reply and for your work on HTMX. I love the idea and think there's a strong need for something like HTMX, and if HTMX can live up to those promises then great. For me it doesn't, currently, but it sounds like it does for others.The relative link bugs are [0] and [1], and I fixed [2]. My fix was merged quickly, but the other two bugs of what appears to be similar significance, have been open for well over a year each. My issue however is less about these specific issues, and more the general lack of support for hypermedia, which speaks to a general state of HTMX not living up to its promises.As for the DX, I think not having a build step, and code structure, are somewhat orthogonal. I agree with much of that essay, but most of it is about issues with complex build systems and the use of Typescript. It's not about having 190 top-level functions, which, with all due respect, I think indicates a lack of architecture. Again, the issue is less about the specifics, and more about the fact that HTMX is not living up to its promise of simplicity because of how impenetrable the codebase is in this regard.As mentioned, so far I have found Stimulus and Turbo to be better implementations of what HTMX appears to promise to be. More activity in this space from anyone and everyone is great here though![0]: https://github.com/bigskysoftware/htmx/issues/1476\n[1]: https://github.com/bigskysoftware/htmx/issues/1736\n[2]: https://github.com/bigskysoftware/htmx/pull/1960\n \nreply",
      "Why is the number of top level functions a problem? As long as they are named and organized appropriately I don't see the issue\n \nreply",
      "I love writing prototypes as a single file as much as the next guy, but there's almost 5k lines of code in this one file: https://github.com/bigskysoftware/htmx/blob/master/src/htmx....They're sectioned off, so \"event/log support\" and \"AJAX\" and such are grouped by the type of method, but they're not prefixed so there's no way for your editor to help you explore grouped functionality.Given that the code isn't particularly organized or structured in any way that I could quickly glean (aside from the aforementioned grouping of related functionality, which is only so helpful), I think I'd be put off from wanting to contribute to this codebase.\n \nreply",
      "De gustibus, but after taking a look personally I think it's pretty good. It's typed to the extent allowed by js, sections are clearly delineated, and if you collapse all the functions you can get a quick overview of every section. I personaly would use a different naming convention, but still their functions look reasonably named.\n \nreply",
      "See: php.\n \nreply",
      "190 functions at a single level strongly implies that they're not named and organized appropriately.\n \nreply",
      "Naming doesn't have anything to do with the number of functions. They section things off in the file, so if you prefer things split into multiple files I can understand, but it's a personal perference in something this size\n \nreply",
      "i don't mind a lot of functions in a single file:https://htmx.org/essays/codin-dirty/#i-prefer-to-minimize-cl...\n \nreply"
    ],
    "link": "https://htmx.org/essays/future/",
    "first_paragraph": "htmx began life as intercooler.js, a library built around jQuery that added behavior based\non HTML attributes.For developers who are not familiar with it, jQuery is a venerable JavaScript\nlibrary that made writing cross-platform JavaScript a lot easier during a time when browser implementations were very\ninconsistent, and JavaScript didn\u2019t have many of the convenient APIs and features that it does now.Today many web developers consider jQuery to be \u201clegacy software.\u201d With all due respect to this perspective, jQuery is\ncurrently used on 75% of all public websites, a number that dwarfs all other JavaScript tools.Why has jQuery remained so ubiquitous?Here are three technical reasons we believe contribute to its ongoing success:Now, that\u2019s a ridiculous (and arrogant) statement to make, of course, but it is an ideal that we on the htmx team are\nstriving for.In particular, we want to emulate these technical characteristics of jQuery that make it such a low-cost, high-value\naddition to the to"
  },
  {
    "title": "Synthesizing Music from JSON (phoboslab.org)",
    "points": 61,
    "submitter": "bangonkeyboard",
    "submit_time": "2025-01-06T18:27:44 1736188064",
    "num_comments": 7,
    "comments_url": "https://news.ycombinator.com/item?id=42613537",
    "comments": [
      "I wrote this JS thing 9 years ago and it still runs in the browserhttps://ericoporto.github.io/bgmJs/Much simpler implementation, you can read the JS code that was manually written. There is a link to the repository in the page.\n \nreply",
      "very nice. really love the ui.for wasm you can have a look on my work:https://glicol.org/https://github.com/chaosprint/glicolI wrote the audio engine in Rust and load it in JS with AudioWorklet and SharedArrayBuffer\n \nreply",
      "I get no audio when I try to use the live demo on Linux/Chromium, though Firefox is fine.\n \nreply",
      "I\u2019ve been working with Tone.Js recently and it\u2019s been quite pleasant! Seems like it could handle this use case as well, fairly trivially. Worst part has been finding good royalty free sample sources for instruments.\n \nreply",
      "https://freesound.org/https://github.com/tidalcycles/Dirt-Samples\n \nreply",
      "I dug around on Freesound, but the search UI is pretty poor and sometimes broken. Seems like a great resource, but in need of a lot of work on the discovery side of things.\n \nreply",
      "... would be interesting to find a way to meld this with Sonic-Pi somehow...\n \nreply"
    ],
    "link": "https://phoboslab.org/log/2025/01/synth",
    "first_paragraph": "tl;dr: pl_synth is a tiny music synthesizer for C & JS and an editor (\u201ctracker\u201d) to create instruments and arrangements.You can try it out at phoboslab.org/synth/Sonant is a brilliant piece of software. It gives you 8 tracks, where each track has its own \u201cinstrument\u201d (just a bunch of parameters) and a number of patterns. You fill the patterns with notes and lay out the sequence of patterns. Out comes the music. Sonant was made for the demo scene and is therefore very concerned about size: both the code size of the synthesizer as well as the data size needed to define the music. And even with its tiny size it still offers a lot of flexibility for the artist.In 2011 Sonant was ported to JavaScript by Marcus Geelnard as Sonant Live and later forked as Sonant-X Live by Nicolas Vanhoren to support the newer WebAudio APIs in Browsers. I have used Sonant-X in Underrun, Voidcall and Q1k3 \u2013 each time condensing and refining it a bit more.A few weeks ago I thought it would be nice to use it in C"
  },
  {
    "title": "Property-Based Testing for the People (upenn.edu)",
    "points": 63,
    "submitter": "matt_d",
    "submit_time": "2025-01-06T16:47:53 1736182073",
    "num_comments": 37,
    "comments_url": "https://news.ycombinator.com/item?id=42612211",
    "comments": [
      "This work was discussed by the author in the Haskell Interlude podcast as well [0]. Highly recommended and probably easier to digest than a whole dissertation.[0]: https://haskell.foundation/podcast/59/\n \nreply",
      "Just going to plug the excellent .NET PBT library, CsCheck [0]. I have used it quite a bit to excersize strange corners of my program logic and found several exotic bugs with it.[0]: https://github.com/AnthonyLloyd/CsCheck\n \nreply",
      "The python package Hypothesis[0] already does a great job bringing property-based testing to the people! I've used it and it's extremely powerful.[0]: https://github.com/HypothesisWorks/hypothesis\n \nreply",
      "I have used Python's `hypothesis` as well, and I wish it were better. We had to rip it out at work as we were running into too many issues.I have also used Haskell's `QuickCheck` and Clojure's `spec` / `test.check` and have had a great experience with these. In my experience they \"just work\".Conversely, if you're trying to generate non-trivial datasets, you will likely run into situations where your specification is correct but Hypothesis' implementation fails to generate data, or takes an unreasonable amount of time to generate data.Example: Generate a 100x25 array of numeric values, where the only condition is that they must not all be zero simultaneously. [1][1] https://github.com/HypothesisWorks/hypothesis/issues/3493\n \nreply",
      "As the comments on your linked issue point out:(a) Filtering is a last resort and is best avoided. As an example, the Gen type in Haskell's falsify package can't be filtered, since it's a bad idea. As another example, ScalaCheck's Gen type can be filtered, but they also allow \"retries\" (by default, up to 10,000 times), because filtering is very wasteful.(b) If you're going to filter, scope it to be as small as possible (e.g. one comment points out that you're discarding and regenerating entire dataframes, when the filter only depends on one particular column)(c) Have some vague awareness of how your generators will shrink, to avoid infinite loops. In your case, shrinking will make it more likely to fail your filter; and the \"smallest\" dataframe (all zeros) will definitely fail.\n \nreply",
      "I understand your pain in some sense, but on another I feel like people with a decent amount of hypothesis experience \"know\" how the generator works and would understand that you basically _never_ want to use `filter` if you can avoid it, instead relying on unfalsifiable generation.Silly idea for your generator would to generate an array, and if it's zero... draw a random index and a random non-zero number and add it into the array. Leads to some weird non-convexity properties but is a workable hack.In your own example you turned off the \"data too slow\" issue, probably because building up a dataframe (all to just do a column sum!) is actually kind of costly at large numbers! Your complaint is probably actually meant for the pandas extras (or pandas itself) rather than the concept of hypothesis.\n \nreply",
      "No, I ran into the same issues with basic data structures. The dataframe wasn\u2019t necessary, it just matched the expected input of some function I wanted to test.\n \nreply",
      "I took your case, I got way better perf just generating a list of numbers and then reshaping it into a dataframe.But! Even though it doesn't even get that much slower at a certain number of rows it just starts hanging! Like at 49 rows everything is still fine and at 50 it no longer wants to work. It's very bizarre and I'll see if I can debug it. But I think your test case isn't indicative of some fundamental issue with Hypothesis rather than some sort of bug.",
      "Care to expand upon the issues you were running into with hypothesis? I'm genuinely curious as I may soon be evaluating whether to use it in a professional context.\n \nreply",
      "> My work is motivated by conversations with real PBT users, accentuating the benefits that they get from PBT and reducing the drawbacks.ISTM that the benefits and drawbacks are just two sides of the same coin.  The benefit is reduced testing effort. The drawback is that savings comes from sacrificing knowledge of exactly what has been tested.> I also observed that PBT users are not always good at evaluating whether their testing was effective.Ah, there's the rub. It seems that the benefit of making the tested property explicit is partially offset by not really knowing how much of the search space was explored automatically.\n \nreply"
    ],
    "link": "https://repository.upenn.edu/entities/publication/72ca3499-c5f6-4fc1-b5a3-9d66d8dd534e",
    "first_paragraph": "Software errors are expensive and dangerous. Best practices around testinghelp to improve software quality, but not all testing tools are created equal.\nIn recent years, automated testing, which helps to save time and avoid\ndevelopers' blind-spots, has begun to improve this state of affairs. In particular, property-based testing is a powerful automated testingtechnique that gives developers some of the power of formal methods without\nthe high cost. PBT is incredibly effective at finding\nimportant bugs in real systems, and it has been established as a go-to\ntechnique for testing in some localized developer communities. To bring the power of PBT to a larger demographic, I shift focus to PBTusers. My work is motivated by conversations with real PBT users,\naccentuating the benefits that they get from PBT and reducing the drawbacks.\nMy work begins with Property-Based Testing in Practice. This in-depth\nuser study establishes a rich set of observations about PBT's use in practice,\nalong with "
  },
  {
    "title": "The Art and Science of Mess Management (1981) [pdf] (systemswisdom.com)",
    "points": 20,
    "submitter": "yamrzou",
    "submit_time": "2025-01-03T09:44:36 1735897476",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=42584178",
    "comments": [
      "Russell Ackoff's lectures are always a great listen, and worth relistening to each year. If I recall correctly he used to work at Bell Labs...A starting point:  https://youtu.be/yGN5DBpW93g\n \nreply",
      "very good writing. it is still relevant considered it was written 44 years ago. but we are in the age of AGI now, do we still need this?  I am sure this one has been used already by several Large LLM as training materials.\n \nreply",
      "Quite good read.  I'm going to print this out.\n \nreply"
    ],
    "link": "https://www.systemswisdom.com/sites/default/files/Ackoff-1981-Mess-Management_0.pdf",
    "first_paragraph": ""
  },
  {
    "title": "Artie (YC S23) Is Hiring a Founding Engineer (ycombinator.com)",
    "points": 0,
    "submitter": "",
    "submit_time": "2025-01-06T21:00:23 1736197223",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://www.ycombinator.com/companies/artie/jobs/N3AosVU-founding-engineer",
    "first_paragraph": "Software that streams data from databases to warehouses in real-timeWe are a small team based in San Francisco looking to hire our third founding engineer!As a founding engineer, you will have the opportunity to wear multiple hats, directly interact with our customers and play a critical role in shaping the future of our product.This is a challenging and dynamic role, and you will be working at the forefront of distributed systems, infrastructure and data engineering.What you should expect & examples of day-to-day tasks:Artie is a real-time database replication solution for databases and data warehouses. To do this, we leverage Kafka and change data capture. We're growing fast - we launched our cloud product a year ago and are now processing billions of rows per month.We're backed by Exponent Founders Capital, General Catalyst and other world class angels like Benn Stancil (Mode), Lenny Rachitsky (Lenny\u2019s Newsletter), and Arash Ferdowsi (Dropbox).We are building Artie, a real-time data"
  },
  {
    "title": "Chimpanzees' stone tool choices may mirror ancient human ancestors' techniques (phys.org)",
    "points": 8,
    "submitter": "pseudolus",
    "submit_time": "2025-01-04T14:31:24 1736001084",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=42594851",
    "comments": [
      "Paper:https://www.sciencedirect.com/science/article/pii/S004724842...\n \nreply",
      "I wonder which techniques the Bonobos copied? ;-)\n \nreply"
    ],
    "link": "https://phys.org/news/2025-01-chimpanzees-stone-tool-choices-mirror.html",
    "first_paragraph": ""
  },
  {
    "title": "Dtack Grounded archive (1981-1985) (easy68k.com)",
    "points": 12,
    "submitter": "basementcat",
    "submit_time": "2025-01-06T21:48:57 1736200137",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=42616325",
    "comments": [
      "The title should be \"DTACK Grounded\" as it refers to a hack-ish way of wiring up a 68k to memory with no wait states.https://en.wikipedia.org/wiki/DTACK_Grounded\n \nreply",
      "Honestly, I never got a lot out of their actual homebrew guides \u2013 but their commentary on the mini/micro industry and scuttlebutt \u2013 Motorola's failings, Intel gnashing their teeth \u2013 was hilarious and perceptive in retrospect.> RIP! BASH! SNARL! TEAR!> These are the sounds emanating from Intel's council chambers these days. An explanation:> If you have just returned from a year's stay on the planet Zorn, you will be surprised to learn that the iAPX 432, which had been intended to carry Intel's high performance banner, is now seriously dead. With customers angrily demanding an upward migration path within the Intel family to compete with the forthcoming Motorola 32 bit machine (and even the forthcoming National 32 bit machine), Intel hurriedly announced THEIR 32 bit microprocessor. Several weeks AFTER that hurried announcement, they decided the part number would be the iAPX 386. So far, the part number is ALL that is definite about that device,> You see, there is one hellaceaus fight going on between the performance faction in Intel, who want to build a real computer (NOT an 8080 emulator) for a change and the compatibility faction, who have their gaze fixed on those warehouses (not one of which has burned down yet).http://www.easy68k.com/paulrsm/dg/dg13.htmThey also anticipated in 1981 that Apple would be putting out 68k \"minicomputer\":> ...there are a lot of companies who are planning to drive the PDP 11/70 out of the marketplace with $10,000 (base price) 68000 systems. It is rumored that Apple is one of these companies...http://www.easy68k.com/paulrsm/dg/dg01.htm\n \nreply"
    ],
    "link": "http://www.easy68k.com/paulrsm/dg/",
    "first_paragraph": "I have everything listed above even if it is not yet online. If you\nhave any DTACK GROUNDED material not listed then please contact me at:\n\n\nUpdates\n\n2000-05-04 -- Added issue 25\n2002-08-10 -- Added issues 26, 27, 37, 38, and HALGOL/48 v1.02\n2003-12-31 -- Added issues 28, 29, 30, 31, 32\n2004-01-17 -- Revised issues 28, 29, 30, 31, 32\n2004-02-14 -- Added issue 33\n2004-04-07 -- Revised issue 23; added Wieland and Schmidt software\n2005-08-06 -- Fixed Weiland listing file (truncated lines)\n2008-04-13 -- Added issues 34, 35, 36\n2008-04-16 -- Added issue 39\n2008-04-30 -- Added issues 40, 41\n\nUpdates"
  },
  {
    "title": "How Do You Like What You've Built? (morrisbrodersen.de)",
    "points": 58,
    "submitter": "f1shy",
    "submit_time": "2025-01-05T15:13:45 1736090025",
    "num_comments": 16,
    "comments_url": "https://news.ycombinator.com/item?id=42602273",
    "comments": [
      "This happens to me, a lot. I now consider it part of my workflow.I submit something for testing.It gets ignored by everyone else.I keep testing like mad, fixing even the smallest \"niggles\" that I can find, re-releasing, and, each time, asking for input.Which I seldom get.In the end, I say \"Fuck it. Let's ship.\" but I don't do that, until I'm really sure that there's no more bugs to be found (spoiler: There's always more bugs to be found, and they pop up, immediately after I release).I'm constantly testing my work. It never stops, and the frequency of my testing, has virtually nothing to do with whether or not anyone else tests, or even gives me any feedback.I use Apple's TestFlight for my team testing. It registers -roughly- how many times the app under test is run by individual team members.My own testing is always an order of magnitude greater than the next person, and that is just a fraction of how many times I run it in the simulator, before releasing the test build.I'm not especially upset about that, but I don't spare a lot of sympathy for folks that complain about something after shipping, that they had every chance to catch, beforehand.But, if they are right, I'll still fix it. I just won't feel very sorry for them.\n \nreply",
      "Perhaps the largest cause of wasted programming time is building things based on what sounds plausibly useful rather than what is actually useful. It's not an easy question to answer, but it needs to be asked constantly to avoid the trap.Many of us have had the experience of spending an entire weekend feverishly hacking on something that was going to change the world, only to have someone point out a critical flaw in our assumptions as soon as they try it.This is why scratching your own itch is so effective. If you make something that you actually use every day, you might be on to something. Going from 0 to 1 users is the hardest step.\n \nreply",
      "It's why you get user feedback before it goes into development. Then the developers don't have to question/gamble whether things are good for the users. If you can't answer that with evidence, then you are guessing at what users might want, which can definitely be a large gamble if you are a solo developer. User opinions count as evidence in this case, and guessing is sometimes correct in certain situations though.For some of us, we will not deeply use the industry-specific line-of-business things we've been asked to work on and won't have a good, calibrated opinion. In these situations, developers without the industry knowledge should get that validation before making those kinds of decisions.\n \nreply",
      "This is something I call latent product development. Many times, the best solution is not the first one you think of - even though it may be one of many correct solutions.I have found that the best products and product features have come from latent thinking. Subconsciously pondering the problem and letting the solution arise. An example of this is a solution which comes to you in the shower - I don't know why the shower is such a hotbed for latent ideas to emerge - someone should study that!What I found most displeasing at large companies is that there's no room for latent product development. Everything is rushed. Even brand new product ideas, once the machine gets a hold of it, gets put on the conveyor belt for new ideas at a predictable and imposed rate.One such example is my last startup. We had wanted to make it easy for users not on our platform to collaborate. It was a product feature we talked about for a year but nothing ever felt right. Until one morning at 2am while I was sleeping on a recliner at my sister's house in Mali - it came to me. It also turns out that this feature was the first feature we would relaunch after being acquired by Western Digital.\n \nreply",
      "These intangible factors are why I still love software dev over 20 years in.The sixth sense of, \"this still can't be right\" and really getting into the intellectual muck to find out what the proper abstraction should be while also balancing what is needed for great UX.It still keeps me up at night (or more specifically, from getting deep sleep!) from time to time. And then when you crack it...such a rush.\n \nreply",
      "I have a friend who\u2019s a scholar of history at Oxford. They do a lot of 1-on-1 tutoring with students, and he makes his students stand and read out their essays to him.He likes to stop them halfway through and ask \u2026 \u201cdoes that sound right to you?\u201d. He does it so much that its become a running joke amongst his students.I love the question. It tugs ever so subtly at your sense of pride in your work. I\u2019m tempted to start using it myself.\n \nreply",
      "I write a lot of tutorials and explanations[0].I don't think anyone other than me, reads them, or even give's a rodent's backend about it, but I do it, to learn.Just a little while ago, I wrote a short series on customizing SwiftUI Charts[1].What I learned, made such a difference, that I immediately rewrote a dashboard app to use the new techniques. It's working great.[0] https://littlegreenviper.com/miscellany/[1] https://littlegreenviper.com/series/swiftui-charts-gestures/\n \nreply",
      "I've honestly come to find flaws in most of what I build over time. This isn't to say that the products I build or the code I write is inherently bad, it's that I keep learning new ways to be better over time and deadlines always necessitate making trade-offs.The truly great moments though, are when you go back to a \"tried and trusted\" solution to a problem. In the past I might have used a more complex algorithm or framework, but my experience tells me to keep it simple and build on something I know is more applicable.Those are the moments when mere knowledge is surpassed by experience and that's when I truly feel proud of what I've built.\n \nreply",
      "I don't think this phrase has ever been uttered by a Facebook programmer.\n \nreply",
      "Nice little post!\n \nreply"
    ],
    "link": "https://morrisbrodersen.de/how-do-you-like-what-you-built/",
    "first_paragraph": "\u2190 MB\nJanuary 3rd, 2025\n\n              Recently, a colleague asked me for a code review on some complex\n              UI changes. The idea was to make an error-prone form easier to use\n              by displaying warnings in the right moment, and automating various\n              state changes in the background (think \u201csmart configurator\u201d). The\n              requirements were given upfront, so my colleague was in execution\n              mode, turning these requirements into code.\n            \n              Glancing over the pull request, nothing stood out as problematic,\n              but I didn\u2019t feel ready to approve the changes before playing with\n              the new UI.\n            \n              However, before testing it myself, I asked (via chat message):\n            How do you like the new behavior?\n              I went to grab a coffee; when I came back, they had answered with\n              roughly the following:\n            Not sure, to be honest.A couple minutes pass...\n    "
  },
  {
    "title": "Show HN: Mashups \u2013 Resurrecting Yahoo Pipes, my side project (mashups.io)",
    "points": 117,
    "submitter": "pyromaker",
    "submit_time": "2025-01-06T11:54:10 1736164450",
    "num_comments": 26,
    "comments_url": "https://news.ycombinator.com/item?id=42609819",
    "comments": [
      "Also check out https://nodered.org/ and https://github.com/huginn/huginn if you're interested in free and open-source software you can run yourself.\n \nreply",
      "Is there a consolidated comparison website for these? There is also n8n that is on the rise now.\n \nreply",
      "I played with pipes for a minute to manage an RSS ecosystem, but didn't build anything that I kept around.The site seems to be down.Let's say we all build wonderful apps on this, and then you run out of money or legal liability for hosting.Is there a way to construct this so that we can export our Pipes to some standard format that the next person to pick up the torch could activate, and migrate to that?\n \nreply",
      "I used Yahoo! Pipes to make a consolidated social feed some years ago (https://github.com/Xeoncross/MicroStream). It actually placed as an honorable mention in AListAparts 10k challenge.It was really fun to have a service that could handle all the backend requests for you before sites like Zapier existed.\n \nreply",
      "I miss yahoo pipes! I used to use it to aggregate movie reviews for some project I was working on. Brings me back.\n \nreply",
      "I remember using it to read webcomics directly in my rss reader. It got me to really learn regular expressions.\n \nreply",
      "Great product, is awesome play with RSS feeds. Will check it out.Want to add for anyone wanting to quickly apply a filter to one RSS feed I recommend https://www.siftrss.com/, it doesn't require create an account and it works perfectly.\n \nreply",
      "You can get a massive amount of money with the stock market plugin once you get the cryptocurrency and leverage upgrades.\n \nreply",
      "Why do you think that stock and crypto plugins will be very profitable? There are no tools to combine finance data in easy way?\n \nreply",
      "During my 20 minutes I noticed stocks and crypto seem to always fluctuate within a given range.  So if you buy in the low end of the range you're guaranteed to see an opportunity to sell at the higher end of the range.Crypto is just stocks with a wider range and more volatility.\n \nreply"
    ],
    "link": "https://www.mashups.io",
    "first_paragraph": ""
  },
  {
    "title": "Apple squandered the Holy Grail (xeiaso.net)",
    "points": 311,
    "submitter": "caust1c",
    "submit_time": "2025-01-06T02:55:33 1736132133",
    "num_comments": 426,
    "comments_url": "https://news.ycombinator.com/item?id=42607151",
    "comments": [
      "Sometimes I wish I could check an alternative universe where Apple refused to acknowledge AI slop and just doubled down on privacy and protections of the user. It almost feels like they could have just ignored the trend and let everyone else burn money until the hype dies down.\n \nreply",
      "To be honest, apple's approach to AI seems pretty close to this recommendation. I don't see much more than \"here's a few nice features to some apps\" -- vs., MS's \"now all our machines must be AI capable so that we can scan 1000s of screeshots of your device\"\n \nreply",
      "As someone who has gone back and forth between Windows and Mac OS... if Apple would stop trying to force me to log-in to use features I don't need, they would have a more compelling case. Windows is indeed a horrific data mining operation, but Apple's own endless push to enmesh me in their ecosystem is about as irritating. And Windows has WSL, which has value to me at work.(And outside of work, Apple punted on games, which means I will always buy a Windows or Linux computer.)\n \nreply",
      "You're comparing eating unflavored oatmeal with eating bleach. One of these things is clearly in a league far and away worse than the other, and you're doing nobody any favors pretending otherwise.\n \nreply",
      "No, I just don't agree. At work, that's a decision the corporate overlords make. At home, I will continue to prefer games + WSL over Apple's offering... despite having started in computing, back in the 1980s, on a Mac, and having owned a number of Macs over the years.Apple has consistently made choices that make having a Mac less palatable to me -- killing all 32-bit binaries destroyed most of what was available on Steam for the Mac. Hassling me to logon is another unforced error. Eventually I dumped my Macbook Air and bought a Windows laptop.Apple hardware is really good. I probably spend more on Windows laptops because I replace them more often. But it's a better experience. (And I can get a more adequate amount of memory.)\n \nreply",
      "I agree with you here. My solution was to use Linux on my Desktop PC and its been great for work and gaming, and I have an M1 Mac with Asahi Linux on it for on the go. I love it and I'm really happy with it. I've used Windows most of my life and is has really worn me down, and I tried MacOS for around a year, and it is equally as painful but in different ways. Linux has some rough edges in certain areas, but I like that I can easily sync all my devices, emulation files (it pairs well with the steamdeck), and configurations... and I don't have to put up with being a data cow or being constantly badgered to engage in vendor lock-in.\n \nreply",
      "> Hassling me to logon is another unforced error.Sorry, but Macs require an online account only if you want to use optional online services offered by Apple, just as is the case with Microsoft and something like OneDrive or Office 365.You aren't required to use the optional services on either platform.The difference is that Microsoft wants to force you to use an online Microsoft account to log into your own local computer.  Macs do not require that.\n \nreply",
      "You cannot install any apps on an iOS device without registering and logging in with an AppleID, which requires both an email address and a telephone number.\n \nreply",
      "> The difference is that Microsoft wants to force you to use an online Microsoft account to log into your own local computer. Macs do not require that.I have no OS or tech giant loyalty, but I think the pushiness is wash between MacOS and Windows. I still haven't found a way to stop my mac from nagging me to log into iCloud, I currently am dealing with a bug where the iCloud login modal shows up immediately after I dismiss it, in an unceasing cycle, and I have to launch the App store and the quit before the nagging stops.I recently set up a Windows 11 laptop over the holidays and found out (from Google) esoteric \"oobe*.exe\" command I had to run on the CLI on first boot (pre-setup) that showed the option to create a local account in the UI. I didn't get any nags post set-up.\n \nreply",
      "I don't use iCloud, so I simply removed it from the list of applications that are allowed to send notifications in the system settings.As far as annoying reminders go, Microsoft takes the lead by using repeated  full screen ads.> Though this is a fresh wave of full-screen update reminders, it's far from the first time Microsoft has used this tactic.https://arstechnica.com/gadgets/2024/11/microsoft-pushes-ful...At any rate, Microsoft has made multiple changes over the years designed to hide the option of using a local user account in Windows, which is a bridge too far.\n \nreply"
    ],
    "link": "https://xeiaso.net/blog/2025/squandered-holy-grail/",
    "first_paragraph": "\n        Published on 01/06/2025, 5396 words, 20 minutes to read\n    Why Apple Intelligence failed even though everything it's built upon is nearly perfectA while ago, I got really frustrated at my Samsung S7. It was failing to hold a battery charge, or having issues with the Wi-Fi, or DNS over LTE or something and I reached a breaking point where I bussed over to Bellevue Square and bought an iPhone 7. It was my first Apple product that I'd ever bought with my own money and my first non-Android phone since I used Windows Mobile 6 on a T-Mobile Dash in high school.Needless to say, I loved it at first sight and all my phones since have been iPhones. The camera is good enough that I have to go out of my way to make my actual cameras different from what you can get on an iPhone. Hell, the iPhone is a fully capable cinema camera these days. It's easily been one of the best technology moves I've ever done for my creative career. The device enables me to do things and create memories of them"
  }
]