[
  {
    "title": "Britain buys semiconductor factory for defence purposes (ukdefencejournal.org.uk)",
    "points": 103,
    "submitter": "incognitojam",
    "submit_time": "2024-09-28T21:23:34.000000Z",
    "num_comments": 40,
    "comments_url": "https://news.ycombinator.com/item?id=41683098",
    "comments": [
      "Smart to buy a preexisting fab. From what I understand via from various blogs and YouTube research, building a Feb even if your not doing cutting edge tech like tsmc, say going with an openpdk, still requires that special infrastructure. You need seismic dampening for the fab and to be located in a low activity region preferably, you need cheap water that can be refines, you need affordable electricity, and then supporting infrastructure to get the chemicals, the water, the machines delivered.  Doing all of this isn't cheap and I'd bet is a lot of paperwork.Imagine going to some rural area and trying to build a fab, chances are the town has no clue what your impact or needs are and you would be spending lots of money to basically speed up development of the area.Side not to Semiconductors fab, where do you even buy one. Sure you can buy talent or machinery and then hire engineers to help get everything working, but if you wanted to for some reason buy a fan that already exists, say just the fab location and the equipment, how do you know what company to approach that might even consider selling. Who can even afford these purchases except massive fortune 500 company's breaking a piggy bank, or some massive credit institution, which I doubt would even do this because it would probably be a massive loan to any buyer.  Seems like you need to have the money to build part of a fab if you want to buy one, idk who would even consider loaning that amount of money to a third party.\n \nreply",
      "> Seems like you need to have the money to build part of a fab if you want to buy one, idk who would even consider loaning that amount of money to a third partyGovernments are happy to subsidise fabs, and VCs are even happier to invest in AI flavoured semiconductors if you can market it that way.\n \nreply",
      "Seems like it was previously owned by Coherent, like some kind of III-V (specifically GaAs mentioned) photonics processes there in the past. This kind of technology is typically quite useful for lasers, LEDs, or potentially image sensors as well. Many LIDAR sensors and even light sources can notably depend on III-V semiconductor sensors. Also widely used by the telecom industry.Outside photonics definitely useful for high speed electronics, but that would probably take more process development to get going.\n \nreply",
      "Gen III night vision relies on it; I don't know if they ever made it there, tho.\n \nreply",
      "I didn't realize that! That seems like the most practical application from a defense perspective.\n \nreply",
      "Why gallium arsenide? It's quite fussy.\"This facility is the only secure site in the UK capable of manufacturing gallium arsenide semiconductors, a vital component in military platforms such as fighter jets.\"\n \nreply",
      "It's much more effective at extremely high frequencies used in compact radars, like the kind used on fighter jets.https://en.wikipedia.org/wiki/Gallium_arsenide#GaAs_advantag...\n \nreply",
      "This sure feels like yet another sign that major global powers are all gearing up for war.This could be as benign as a government ensuring that the 100 jobs aren't lost, but given everything going in in both Europe and the Middle East it sure seems like more than saving such a comparatively small number of jobs. They could have just signed large(r) contracts with the company to financially secure the company, acquisition is a stronger play when the government needs more direct (and more private/secure) control.\n \nreply",
      "Not an expert at all, but wasn't part of The Cold War playbook to outspend the USSR?Investing in capability isn't necessarily a signal that we expect to deploy that capability. But it does force the enemy to level up, then when that enemy runs out of money, they tend to implode.\n \nreply",
      "Based on contract ramp-ups from folks I know in sales having record years/quarters tied to the US DoD (while the rest of the sales divisions miss their numbers by huge margins) - I think that it's a foregone conclusion the powers that be expect a major uptick in hostilities sooner than later.But that's just my opinion, man.  Could also be the tail wagging the dog.Either way, I think it's pretty clear we are moving from a unipolar world to at least a \"more\" multipolar world in the near to midterm future.  Covid laid bare how utterly fragile the current supply chains are for almost everything from raw material to base chemicals to advanced chips and beyond in the western hemisphere - so it only makes sense for this to happen regardless.\n \nreply"
    ],
    "link": "https://ukdefencejournal.org.uk/britain-buys-semiconductor-factory-for-defence-purposes/",
    "first_paragraph": ""
  },
  {
    "title": "Cat memes went viral 100 years ago (bbc.com)",
    "points": 63,
    "submitter": "zdw",
    "submit_time": "2024-09-25T19:53:00.000000Z",
    "num_comments": 17,
    "comments_url": "https://news.ycombinator.com/item?id=41651191",
    "comments": [
      "The jackalope meme is in its nineties. The Kokopelli meme is over a thousand years old and has lately been rehydrated. Venus of Willendorf is around 29k years old. One can play this game for a long time.\n \nreply",
      "Cats are fascinating because the best and the worst people in our lives could be described as cat like.You know a cool cat. You also know a skittish cat.Most animal connotations have a singular meaning, but cats, cats refuse to be boxed in.\n \nreply",
      "I don't know how a UK medium such as the BBC forgot to mention the now well-known Louis Wain (an English artist) [1][2]. I share the same surname with him but am not related. My uncle, an antiquarian, gave me an original postcard from him. Before that, I discovered him in a low-quality encyclopedia at a girlfriend's house, in an entry on schizophrenia [3].[1] https://es.wikipedia.org/wiki/Louis_Wain[2] https://www.imdb.com/title/tt10687506/[3] https://www.researchgate.net/figure/Louis-Wain-Pictures-of-c...\n \nreply",
      "The influence of 100-year-old viral memes can still be felt today. We use the terms \"foo\" and \"bar\" in programming as standardized nonce words or even variable names; \"foo\" in particular is traceable at least as far back as the 1930s comic Smokey Stover, whose author Bill Holman was fond of putting nonsensical words, puns, and sight gags in his comics. The main character was a goofy fireman who drove a tiny two-wheeled fire truck actually called the Foomobile. This comic kicked off a sort of foo-mania in popular culture, as exemplified by certain Warner Bros. cartoons, in which for instance Daffy Duck would hold up a sign reading \"Silence Is Foo!\" \"Foo\" was related to \"phooey\" and \"faux pas\" and carried similar connotations of silliness or stupidity; it would combine with WWII slang \"FUBAR\" to form \"foobar\".I gave up attempting to grok the appeal of \"foo\" when I realized it was probably just a 1930s dank meme, and \"you had to be there\" to fully appreciate it. But recently we're seeing this whole process play out again so we can witness, as it happens, the rise of a new nonsense word into popular culture: \"skibidi\".\n \nreply",
      "Skibidi is a perfectly cromulent word.\n \nreply",
      "> The influence of 100-year-old viral memes can still be felt today. We use the terms \"foo\" and \"bar\"I think the term \"OK\" is a better example.\n \nreply",
      "Not even a little?That's just the initials given in quality control, which more and more people began using as synonymous for having good quality. Which is pretty easy to understand: you keep seeing it on the well working cars. So it's an OK car...Nothing about it had goofy/silly implications.It also predates pretty much everyone on this forum (and the foobar term), so it wouldn't qualify for \"you have to experience it for yourself\"\n \nreply",
      "No, OK is an abbreviation of \"oll korrect\", one example of a popular fad for cute misspellings... from the early 19th century.Did you really believe that one person handled quality control for everything?\n \nreply",
      "Foo, bar, baz, etc. are more metasyntactic variables than nonces.https://jargon-i18n.com/en/M/metasyntactic-variable.htmlI don't think they're related to FUBAR . . . that would be fugazi.Nonsense pop terms are not this. They're slang. Blame (mostly) teenaged girls for that stuff, not elite (mostly male) engineers of yore.\n \nreply",
      "Didn't Ancient Egypt basically build a civilization and cult of worship based entirely on cat memes, with a particular monument to prove it?\n \nreply"
    ],
    "link": "https://www.bbc.com/future/article/20240923-100-year-old-cat-memes-that-predate-the-internet",
    "first_paragraph": "In the age of social media, we're living through a communications revolution. But this isn't the first one, nor is it the first time cats have been at the centre of social change.It is a fundamental law of media history: as soon as a new communications technology emerges, people will use it to make pictures of cats. And those cat pictures show not only the special relationship between humans and their pets, but the changing ways that humans relate to one another.Cat memes in their modern form date back to the 1990s, when email first allowed bored office workers and friends to message each other funny felines. The cats jumped from there to social media as the web developed, where viral videos like Keyboard Cat and memes such as Grumpy Cat bloomed across platforms. Demand for this content was so high that entire websites like ICanHasCheezburger sprung up to showcase the best e-cats, aggregating popular pet videos and cat memes.But there was another trend long before any cat wanted to \"ha"
  },
  {
    "title": "Notion's Midlife Crisis (jjinux.com)",
    "points": 84,
    "submitter": "krishna2",
    "submit_time": "2024-09-28T23:14:36.000000Z",
    "num_comments": 45,
    "comments_url": "https://news.ycombinator.com/item?id=41683577",
    "comments": [
      "It seems that Notion is a kind of product that tries to solve issues from many areas, so it has everything that almost solves a meaningful problem for the user, but not quite. So the burden is on the user to go that extra mile, who will have to search for templates, memorize how non-standard tech works just to setup and maintain a system that only the maintainer knows how it works.Some people use Notion for research and academic writing, which is the same use case for my software (https://getcahier.com). By specializing on this specific use case, I've been able to: offer a standard data model that's widely used in the field (bibtex), innovate in the PDF reader in the direction that my users need (by adding scrollbar markers for the relative position of highlights), and provide clear instructions to users on how to use the software. In principle, learning to use the software is learning how to perform an activity better - in this case, formal or informal research. When working with a software that's too general the user will always have to ask himself an additional question: \"now, how do I make it do what I need?\".As the mathematician Hardy used to say, a beautiful theorem is one that is not too specific but also that is not too general - it has to strike a balance between the two.\n \nreply",
      "I've often thought that, looking historically, Notion only exists because product innovation in Google Docs is decoupled from revenue growth for Google Workspace. Putting a draggable handle, at the user's election, alongside every paragraph in Docs, and adding a customizable shortcut for search across docs, would go a long way towards Docs being 90% of what Notion's value proposition was as of a few years ago. But most startups using Notion already had Google Workspace for email anyways, so there was no growth story there for Google to invest in this mandate.Now, Notion's done a lot since then. If you want a knowledge base that can also have semi-structured tabular data, and portability in that data, it's hard to beat. Notion AI, pulling from disparate sources with the context of the current planning document, is really neat, too! But not every company will want to pay the per-head cost for this, unless it can replace other existing tools.And when it comes to spaces like CRM in that context, looking at https://www.google.com/search?q=notion+crm&udm=14 ... there's a lot that could be said about Notion's (lack of) SEO/advertising there, but more concretely, a CRM solution nowadays has to bring a wealth of integrations as a near-prerequisite, and Notion doesn't have a mature story there - nor can they easily, because different customers will have different data models that make it hard to have a standardized notion of \"what fields can I count on to be present for an Account.\"Notion is a really powerful system. If it didn't already have a $10B valuation, it would be in tremendously good shape. But it has a long way to go to find the areas of growth it needs to grow beyond $10B.\n \nreply",
      "I like Notion but I share the sense that it's not really targeted at my use case anymore. I think I could essentially move everything into Obsidian and lose almost nothing in the process.I just use it for taking notes and writing stuff down. I like how easy it is to drop an image, video, or document into a notion page, but I've only barely used features like databases which seem to be the big selling point, and none of my usage of those is really anything that couldn't just be a plaintext table in a markdown doc.One of these days I'll get up the gumption to crawl through, excise what's worth keeping into Obsidian , and cancel my subscription. But not today, lol.\n \nreply",
      "I started as an Obsidian user, and generally I like the fact that it's just Markdown, but markdown tables really suck, to the point that I simply ended up avoiding them at all costs, and I used OnlyOffice's Excel equivalent in parallel to Obsidian for a while.But Notion has good tables by default, so I can have both good tables (and tableviews) and normal text files in the same app.I could have tried Obsidian plugins, but I suspect that it would have been a time sink, and Notion offered everything in a neat package, so in the end, it won.\n \nreply",
      "I think that's fair.I will say that Obsidian's tables have gotten a lot better in terms of reflow, sorting, etc. At some point Obsidian might add some additional config to their tables to allow users to manually control column widths, etc., but it would have to be non-standard markdown - like how you can scale down images by adding a width parameter.    ![[./media/example_image.png|Custom caption|450]]\n \nreply",
      "I just migrated everything out of Notion into Ibsidian.  Notion was unusable after more than a few hundred items in a DB.  I migrated to using dataview and lists in Obsidian and haven't had a problem since.  And it works offline.I use it for my workout logbook and cooking/recipe log with hundreds of entries.\n \nreply",
      "notion doesn't have normal text files.You can click \"export to markdown\" on a notion page, you can click \"import from markdown\", but those two markdown dialects are totally incompatible. Most of the time notion can't even read what it exported.The notion web editor for me has very noticeable lag, so I really want to just be able to write some text somewhere to represent a notion table or whatever, but there's simply no supported way to do that I'm aware of.I mean, it's fine, using a i7 core at 100% at all times just to produce text at a 2 second delay is totally fine for a text editor, I'm sure notion's doing its best.\n \nreply",
      "For basic notes, the ones that come with most devices imo are very good. Apple notes, Samsung notes, Onenote, all very good. So good I find it difficult to recommend anything else to people, like Notion still doesn\u2019t even have proper pen/stylus support. Obsidian to me fits a good niche of being extensible with plugins but I get why some people can\u2019t get into it.Notion shines with database use, and was how I used to write my blogs and connecting the API directly to my site to auto update. I\u2019m surprised you\u2019re a paying customer and barely use the database stuff!\n \nreply",
      "I'm very curious how and why to use Obsidian well. It's so confusing I've given up multiple times.\n \nreply",
      "It's just (\"just\" in the good sense) a fancy Markdown editor with a bunch of plugins, including for most of the core features (which are just bundled-in plugins and can be turned off).\n \nreply"
    ],
    "link": "https://www.jjinux.com/2024/09/notions-mid-life-crisis.html",
    "first_paragraph": ""
  },
  {
    "title": "Four more health care workers ill after caring for bird flu case in Missouri (statnews.com)",
    "points": 91,
    "submitter": "divbzero",
    "submit_time": "2024-09-28T21:49:59.000000Z",
    "num_comments": 2,
    "comments_url": "https://news.ycombinator.com/item?id=41683217",
    "comments": [
      "> The CDC continues to characterize the risk posed to the general public by the H5N1 outbreak as \u201clow.\u201dI can\u2019t take such statements seriously after what happened during COVID, with various organizations initially downplaying the issue, then taking it to new heights of hysteria, changing stances on masks, not seriously pursuing the lab leak theory, seeking to censor/oppress different opinions, etc. I am concerned that statements like this look just like what happened at the start of COVID.> The fact that the Missouri Department of Health and Senior Services is still finding such individuals weeks after the H5N1 patient was released from hospital is raising concerns about the rigor of the investigation that the state is running.> As of Friday, 239 herds in 14 states have tested positive for H5N1, though that is believed to be an underestimate of the true scope of the outbreak. Missouri is not among the states that reported infected dairy herds.Are we once again going to take it less seriously than we should only to then swing to the other extreme later?\n \nreply",
      "Missouri passed an ag gag law back in 2012, so a lot of fog has been cast around how dangerous chicken is right now for legal reasons.\n \nreply",
      "Dupe of https://news.ycombinator.com/item?id=41682828\n \nreply"
    ],
    "link": "https://www.statnews.com/2024/09/27/bird-flu-missouri-four-more-healthcare-workers/",
    "first_paragraph": ""
  },
  {
    "title": "The perils of transition to 64-bit time_t (gentoo.org)",
    "points": 191,
    "submitter": "todsacerdoti",
    "submit_time": "2024-09-28T16:31:04.000000Z",
    "num_comments": 140,
    "comments_url": "https://news.ycombinator.com/item?id=41681266",
    "comments": [
      "The way this was handled on Mac OS X for `off_t` and `ino_t` might provide some insight: The existing calls and structures using the types retained their behavior, new calls and types with `64` suffixes were added, and you could use a preprocessor macro to choose which calls and structs were actually referenced\u2014but they were hardly ever used directly.Instead, the OS and its SDK are versioned, and at build time you can also specify the earliest OS version your compiled binary needes to run on. So using this, the headers ensured the proper macros were selected automatically. (This is the same mechanism by which new/deprecated-in-some-version annotations would get set to enable weak linking for a symbol or to generate warnings for it respectively.)And it was all handled initially via the preprocessor, though now the compilers have a much more sophisticated understanding of what Apple refers to as \u201cAPI availability.\u201d So it should be feasible to use the same mechanisms on any other platform too.\n \nreply",
      "This does not solve the main issue as explained by TFA, which is that now applications that use a different \"compiled OS version\" cannot link with each other anymore. Your application X  which declares to run on OS v.B cannot link anymore with application Y which declared to run on OS v.A , even when both are running under OS v.B .In fact, what you describe is basically what every platform is doing.... as doing anything else would immediately break compatibility with all current binaries.\n \nreply",
      "Lol, that only works if you can force everyone on the platform to go along with it. It is a nice solution, but it requires you to control the c library. Gentoo doesn\u2019t control what libc does; that\u2019s either GNU libc or MUSL or some other thing that the user wants to use.\n \nreply",
      "It\u2019s entirely opt-in, Apple doesn\u2019t force it. If you just do `cc mything.c -o mything` you get a binary whose minimum required OS is the version of the SDK you built it against, just as with any other UNIX-like OS. It\u2019s just giving the developer the option to build something they know will run on an earlier version too.And since it was all initially done with the preprocessor rather than adding knowledge to the compilers, there\u2019s no reason individual libraries can\u2019t handle API versioning in exactly this way, including things like differing `ino_t` and `off_t` sizes.\n \nreply",
      "> requires you to control the c libraryWhich is why basically every other same operating system does that. BSDs, macOS, WinNT. Having the stable boundary be the kernel system call interface is fucking insane. And somehow the Linux userspace people keep failing to learn this lesson, no matter how many times they get clobbered in the face by the consequences of not learning it.\n \nreply",
      "Making the stable boundary be C headers is insane!It means that there's not actually any sort of ABI, only a C source API.\n \nreply",
      ">  no matter how many times they get clobbered in the face by the consequences of not learning it.While I do think that the boundary should be set at the libc level just out of design cleanliness, I fail to see what the \"consequence\" of not doing so is.  You're just changing the instruction binaries use for syscalls from a relative jump to a trap (or whatever), but you still have all the problems with data type sizes, function \"versions\" and the like which are what this discussion is about.\n \nreply",
      ">  I fail to see what the \"consequence\" of not doing so is.TFA ?\n \nreply",
      "No. How would it benefit TFA _at all_?For all practical purposes Linux currently has _two_ stable boundaries, libc (glibc) and kernel. If you move it so that the stable boundary is only the kernel, you still have this problem. If you move it so that the stable boundary is only libc, you still have this problem.In fact, TFA's problem comes from applications passing time_ts around, which is strictly a userspace problem, and the syscall interface is almost entirely ortogonal. Heck, the 32-bit glibc time_t functions probably use the 64-bit time_t syscalls these days...\n \nreply",
      "> WinNTThis isn't true. There is an msvcrt in the OS, but it's mainly there for binaries that are part of Windows. The CRT is released as part of Visual Studio, out of band from the Windows release schedule.Although CRT's place is in the layering a little different, because of so many things talking directly to Windows APIs.\n \nreply"
    ],
    "link": "https://blogs.gentoo.org/mgorny/2024/09/28/the-perils-of-transition-to-64-bit-time_t/",
    "first_paragraph": "Micha\u0142 G\u00f3rnyRetroactively fixing the worldIn the Overview of cross-architecture portability problems, I have dedicated a section to the problems resulting from use of 32-bit time_t type.  This design decision, still affecting Gentoo systems using glibc, means that 32-bit applications will suddenly start failing in horrible ways in 2038: they will be getting -1 error instead of the current time, they won\u2019t be able to stat() files.  In one word: complete mayhem will emerge.There is a general agreement that the way forward is to change time_t to a 64-bit type.  Musl has already switched to that, glibc supports it as an option.  A number of other distributions such as Debian have taken the leap and switched.  Unfortunately, source-based distributions such as Gentoo don\u2019t have it that easy.  So we are still debating the issue and experimenting, trying to figure out a maximally safe upgrade path for our users.Unfortunately, that\u2019s nowhere near trivial.  Above all, we are talking about a brea"
  },
  {
    "title": "FFT-based ocean-wave rendering, implemented in Godot (github.com/2retr0)",
    "points": 659,
    "submitter": "RafelMri",
    "submit_time": "2024-09-28T06:51:41.000000Z",
    "num_comments": 86,
    "comments_url": "https://news.ycombinator.com/item?id=41678412",
    "comments": [
      "The other two Godot repos by this person are very interesting as well. I love the level of detail they add to explaining their repos. This one is particularly interesting: https://github.com/2Retr0/GodotGaussianSplattingWonder if they are a student, they seem to cite other work frequently and have a strong grasp on recently published materials.\n \nreply",
      "> Wonder if they are a studentSeems like they might be.One of their repos has this title and description:> ENGR96A-coursework> Relevant coursework for ENGR 96A Introduction to Engineering Design F23And F23, judging by the dates of the commits in that repo means Fall 2023.Of course, it could be that this and other UCLA courses referenced in the repos are open for everyone. So maybe you don\u2019t have to be enrolled as a traditional student at UCLA to take them.\n \nreply",
      "20 years ago I could spend months tweaking ocean surface in renders and not get even close to that. Amazing how good this is!!Although the demo clip feels a bit exaggerated (saying this having over 50k Nm open water ocean sailing in my logbook). Waves that sharp and high would need the wind blowing a lot stronger. But I am sure that is just a parameter adjustment away!Since it is in Godot I assume the rendering is real time? Does it need a monster GPU?\n \nreply",
      "This is not a criticism, just an observation: it looks like what I imagine an ocean of hot corn syrup would look like (after dyeing it blue). The viscosity seems right; possibly the surface tension is not what ocean water would have (a colloid of salty H2O and biomaterial, which is common in real-world experience but quite ugly for computational fluid dynamics).Also note that the ocean spray here is a post-hoc effect, but for a real ocean the spray dulls the sharpness of the waves in a way that will be (vaguely) apparent visually.Of course there's almost no \"physics\" in this elegant, simple, and highly effective model, so I want to emphasize that suggesting directions to poke around and try things should not be construed as an armchair criticism.\n \nreply",
      "This is literally a criticism.\n \nreply",
      "A) It would be a criticism if I thought these effects could be plausibly rendered with a similar FFT algorithm, but that seems unlikely to me. I think these results are \"highly effective\" given the toolset, which is not attempting to emulate the actual physics.B) This project is not an all-out attempt to make lifelike water, it is described as an experiment. I am making an observation about the result of the experiment, not criticizing the project for failing to meet standards it wasn't holding itself to.\n \nreply",
      "Neat that FFT yields great waves.But ultimately, does that model model vortexes or other fluid dynamics?Can this model a fluid vortex between 2-liter bottles with a 3d-printable plastic connector?Curl, nonlinearity, Bernoulli, Navier-Stokes, and Gross-Pitaevskii are known tools for CFD computational fluid dynamics with Compressible and Incompressible fluids.\"Ocean waves grow way beyond known limits\" (2024-09) https://news.ycombinator.com/item?id=41631177#41631975\"Gigantic Wave in Pacific Ocean Was the Most Extreme 'Rogue Wave' on Record\" (2024-09) https://news.ycombinator.com/item?id=41548417#41550654\n \nreply",
      "This not a criticism, but the comment you are replying to is a critique, not a criticism.\n \nreply",
      "> 20 years ago I could spend months tweaking ocean surface in renders and not get even close to that.There are tons of videos now about that making the whole thing (somewhat) more approachable, but there are still a lot of pitfalls!One of my favourites on the subject: https://m.youtube.com/watch?v=yPfagLeUa7kThis one is nice too: https://m.youtube.com/watch?v=kGEqaX4Y4bQ\n \nreply",
      "Agree, based on the clips, it looks a bit random.I think it is looks to be very good, and probably the best I\u2019ve seen having given it a cursory search recently to see what was possible.In terms of what I\u2019d like to see, open ocean waves generally have more rhythm, I\u2019d be very interested to see a simulation of 15 knots of wind blowing over 1km for a few hours and see if that matches what I observe, which would be relatively organised wave trains (sets) that build and disperse.\n \nreply"
    ],
    "link": "https://github.com/2Retr0/GodotOceanWaves",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        FFT-based ocean-wave rendering, implemented in Godot\n      An open ocean rendering experiment in the Godot Engine utilizing the inverse Fourier transform of directional ocean-wave spectra for wave generation. A concise set of parameters is exposed, allowing for scriptable, real-time modification of wave properties to emulate a wide-variety of ocean-wave environments.A common approach for animating water in video games is by displacing vertices using Gerstner waves. While Gerstner waves work well for modeling the lower-frequency details in calmer waters, they fall short in accurately representing the choppy surfaces in an open ocean. To simulate the latter, a more complex approach simulates waves using the inverse Fourier transform of ocean-wave spectra modeled from empirical data gathered by oceanographers.A benefit of working in fr"
  },
  {
    "title": "Reverse-engineering a three-axis attitude indicator from the F-4 fighter plane (righto.com)",
    "points": 130,
    "submitter": "zdw",
    "submit_time": "2024-09-28T17:05:29.000000Z",
    "num_comments": 41,
    "comments_url": "https://news.ycombinator.com/item?id=41681514",
    "comments": [
      "Thanks for including ridiculously high res images.And it amazes me how many analog tricks they used. Modern day would be a couple lines of code.\n \nreply",
      "The 1950s were a time in computing where it wasn't a given that digital computing was clearly \"better\". We still hadn't developed methods of mass-producing reliable, fast, and cheap microelectronics and controllers. So for high-reliability applications, analog computing was THE solution.In 1954, Rex Rice wrote this piece about preferring a simple plugboard as the means of programming a computer, versus any sort of abstraction with a programming language (https://dl.acm.org/doi/10.1145/1455270.1455272). So it was still very much up for debate, whether high-level programming languages were even the right solution for the problems being faced.But I agree with you, our forefathers were simply geniuses to have figured out how to manipulate the physical world to produce mathematical computations. Early in his career, my dad had to disassemble and reverse-engineer some Soviet-made aerospace devices, and he still fondly recalls how superbly engineered and precise the Soviet devices were. I wish there was more information out there about Soviet computing, but the winners do write history after all.\n \nreply",
      "My understanding the surprising factor that settled the debate for analog vs digital computers. was that digital computers require far less precise electronics. the voltage in an analog computer has to be exactly 5.2648 volts, every resister, capacitor, transistor has to be a high precision part, the more complex the computer the higher precision required. while in a digital computer \"close to 5 volts\" is good enough. this makes the components cheaper, more reliable and smaller. and as such the digital computer won.This is why I have my doubts about existing designs for quantum computers, the quantum algorithms we are trying to solve in hardware require an analog design and we rejected analog computers before, mainly because they were unable to scale. This inability to scale is the same problem we see with quantum computers.\n \nreply",
      "It's interesting that you note the unreliability. I always assumed tubes were unreliable, but thought anything solid state (even those card based systems) would be \"reliable enough\" to start taking for granted.But then you look at it and think Yeah, obviously they're not going to have MTBF times in the millions. It's going to be hundreds of hours - once a week, or maybe every few weeks between real hard crashes.How would that change your behaviour.\n \nreply",
      "I've wanted to add such an indicator to my car's dash (I already added a boat compass, which I find quite useful and aesthetic). Unfortunately, electronic indicators of any kind are much more rare than vacuum powered ones or all-glass cockpits.\n \nreply",
      "Boat compass on the dash is awesome, I might have to borrow that. Any issue with interference from the vehicle itself?\n \nreply",
      "Yeah. My compass (a Ritchie) has two axis calibration at the bottom; I ended up maxing out one of the axes (so it's still a bit off). Also, it tends to shift by a decent amount when the car is pointing up or down steep hills.\n \nreply",
      "What you need my friend is a ring-laser gyro.\n \nreply",
      "Author here if there are any questions...\n \nreply",
      "How accurate you think this instrument was compared to the ic based sensors found in your typical smartphone nowadays?\n \nreply"
    ],
    "link": "http://www.righto.com/2024/09/f4-attitude-indicator.html",
    "first_paragraph": ""
  },
  {
    "title": "The Little Typer (2018) (thelittletyper.com)",
    "points": 122,
    "submitter": "aarestad",
    "submit_time": "2024-09-28T14:54:43.000000Z",
    "num_comments": 28,
    "comments_url": "https://news.ycombinator.com/item?id=41680621",
    "comments": [
      "As a retired electrician attempting hobby-level \"learn to code\" (i.e. I don't know anything about modern programming and did not even understand anything from OP's link), this Amazon review helped me understand OP's link:>..I\u2019ve been (slowly) working my way through The Little Typer. It\u2019s a deep dive on dependent types, starting with the very basics and building up a toy language one step at a time. I can feel it gradually changing how I think about programming (heck, how I think about thinking).>..It\u2019s really, really enjoyable. The format is very approachable, even fun. Rigorous and demanding, yet doesn\u2019t take itself too seriously. Some lisp experience is helpful, but probably (maybe?) not necessary. But do yourself a favor and learn lisp anyway ;-)Maybe some day I'll motivate myself to even figure out how to first install Racket/Pie (first, I have to figure out what even these are).Thanks for the motivation/educational resource, OP.\n \nreply",
      "I\u2019d recommend the earlier book in the series, The Little Schemer, for what it\u2019s worth! It\u2019s more aimed towards beginners. Similar format to this book.\n \nreply",
      ">The Little SchemerInially wasn't sure if your comment was \"a joke,\" but thanks for the real introduction:amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ [link to book]\n \nreply",
      "https://mitpress.mit.edu/author/daniel-p-friedman-4089/ - one of the authors on all the books in the series.The Little Schemer and The Seasoned Schemer are both beginner books using Scheme. The Reasoned Schemer uses Scheme + Minikanren, an extension of Scheme that allows for logical/relational programming (look up Prolog and Datalog as languages in the same vein). The Little Typer is the linked book covering type systems and, specifically, dependent typing. The Little Learner covers machine learning. The Little Prover uses the same format and has you develop proofs.Little, Seasoned, and Reasoned are, IMO, the better books in the series to start with. I found the later ones to be good but very dense and not always as clear, had to step back a lot more and reread sections. That's mostly due to the material being much harder and more technical than the earlier books, not a quality issue with the writing itself.My recommend reading order for someone with no Racket, Scheme, or Lisp experience wanting to tackle the series would be: Little -> Seasoned -> [Optional: Reasoned] -> {Any order: Prover, Typer, Learner}. I think Prover may be better before Typer, but it's been a while since I looked at either, so a soft recommendation of Prover -> Typer.If you have some Racket, Scheme, or Lisp experience, I'd suggest to either skim the first couple books to get used to the format or skip them entirely and use Reasoned as your first book in the series.http://minikanren.org\n \nreply",
      "With no Scheme or programming background, I'd study HtDP (https://htdp.org) as an interlude, after The Little Schemer. Pace is gentle, and explanations about program design are long and very lucid. After those two, I'd try The Little MLer. The other books are quite advanced, better to build solid foundations first.\n \nreply",
      "Friedman's books are all great. All of them. But they don't work for everybody.If you can be relaxed and think of the interaction as play, they're very good. If you're feeling more of a \"serious business\" mindset, it can be hard to get in the groove of his style.There are a lot of jokes about food and encouragement to take breaks. If you can get into the learning as play mindset, I'd strongly encourage taking the recommended breaks. maybe grab a snack, but spend some time noodling around with the ideas in each section. I think that's the real point, food is a good excuse to pause and get your hands off the keyboard.Racket should be easy to install. Big download button for a ton of platforms here - https://racket-lang.orgI believe HN still runs on the racket runtime. it may appear to be a toy, but thoughtful design can take you a long long way. it's well supported and a great way to get started.If Friedman doesn't work out for you, the racket docs link to how to design programs - https://htdp.org/2024-8-20/Book/index.html Which is also pretty darn good.The other classic is the wizard book - https://sarabander.github.io/sicp/html/index.xhtml the structure and interpretation of computer programs. This'll walk you up to and somewhat through compilation.There are a ton of programming languages all with amazing assortments of features.Scheme is much more \"there's nothing left to take away\". I think it's very much the undisputed champion in that regard. While still being able to ship software. Scheme may not be the optimal choice for all people in all situations (obviously). It's a spectacular place to start though. It may not turn out to be the language for you. That's totally fine! But it'll get you deep enough to figure out what you like and don't like. And, when it comes down to it, you can shape it into pretty much anything.Yeah, I hope you enjoy the little schemer.\n \nreply",
      "Check this course out:https://www.edx.org/learn/coding/university-of-british-colum...I think you'll really like it. It uses Racket and is based upon the How to Design Programs book. It is absolutely perfect for someone new to coding.\n \nreply",
      "I liked the dialogue-driven format of this and the others in the series (I've read Schemer and Learner too), at least once I got used to the split-mind feel of it, but I feel it would be better as an interactive media instead of the books.There's an expectation that you're following along and typing nearly every line into the appropriate REPL.  I found this difficult to do while juggling the hardcopies and not any easier on an ebook reader -- I could stop worrying about cracking the spine but the digital copies I sampled or purchased always completely ruined the typesetting.  All the REPL interactions are transcribed as images, and the constant focus-and-pinch-zoom disrupts the engagement.I ended up just reading through and hoping to catch enough of the gist of things then doing my usual side-project-as-learning instrument thing.  I hope somebody tries to build an interactive playground for this book or the Little Learner, complete with guiding dialog.The typesetting in the hardcopies is really unique and impressive.\n \nreply",
      "For those looking for a more straightforward approach to type systems, here are two resources I like:1: Terence Parr's chapter \"Enforcing Static Typing Rules\" from Language Design Patterns.2: Eli Bendersky's Python implementation of Hindley-Milner type inference.--1: https://pragprog.com/titles/tpdsl/language-implementation-pa...2: https://eli.thegreenplace.net/2018/type-inference/\n \nreply",
      "I bought this book when it first came out. Unfortunately this book required a time commitment greater than what I had available at that time and I didn't finish. It's thoroughly enjoyable (at least the first few chapters) but it requires a level of thinking that might not be available if you just finished a day of work.\n \nreply"
    ],
    "link": "https://thelittletyper.com/",
    "first_paragraph": "\n  Daniel P. Friedman and David Thrane Christiansen\n\n  Foreword by Robert Harper\n\n  Afterword by Conor McBride\n\n  Drawings by Duane Bibby\n\nAn implementation of Pie is available from the Racket package system. To install Pie, first install a recent version of Racket. Open DrRacket and select \"Install Package\" from the \"File\" menu. In the package name field, type pie and then click the \"Install\" button.\n\nTo use Pie, begin a file with #lang pie in DrRacket.\n"
  },
  {
    "title": "Show HN: Open-source app builder for comfy workflows (github.com/viewcomfy)",
    "points": 17,
    "submitter": "gbieler",
    "submit_time": "2024-09-28T22:36:34.000000Z",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=41683407",
    "comments": [
      "Nice to see new things. Does your team know about SwarmUI[1]?SwarmUI has been nice for sharing workflows with friends who might not want to learn ComfyUI, they can type in a prompt or any other config exposed in the workflow and even upload image input. It\u2019s pretty good.I would still like to see a web interface for workflows that is more-so built for indie hackers. I\u2019d like to see a Next.js frontend that calls the ComfyUI on a server, it has a specific workflow configured for that app, and the server could be reused for another Next.js frontend, all that needs to change is the workflow. Letting you create multiple web apps with 1 Comfy backend.Will keep tabs on viewcomfy, good luck!\u2014-[1]: https://github.com/mcmonkeyprojects/SwarmUI\n \nreply",
      "Hey, thanks for sharing! I used it before and it is indeed useful for that kind of use case.Like you said, there seems to be a gap between people who can use Comfy as a development tool and workflows' target users. The idea is to develop a set of tools to help bridge that gap.\n \nreply",
      "we will keep you posted, thanks for the comment\n \nreply"
    ],
    "link": "https://github.com/ViewComfy/ViewComfy",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        ViewComfy is a open source tool to help you create beautiful web apps from ComfyUI\n      ViewComfy is an open source tool to help you create beautiful web apps from ComfyUI workflows\nThe Playground is a simplified UI where you can run your workflows.You can drag and drop your ComfyUI workflow_api.json file into the form editor. It will then generate a new form that you can use to configure the inputs that will be displayed on the playground.You need to have comfy-cli installedInstall Node.js 18.18 or later (recommended v20.17)Clone the repoIf you're using a virtual environment, activate it.If you're using a virtual environment with PowerShell you need to put the full path of the Activate.ps1 file in the .env file\ne.g:Install dependencies and start the dev server\n(Don't forget to activate the virtual environment if you're using one)V"
  },
  {
    "title": "Show HN: Iceoryx2 \u2013 Fast IPC Library for Rust, C++, and C (ekxide.io)",
    "points": 23,
    "submitter": "elfenpiff",
    "submit_time": "2024-09-28T16:40:46.000000Z",
    "num_comments": 6,
    "comments_url": "https://news.ycombinator.com/item?id=41681344",
    "comments": [
      "Looks great! From a quick glance it seems like it is a cross platform shared memory library. Maybe similar to this? [1].Suggestion: would be cool to have a quick description of the system calls involved for each supported platform [2]. I'm guessing mmap on linux/osx and CreateFileMapping on Windows?--1: https://github.com/LiveAsynchronousVisualizedArchitecture/si...2: https://github.com/eclipse-iceoryx/iceoryx2?tab=readme-ov-fi...\n \nreply",
      "Congrats on the release.What's the difference between iceoryx and iceoryx2? I don't want to use Rust and want to stick to C++ if possible.\n \nreply",
      "Besides being written in Rust, the big difference is the decentralized approach. With iceoryx1 a central daemon is required but with iceoryx2 this in not the case anymore. Furthermore, more fine grained control over the resources like memory and endpoints like publisher. Overall the architecture is more modular and it should be easier to port iceoryx2 to even more platforms and customize it with 3rd party extension.With this release we have initial support for C and C++. Not all features of the Rust version are supported yet, but the plan is to finish the bindings with the next release. Furthermore, with an upcoming release we will make it trivial to communicate between Rust, C and C++ applications and all the other language bindings we are going to provide, with Python being probably the next one.\n \nreply",
      "Looks like it has significantly lower latency.> want to stick to C++ if possibleThe answer to that concern is in the title of the submission.\n \nreply",
      "> Language bindings for C and C++ with CMake and Bazel support right out of the box. Python and other languages are coming soon.\n \nreply",
      "How does this compare to and/or integrate with OTOH Apache Arrow which had \"arrow plasma IPC\" and is supported by pandas with dtype_backend=\"pyarrow\",  lancedb/lancedb, and Serde.rs? https://serde.rs/#data-formats\n \nreply",
      "[deleted]"
    ],
    "link": "https://ekxide.io/blog/iceoryx2-0-4-release/",
    "first_paragraph": "\nChristian Eltzschig\n   - \n  \n    28/09/2024\n  \n\n  \n\n        iceoryx2\n      \n\n        rust\n      \n\n        cpp\n      \n\n        c\n      \niceoryx2 is a service-based inter-process communication (IPC) library designed\nto make communication between processes as fast as possible - like Unix domain\nsockets or message queues, but orders of magnitude faster and easier to use.\nIt also comes with advanced features such as circular buffers, history, event\nnotifications, publish-subscribe messaging, and a decentralized architecture\nwith no need for a broker.With today's\niceoryx2 v0.4.0 release,\nwe've achieved many of our milestones and are now close to feature parity with\nits predecessor, the trusty old\niceoryx.If you're wondering why you should choose iceoryx2 over iceoryx, here are some\nof its next-gen features:With this new release, we're faster than ever. On some platforms,\nlatency is even under 100ns! Be sure to check out our\niceoryx2 benchmarks\nand try them out on your platform.Here are some"
  },
  {
    "title": "Autossh \u2013 automatically restart SSH sessions and tunnels (github.com/autossh)",
    "points": 115,
    "submitter": "denysonique",
    "submit_time": "2024-09-28T16:09:08.000000Z",
    "num_comments": 59,
    "comments_url": "https://news.ycombinator.com/item?id=41681110",
    "comments": [
      "For web-servers on remote machines, I have found this useful:  socat TCP4-LISTEN:1234,fork,bind=127.0.0.1 EXEC:'ssh my.remote.server nc 127.0.0.1 1234'\n\n1234 = local/remote port. Can be adapted to use unix sockets at the remote end. my.remote.server = your remote server address.This will set up a tunnel only when needed, and seems to play nicely with my browser.\n \nreply",
      "If you have systemd, you could do this:    [Unit]\n    Description=look ma, no autossh\n    After=network.target\n    \n    [Service]\n    Type=exec\n    ExecStart=/usr/bin/ssh -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -Nn -R 7070:localhost:22 pc 'sleep 20m'\n    Restart=always\n    RestartSec=20\n    RuntimeMaxSec=30m\n    \n    [Install]\n    WantedBy=default.target\n \nreply",
      "This is no better than ssh in a loop, which is trivially done by a shell script - no systemd needed.However, when you have shitty NAT routers (SonicWall, any AT&T fiber device, for instance), the connections will be timed out or will die and there'll be long periods where you're waiting for the next iteration of the loop, and/or sometimes it'll get stuck and never try again.autossh deals with this by actually passing traffic and taking action if traffic doesn't move.\n \nreply",
      "> autossh deals with this by actually passing traffic and taking action if traffic doesn't move.The `ServerAliveInterval` option above achieves this.\n \nreply",
      "No, it actually doesn't, or at least not properly. It's not hard to get ssh sessions that are wedged.\n \nreply",
      "Have you reported this as a bug then?\n \nreply",
      "If you read what the person wrote, you'll see a ServerAliveInterval.If there are ServerAliveIntevalMaxCount (defaults to 3) attempts that fail, the ssh connection will drop. And systemd will restart it.Today you learned. Nice. I've dropped autossh for years and you can too, even on flaky connections.\n \nreply",
      "Today I learned that some people make mistakes, but I already knew that ;) ServerAliveInterval doesn't do this properly and consistently.I've used my own autossh type script for two decades now. It's mostly used to give access to machines behind shitty NAT, and/or that have addresses that constantly change, and/or for systems on CGNAT, like Starlink.If ServerAliveInterval works so well and negates the need for something like autossh to exist, then why have sessions created by my script, which has ServerAliveInterval (and ServerAliveIntevalMaxCount) gotten hung up where the script needs to kill the old and create a new ssh connection now and then? My script logs each timeout, each session hang, and each new connection, and depending on the network, it can happen often.Please read the bit where it's explained how autossh sends test data back and forth. Do you think you just magically and cleverly discovered ServerAliveIntevalMaxCount and that the autossh people have no idea that it exists?Or perhaps they know it exists, they know it's not perfect, and they used another mechanism to make up for the shortcomings of what ssh offers out of the box?\n \nreply",
      "Just to clarify that we're talking about the same thing in case I misunderstood something: autossh (style) scripts do these things:1. fake data to keep a connection \"fresh\" for shitty middleware2. detect connection which are stuck (state = open, but no data can actually round trip) and kill them3. restart ssh when that happensIs that what we're talking about here? I think people are saying that points 1 and 2, but not 3, are covered by SSH's ServerAlive* options. And that's also how OpenSSH advertises and documents those options.You're saying that those options don't actually solve points 1 and 2, while (your/their/etc) autossh does properly detect it.Correct so far?If so that seems like a bug in OpenSSH (or whatever implementation) which should get appropriate attention upstream. Has anyone reported this upstream? Is there a ticket to follow?PS: I think we're all in agreement that option 3 is out of scope for stock OpenSSH (regardless of what other tools do)",
      "The README has this text:> For example, if you are using a recent version of OpenSSH, you \n may wish to explore using the ServerAliveInterval and \n ServerAliveCountMax options to have the SSH client exit if it \n finds itself no longer connected to the server. In many ways \n this may be a better solution than the monitoring port.\n \nreply"
    ],
    "link": "https://github.com/Autossh/autossh",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        Automatically restart SSH sessions and tunnels\n      \n        Automatically restart SSH sessions and tunnels\n      "
  },
  {
    "title": "Show HN: Mitata \u2013 Benchmarking tooling for JavaScript (github.com/evanwashere)",
    "points": 62,
    "submitter": "evnwashere",
    "submit_time": "2024-09-28T18:54:23.000000Z",
    "num_comments": 19,
    "comments_url": "https://news.ycombinator.com/item?id=41682237",
    "comments": [
      "Hi! In your benchmark, do you use a fixed number of iterations to stop the test, or do you apply a statistical criterion, such as the Student's t-test, to determine when to stop?\n \nreply",
      "i didn\u2019t want it to be complex so it uses simple time budget + at least x amount of samples, both and more can be configured with lower level api.in practice i haven\u2019t found any js function that gets faster after mitata\u2019s time budget (excluding cpu clock speed increasing because of continuous workload)another problem is garbage collection can cause long pauses that cause big jumps for some runs, thus causing loop to continue searching for best result longer than necessary\n \nreply",
      "Hey, I wrote about this once! I use it a ton. Thanks for your work. I can\u2019t wait to dig into 1.0.\n \nreply",
      "This is awesome! I\u2019ve been working on optimizing a javascript library recently and am feeling the pain of performance testing. I\u2019ll check this out.\n \nreply",
      "Is it by accident that \"mitata\", the project name, means \"to measure\" in Finnish?\n \nreply",
      "it was hand picked for exactly that :)\n \nreply",
      "Any plans for web compatible output?I maintain this repo, and we hand roll the stats page, but if we could get that for free it\u2019d be so great!https://github.com/moltar/typescript-runtime-type-benchmarks\n \nreply",
      "I have been thinking of reusing/creating something like https://perf.rust-lang.org/ that lets you pick and compare specific hash/commit with all data from json format\n \nreply",
      "This is for \"headless\" JavaScript outside the browser, right?\n \nreply",
      "Never heard JS called \"headless\". Not sure I like it.edit: all JS is \"headless\". almost all languages are headless. _Software_ can be headless or have a GUI. but languages are naturally headless.\n \nreply"
    ],
    "link": "https://github.com/evanwashere/mitata",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        benchmark tooling that loves you \u2764\ufe0f\n      bun add mitatanpm install mitataOn runtimes that expose gc (e.g. bun, node --expose-gc ...), mitata will automatically run garbage collection before each benchmark.Out of box mitata can detect engine/runtime it's running on and fall back to using alternative non-standard I/O functions. If your engine or runtime is missing support, open an issue or pr requesting for support.With other benchmarking libraries, often it's quite hard to easily make benchmarks that go over a range or run the same function with different arguments without writing spaghetti code, but now with mitata converting your benchmark to use arguments is just a function call away.For those who love doing micro-benchmarks, mitata can automatically detect and inform you about optimization passes like dead code elimination witho"
  },
  {
    "title": "Theattyr: A terminal theater for playing VT100 art and animations (github.com/orhun)",
    "points": 6,
    "submitter": "orhunp_",
    "submit_time": "2024-09-24T19:23:14.000000Z",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://github.com/orhun/theattyr",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        A terminal theater for playing VT100 art and animations\n      A terminal theater for playing VT100 art and animations.NoteThe VT100, introduced by DEC in 1978, was among the first video terminals to support ANSI escape codes.The ANSI art scene used the VT100's animation capabilities, made possible by codes that allowed cursor movement, deletion, and character updates to create animated effects.Usually, they represent a long hand-crafted process done by a single person to tell a story. Some of these files may date back to the 1960's and 1970's.TipI developed this tool over a series of livestreams, which you can check out here.Simply run theattyr and browse the terminal movies!Or you can specify a file at the start via e.g. theattyr fireworks.vt:See http://artscene.textfiles.com/vt100/\nLicensed under either of Apache License Version 2"
  },
  {
    "title": "Science-based games and explorable explanations (p.migdal.pl)",
    "points": 13,
    "submitter": "stared",
    "submit_time": "2024-09-25T14:39:11.000000Z",
    "num_comments": 0,
    "comments_url": "",
    "comments": [
      "xxx"
    ],
    "link": "https://p.migdal.pl/blog/2024/05/science-games-explorable-explanations/",
    "first_paragraph": "20 May 2024 | by Piotr Migda\u0142 et al. The traditional way of teaching includes textbooks, lectures, and projects. This teaching method is performed top-down, with clear instructions and expectations. Students are tested via grading of projects, homework assignments, and exams. Usually fun, or the ability to explore on one's own, is not the key focus. Often students' motivation is extrinsic \u2014 to pass a course with a good grade. These activities can be gamified, provided with supplementary goals, scores, and challenges to make them more engaging.In contrast, science-based games1 approach teaching from the opposite direction: to primarily focus on creating an experience sparking intrinsic motivation,2 that is, students play for fun, but learn in the process, as their gaming experience requires learning concepts to proceed or provides an explorative pathway through the game that promotes learning3 (even if it is not strictly necessary).There are several existing games showing different aspe"
  },
  {
    "title": "The Design of Text Editors (arxiv.org)",
    "points": 13,
    "submitter": "signa11",
    "submit_time": "2024-09-28T06:08:31.000000Z",
    "num_comments": 3,
    "comments_url": "https://news.ycombinator.com/item?id=41678248",
    "comments": [
      "I do wish we were more adventurous in how we present our code in editors. As the article says, we seem to be stuck in a rut. Typography in the main editing area is almost always based on a classic monospaced text file. Colours are almost always based on \u201csyntax highlighting\u201d, which in turn often involves distinguishing elements of the language we\u2019re looking at whose differences aren\u2019t very important.Given the potential of modern graphical environments and typography, I\u2019d like to see languages and editors adopt simple spacing improvements like elastic tab stops\u00b9. I don\u2019t want to chose between an aesthetically pleasing layout that draws attention to patterns and anomalies in my code and a layout with completely uniform spacing because anything more carefully aligned is a pain to maintain in later edits and adds noise to diffs. We could shrink blank lines to half-height as well, which would keep the useful visual separation but waste less space.I\u2019d like to use a (somewhat) wider range of basic symbols than whatever we had in ASCII last century. Even allowing comparison operators like \u2264, <, \u2260 and = that align consistently would be a useful start.I\u2019d like simpler syntax highlighting, concentrating on distinguishing major language elements like literals, variables and types, and emphasising problems I probably care about like unclosed strings and misspelt keywords. I\u2019d also like to see colour used more effectively for matching related code like opening/closing pairs or the definition of a value and later references to it.I\u2019d like to see a sidebar for documentation, not unlike the example for comments in the article, but allowing documentation to be attached at different levels from an individual function or variable up to an entire file or beyond, then having the editor automatically offer all documentation relevant to wherever I am in the code and whatever I\u2019m typing there.If we\u2019re designing a UI for another application, we\u2019d always consider aspects like spacing, symbols and iconography, colour schemes and how to show and navigate related information. It\u2019s strange that we give so little consideration to them in the tools we use ourselves!(Join me next week for part two of the epic rant, provisionally entitled Why aren\u2019t we all using semantic diff tools yet?)\u00b9 https://nick-gravgaard.com/elastic-tabstops/\n \nreply",
      "Some food for thought. Although I think the authors criticisms of syntax highlighting are a bit personal and subjective, alternative schemes would be interesting to explore.\n \nreply",
      "This, of course, is the true paper on the design of text editors:\"Multics Emacs: The History, Design and Implementation\", Copyright \u00a9 1979, 1996 Bernard S. Greenberghttps://multicians.org/mepap.html\n \nreply"
    ],
    "link": "https://arxiv.org/abs/2008.06030",
    "first_paragraph": "Help | Advanced SearcharXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.\narXiv Operational Status \n                    Get status notifications via\n                    email\n                    or slack\n"
  },
  {
    "title": "SunVox: Powerful Modular Synthesizer and DAW (warmplace.ru)",
    "points": 146,
    "submitter": "timkq",
    "submit_time": "2024-09-28T13:00:27.000000Z",
    "num_comments": 39,
    "comments_url": "https://news.ycombinator.com/item?id=41679972",
    "comments": [
      "Around 2000-ish I was making music with a similar piece of software called Jeskola Buzz which is also a modular[1] tracker[2].About 5 years ago I remember thinking it would be cool if I could use that type of UI again and it would be great if something like that existed that could run on my tablet. So I searched and I was amazed when I found SunVox. It's a very capable piece of software, highly recommended[1] https://en.wikipedia.org/wiki/Modular_synthesizer[2] https://en.wikipedia.org/wiki/Music_tracker\n \nreply",
      "Jeskola Buzz[1] is a very influential tracker. The source code was lost for a while, but I recently learned that development re-started around 2008.[1] https://en.wikipedia.org/wiki/Jeskola_Buzz\n \nreply",
      "Buzz was amazing. Although it crashed quite a lot it was a marvel for my music production in 2000.\n \nreply",
      "So much love and respect for SunVox, watch this unbelievably beautiful example song with crazy surprise about halfway through: https://youtu.be/AHFSrxlouh8\n \nreply",
      "Immediately reminded me of Jeskola Buzz [0]. While most screenshots don't show it, it also had a tracker included [1].[0] https://en.wikipedia.org/wiki/Jeskola_Buzz[1] https://youtu.be/gLwWMfJLXcM?t=454\n \nreply",
      "One of the very few softsynths that has good interface for touchscreens, think it is the only one I have found that I actually enjoy using. Not a big fan of its sound, just not what I am after, but I don't mind it and it works great as a portable scratchpad.\n \nreply",
      "I've been using SunVox on and off for like 15 years now. I'm not really musically inclined, but I always come back to toy around for a bit. The creator is the sort of mad genius type, he seems to have made his own programming language and cross-platform rendering toolkit to make it all work and has a number of projects based on it. Because of this, SunVox is available on basically any platform you can think, including both major mobile OSes app stores and Linux for a few dollars ($5, iirc) and is definitely worth it. If you're familiar with a sequencer workflow (other notable projects: LSDJ [^0]), it doesn't seem too \"out there\", though the built-in synthesizers tend to lean towards a more airey feel. Highly recommend loading up the example projects, lots of people (including the creator) have some samples in there to poke around with. It's really interesting seeing how different people use the tools provided to compose, sometimes taking wildly different approaches to get similar results.TLDR: download it and load up the sample projects, it's really fun[0]: https://www.littlesounddj.com/lsd/index.php\n \nreply",
      "A more 'hi-fi' alternative to LSDJ is M8 Tracker: https://www.dirtywave.com\n \nreply",
      "I want one of those so bad, but not musically inclined enough to justify the cost.\n \nreply",
      "It's never too late to get started! Also, if you're keen to try M8 before investing, you can make a \"headless\" M8 from a $30 teensy board, but you have to use it via a web emulator. If that sounds intimidating in any way, it's really not - there's no enclosure, no soldering, and no real configuration other than just flashing the teensy with a GUI app.https://github.com/DirtyWave/M8Docs/blob/main/docs/M8Headles...I've been using M8 for ~4 years now, it's an amazing and fun way to make music, and I think it gels for a lot of people who aren't traditionally trained in music.\n \nreply"
    ],
    "link": "https://www.warmplace.ru/soft/sunvox/",
    "first_paragraph": ""
  },
  {
    "title": "If AI seems smarter, it's thanks to smarter human trainers (reuters.com)",
    "points": 101,
    "submitter": "getwiththeprog",
    "submit_time": "2024-09-28T13:28:53.000000Z",
    "num_comments": 89,
    "comments_url": "https://news.ycombinator.com/item?id=41680116",
    "comments": [
      "Throwaway account here. I recently spent a few months as a trainer for a major AI company's project. The well-paid gig mainly involved crafting specialized, reasoning-heavy questions that were supposed to stump the current top models. Most of the trainers had PhDs, and the company's idea was to use our questions to benchmark future AI systems.It was a real challenge. I managed to come up with a handful of questions that tripped up the models, but it was clear they stumbled for pretty mundane reasons\u2014outdated info or faulty string parsing due to tokenization. A common gripe among the trainers was the project's insistence on questions with clear-cut right/wrong answers. Many of us worked in fields where good research tends to be more nuanced and open to interpretation. I saw plenty of questions from other trainers that only had definitive answers if you bought into specific (and often contentious) theoretical frameworks in psychology, sociology, linguistics, history, and so on.The AI company people running the projects seemed a bit out of their depth, too. Their detailed guidelines for us actually contained some fundamental contradictions that they had missed. (Ironically, when I ran those guidelines by Claude, ChatGPT, and Gemini, they all spotted the issues straight away.)After finishing the project, I came away even more impressed by how smart the current models can be.\n \nreply",
      "I wonder how much prompt skill is actually influencing the quality of the response.After using LLMs daily for some time, I have developed a feeling on how to phrase my requests as to get better quality answers.For example, ensure that it can process the information  linearly, like asking to classify items in a list and adding the label directly after the item so that the order remains, instead of allowing it to create multiple lists as the output (which it tends to do by default).So, at least for me, the prompts are getting smarter.\n \nreply",
      "> AI models now require trainers with advanced degreesCompanies that create data for FM (foundational model) companies have been hiring people with degrees for years> Invisible Tech employs 5,000 specialized trainers globallySome of those companies have almost a million freelancers on their platforms, so 5k is honestly kinda medium sized.> It takes smart humans to avoid hallucinations in AIMany smart humans fail at critical thinking. I've seen people with masters fail at spotting hallucinations in elementary level word problems.\n \nreply",
      "> Many smart humans fail at critical thinking. I've seen people with masters fail at spotting hallucinations in elementary level word problems.This is like lamenting that a person who has a doctoral degree, say, in mathematics or physics often don't have a more than basic knowledge about, for example, medicine or pharmacy.\n \nreply",
      "> This is like lamenting that a person who has a doctoral degree, say, in mathematics or physics often don't have a more than basic knowledge in, for example, medicine or pharmacy.It was word problems not rocket science. That tells a lot about human intelligence. We're much less smart than we imagine, and most of our intelligence is based on book learning, not original discovery. Causal reasoning is based on learning and checking exceptions to rules. Truly novel ideation is actually rare.We spent years implementing transformers in a naive way until someone figured out you can do it with much less memory (FlashAttention). That was such a face palm, it was a trivial idea thousands of PhDs missed. And the code is just 3 for loops, with a multiplication, a sum and an exponential. An algorithm that fits on a napkin in its abstract form.\n \nreply",
      "> And the code is just 3 for loops, with a multiplication, a sum and an exponential.All invented/discovered and formalized by humans. That we found so much (unexpected) power in such simple abstractions is not a failure but a testament to the absolute ingenuity of human pursuit of knowledge.The mistake is we\u2019re over-estimating isolated discoveries and underestimating their second order effects.\n \nreply",
      "Of course, all of this pales next to the invention of the actual human brain, which was not driven by humans or AI.\n \nreply",
      "Doesn't this lead you to, perhaps, question the category and measure of \"intelligence\" in general, especially how it is mobilized in this kind of context? Like this very angle does a lot to point out the contradictions in some speculative metaphysical category of \"intelligence\" or \"being smart,\" but then you just seem to accept it in this particular kind of fatalism.Why not take away from this that \"intelligence\" is a word that obtains something relative to a particular society, namely, one which values some kind of behavior and speech over others.   \"Intelligence\" is something important to society, its the individual who negotiates (or not) the way they think and learn with what this particular signifier connects with at a given place and time.Like I assume you don't agree, but just perhaps if we use our \"intelligence\" here we could maybe come to some different conclusions here! Everyone is just dying to be like mid-20th century behaviorist now, I just don't understand!\n \nreply",
      "It depends on your definition of smart. I think that holding a degree != smart.\n \nreply",
      "> I think that holding a degree != smart.Does this mean that these two sentences are completely unrelated and only happen to exist within the same paragraph?> Many smart humans fail at critical thinking. I've seen people with masters [...]I've understood you to use \"people with masters\" as an example of \"smart humans\".\n \nreply"
    ],
    "link": "https://www.reuters.com/technology/artificial-intelligence/if-your-ai-seems-smarter-its-thanks-smarter-human-trainers-2024-09-28/",
    "first_paragraph": ""
  },
  {
    "title": "REPL for Dart (github.com/fzyzcjy)",
    "points": 71,
    "submitter": "tosh",
    "submit_time": "2024-09-28T16:33:38.000000Z",
    "num_comments": 27,
    "comments_url": "https://news.ycombinator.com/item?id=41681284",
    "comments": [
      "Even though I don\u2019t use Dart myself I very much approve of this initiative.I live in my Python REPL (ipython) and I couldn\u2019t live without my hot reloading without losing state. Allows for hacking about a bit directly in the REPL. Once something starts to take shape you can push it into a file, import it into your REPL then hack about with it in a text editor.The hot reloading is great when you have a load of state in classes and you can change code in the editor and have that immediately updated on your existing objects in the REPL.\n \nreply",
      "After learning how to do this in lisp I've been missing it in python. Do you use anything alongside ipython to make this happen?\n \nreply",
      "Config file here with a couple of lines to add it to ipython automatically.https://github.com/aidos/dotfiles/blob/master/_config/ipytho...\n \nreply",
      "Thanks!\n \nreply",
      "from importlib import reload \n\nReload paired with inotify are the building blocks, to wire up yourself.\n \nreply",
      "Not strictly related (because it doesn't have a working REPL yet) but may also find ClojureDart of interest.https://github.com/Tensegritics/ClojureDart\n \nreply",
      "There is so much cool stuff at various stages of landing in the Dart pipeline at the moment. A few things that come to mind include:1. Dart now supports the native Web platform APIs and offers a really compelling alternative to TypeScript now thanks to their their latest generation of JS interop. Example for how the code looks here: https://github.com/kevmoo/kevmoo.com/blob/main/web/main.dart2. Compile to WASM now on the web also with future work to also align itself with the emerging WASI standards both as a compile target and the ability to embed WASI runtimes into Dart programs (technically already possible through their C interop)3. Lots of great work on cross language interop with C, C++, Swift, Rust, Go, JavaScript, Objective C, Kotlin and Java here https://github.com/dart-lang/native4. Upcoming Macros feature which gives fully static type safe automatic and fully debugable code generation.5. Potentially looking at bringing Shared Memory Multithreading to the language https://github.com/dart-lang/language/blob/2662d252b7fa93175...6. Also some early work on a bytecode compiler it seems but I\u2019ve not seen any kind of announcement about it here https://github.com/dart-lang/sdk/tree/main/pkg/dart2bytecode7. This REPLIt\u2019s really a good time to be a part of the community. It\u2019s a very bright looking future for it.\n \nreply",
      "Where is JS Interop used in the first example? (It's a bit hard to tell with the wildcard imports how much of that is actually coming from web.dart.)\n \nreply",
      "Web.dart is basically designed to give you the equivalent of any of the browser based APIs you would find on MDN essentially unchanged so things like document.querySelectorAll and things like that would just work as though you were using JavaScript (and you technically are in the background) but without otherwise needing to ever leave Dart.\n \nreply",
      "Well, sure, but web.dart is one of the original packages that came with Dart. That part isn't new.\n \nreply"
    ],
    "link": "https://github.com/fzyzcjy/dart_interactive",
    "first_paragraph": "We read every piece of feedback, and take your input very seriously.\n            To see all available qualifiers, see our documentation.\n          \n        REPL (interactive shell) for Dart, supporting 3rd party packages, hot reload, and full grammar\n      \nA lot of sibling languages have a REPL, and is quite helpful in everyday usage, while Dart did not have it (even though it was the 7th highest-voted request). So here it comes!A full-featured REPL (interactive shell), with:Surely, you do not have to use it like this. It is just a workflow that I personally feel comfortable when working with IPython/Juypter.Suppose we have my_app.dart with some code, probably edited inside an IDE:Play with it a bit:Then we realize something wrong and want to change it:Continue playing with it (auto hot reloaded, and state preserved):We can also use all dependencies in the package as well, since the REPL code is just like a normal code file in this package.Install (just standard procedure of installin"
  },
  {
    "title": "The U.S. is approving citizenship applications at the fastest speed in years (msn.com)",
    "points": 32,
    "submitter": "impish9208",
    "submit_time": "2024-09-28T22:35:30.000000Z",
    "num_comments": 15,
    "comments_url": "https://news.ycombinator.com/item?id=41683397",
    "comments": [
      "Australia, on both sides of the house, also understands the importance of Immigration.However we just neglected to build anywhere for them to live...We are in a cost-of-living crisis, a per-capita recession.One of the reasons we are not in a full-blown recessions is the wealth that immigrants brought with them!Building firms are going under, and we gutted the trade schools years ago. So the housing crisis isn't going to resolve anytime soon...\n \nreply",
      "According to the article they just brought it back to 2014 levels.\n \nreply",
      "Original article, not the msn.com repost:https://www.latimes.com/politics/story/2024-09-26/with-an-el...\n \nreply",
      "MSN version isn't paywalled, though.\n \nreply",
      "yay\n \nreply",
      "It's a long process and people who have been vetted and through it don't deserve to be held up unless there is a good reason. I can understand if there is something amiss but to just put the entire thing on hold for \"theater\" is wrong.Still from what I understand the US takes in more immigrants every year than any other country.Worldwide, the United States is home to more international migrants than any other country, and more than the next four countries\u2014Germany, Saudi Arabia, Russia, and the United Kingdom\u2014combinedhttps://www.migrationpolicy.org/article/frequently-requested...\n \nreply",
      "> Worldwide, the United States is home to more international migrants than any other country, and more than the next four countries\u2014Germany, Saudi Arabia, Russia, and the United Kingdom\u2014combinedThat's a somewhat misleading way of presenting data.It is true that in absolute terms, the US contains more immigrants than any other country on earth.However, on a percentage of the population basis, the US is actually only around the OECD average in terms of numbers of immigrants: https://www.oecd.org/en/data/indicators/foreign-born-populat... \u2013 in 2019, Luxembourg was 47.30% foreign-born, Australia 29.90%, Switzerland 29.70%, Israel 21.20%, Sweden 19.50%. At 13.60%, the US was around the middle.The fact that the US comes first in absolute terms, is not because the US is unusually welcoming to immigrants, it is because (among developed countries) it is unusually populous \u2013 at 333 million people, it is over 2.5 times more populous than the 2nd most populous OECD member (Japan).\n \nreply",
      "> the uptick in new citizens is due to efforts to reduce a backlog of applications that began during the Trump administration and exploded amid the COVID-19 pandemic.\n \nreply",
      "Probably because if Trump gets elected they'll crawl to a halt again.\n \nreply",
      "Immigration is an economic geopolitical weapon against Russia and China.\n \nreply"
    ],
    "link": "https://www.msn.com/en-us/news/us/with-an-election-looming-the-us-is-approving-citizenship-applications-at-the-fastest-speed-in-years/ar-AA1rf4FU",
    "first_paragraph": ""
  },
  {
    "title": "How Discord stores trillions of messages (discord.com)",
    "points": 70,
    "submitter": "jakey_bakey",
    "submit_time": "2024-09-28T22:07:43.000000Z",
    "num_comments": 29,
    "comments_url": "https://news.ycombinator.com/item?id=41683293",
    "comments": [
      "This blog post seems to blame GC heavily, but if you look back at their earlier blog post [0], it seems to be more shortcomings in either how they're using Cassandra or how Cassandra handles heavy deletes, or some combination:\"It was at that moment that it became obvious they deleted millions of messages using our API, leaving only 1 message in the channel. If you have been paying attention you might remember how Cassandra handles deletes using tombstones (mentioned in Eventual Consistency). When a user loaded this channel, even though there was only 1 message, Cassandra had to effectively scan millions of message tombstones (generating garbage faster than the JVM could collect it).\"And although the blog post talks about GC tuning, there's mention here [1] that they didn't do much tuning and were actually running on an old version of Cassandra (and presumably JVM) - having just switched over from CMS (!).  0) https://discord.com/blog/how-discord-stores-billions-of-messages\n  1) https://news.ycombinator.com/item?id=33136453\n \nreply",
      "Anyone else reading this and being quite happy that they're not working at this scale?\n \nreply",
      "I don't mind scale. I mind the bureaucracy and promotion-driven-development that comes with working in a bloated engineering org.\n \nreply",
      "+100Many companies have products that operate at \u201cscale\u201d. They manage to do so with pretty boring techniques (sharding, autoscaling) and technologies (postgres, cloud storage).Because of the insane blog driven tech culture, many of these teams get questioned by clueless leadership (who read these blogs) and ask why the company isn\u2019t using cassandra / some other hot technology. And it always causes much consternation and wastage.\n \nreply",
      "But that's where the really fun and complicated problems are.  The ones that really make you stop and think, and not just think, but be creative.95% of the work is still the same \"treading in well trod paths\", same old same old tech work, but that 5% is really something.\n \nreply",
      "Any time I read anything about any web-adjacent technology I'm incredibly thankful that I don't work anywhere near that industry.Embedded can be complex, but web stuff is just a Lovecraftian nightmare in comparison\n \nreply",
      "I have stared into the abyss and seen the eyes of cthulu. I am much happier writing embedded drivers than I was trying to make sense of why previous devs thought it was a good idea to move bounded tunable server side api calls to the client, allowing it to effectively write arbitrary sql calls across multiple databases.\n \nreply",
      "Iteration speed is significantly fast on the client. Perf is an afterthought \u2014 for better or worse\n \nreply",
      "Sounds like a fun time lol\n \nreply",
      "Needs (2023)That services layer reminds be of a big, fancy, distributed Varnish Cache... they don't mention caching and they chose the word coalesce so I assume it doesn't do much actual caching. But made me think of Varnish's \"grace mode\" and it's use to prevent the thundering herd problem (which is where I first heard of 'request coalescing') https://varnish-cache.org/docs/6.1/users-guide/vcl-grace.htm...Also love to see consistent hashing come up again and again. It's a great piece of duct tape that has proven useful in many similar situations. If you know where something should be then you know where everything is gonna come look for it!\n \nreply"
    ],
    "link": "https://discord.com/blog/how-discord-stores-trillions-of-messages",
    "first_paragraph": ""
  }
]